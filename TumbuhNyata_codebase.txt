================================================================================
ANDROID PROJECT CODEBASE EXTRACTION
================================================================================
Project: 
Extraction Date: 2025-06-07 14:40:12
Total Files: 163
Total Lines: 17,816
Project Root: .
================================================================================

TABLE OF CONTENTS
----------------------------------------
  1. app\src\main\AndroidManifest.xml (33 lines)
  2. app\src\main\java\com\example\tumbuhnyata\MainActivity.kt (18 lines)
  3. app\src\main\java\com\example\tumbuhnyata\TumbuhNyataApp.kt (16 lines)
  4. app\src\main\java\com\example\tumbuhnyata\data\CsrApiService.kt (16 lines)
  5. app\src\main\java\com\example\tumbuhnyata\data\CsrData.kt (13 lines)
  6. app\src\main\java\com\example\tumbuhnyata\data\api\AuthAPI.kt (17 lines)
  7. app\src\main\java\com\example\tumbuhnyata\data\api\DashboardApiService.kt (101 lines)
  8. app\src\main\java\com\example\tumbuhnyata\data\api\NotificationApi.kt (21 lines)
  9. app\src\main\java\com\example\tumbuhnyata\data\api\ProfileApi.kt (22 lines)
 10. app\src\main\java\com\example\tumbuhnyata\data\api\WorkshopApiService.kt (10 lines)
 11. app\src\main\java\com\example\tumbuhnyata\data\local\AppDatabase.kt (46 lines)
 12. app\src\main\java\com\example\tumbuhnyata\data\local\TokenManager.kt (33 lines)
 13. app\src\main\java\com\example\tumbuhnyata\data\local\dao\DashboardDao.kt (45 lines)
 14. app\src\main\java\com\example\tumbuhnyata\data\local\entity\CsrReportEntity.kt (28 lines)
 15. app\src\main\java\com\example\tumbuhnyata\data\mapper\DataMappers.kt (265 lines)
 16. app\src\main\java\com\example\tumbuhnyata\data\model\BottomNavItem.kt (8 lines)
 17. app\src\main\java\com\example\tumbuhnyata\data\model\CsrCategory.kt (9 lines)
 18. app\src\main\java\com\example\tumbuhnyata\data\model\CsrReportModel.kt (75 lines)
 19. app\src\main\java\com\example\tumbuhnyata\data\model\CsrStatus.kt (122 lines)
 20. app\src\main\java\com\example\tumbuhnyata\data\model\DashboardDataResponse.kt (187 lines)
 21. app\src\main\java\com\example\tumbuhnyata\data\model\LoginRequest.kt (6 lines)
 22. app\src\main\java\com\example\tumbuhnyata\data\model\LoginResponse.kt (5 lines)
 23. app\src\main\java\com\example\tumbuhnyata\data\model\Notification.kt (25 lines)
 24. app\src\main\java\com\example\tumbuhnyata\data\model\Profile.kt (28 lines)
 25. app\src\main\java\com\example\tumbuhnyata\data\model\RegisterRequest.kt (10 lines)
 26. app\src\main\java\com\example\tumbuhnyata\data\model\RegisterResponse.kt (5 lines)
 27. app\src\main\java\com\example\tumbuhnyata\data\model\TimelineItem.kt (8 lines)
 28. app\src\main\java\com\example\tumbuhnyata\data\model\UploadResponse.kt (13 lines)
 29. app\src\main\java\com\example\tumbuhnyata\data\model\Workshop.kt (162 lines)
 30. app\src\main\java\com\example\tumbuhnyata\data\network\AuthInterceptor.kt (19 lines)
 31. app\src\main\java\com\example\tumbuhnyata\data\network\RetrofitInstance.kt (40 lines)
 32. app\src\main\java\com\example\tumbuhnyata\data\repository\DashboardRepository.kt (207 lines)
 33. app\src\main\java\com\example\tumbuhnyata\data\repository\NotificationRepository.kt (24 lines)
 34. app\src\main\java\com\example\tumbuhnyata\data\repository\ProfileRepository.kt (46 lines)
 35. app\src\main\java\com\example\tumbuhnyata\data\repository\UploadRepository.kt (95 lines)
 36. app\src\main\java\com\example\tumbuhnyata\data\repository\WorkshopRepository.kt (18 lines)
 37. app\src\main\java\com\example\tumbuhnyata\data\util\Resource.kt (14 lines)
 38. app\src\main\java\com\example\tumbuhnyata\di\NetworkModule.kt (64 lines)
 39. app\src\main\java\com\example\tumbuhnyata\navigation\NavGraph.kt (340 lines)
 40. app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\AjukanSertifikasi.kt (147 lines)
 41. app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\Berhasil.kt (137 lines)
 42. app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\DetailSertifikasi.kt (160 lines)
 43. app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\DokumenOne.kt (198 lines)
 44. app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\RiwayatPengajuan.kt (140 lines)
 45. app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\Sertifikasi.kt (379 lines)
 46. app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\SertifikasiAnda.kt (153 lines)
 47. app\src\main\java\com\example\tumbuhnyata\ui\component\SuccessDialog.kt (74 lines)
 48. app\src\main\java\com\example\tumbuhnyata\ui\components\BottomNavBarProfile.kt (75 lines)
 49. app\src\main\java\com\example\tumbuhnyata\ui\components\BottomNavigationBar.kt (58 lines)
 50. app\src\main\java\com\example\tumbuhnyata\ui\components\CsrCard.kt (165 lines)
 51. app\src\main\java\com\example\tumbuhnyata\ui\components\DeskripsiWorkshop.kt (195 lines)
 52. app\src\main\java\com\example\tumbuhnyata\ui\components\InputField.kt (40 lines)
 53. app\src\main\java\com\example\tumbuhnyata\ui\components\SectionHeader.kt (58 lines)
 54. app\src\main\java\com\example\tumbuhnyata\ui\components\SectionWithTittle.kt (41 lines)
 55. app\src\main\java\com\example\tumbuhnyata\ui\components\SeeAllButton.kt (32 lines)
 56. app\src\main\java\com\example\tumbuhnyata\ui\components\TopBarProfile.kt (53 lines)
 57. app\src\main\java\com\example\tumbuhnyata\ui\components\WorkshopCard.kt (99 lines)
 58. app\src\main\java\com\example\tumbuhnyata\ui\components\WorkshopListItem.kt (113 lines)
 59. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\DashboardScreen.kt (229 lines)
 60. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\components\KPIItem.kt (227 lines)
 61. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\KPIDetailScreen.kt (463 lines)
 62. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\KPIDetailViewModel.kt (80 lines)
 63. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\components\KPIBarChart.kt (141 lines)
 64. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\components\KPILineChart.kt (133 lines)
 65. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\components\KpiFilterSwitch.kt (75 lines)
 66. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\components\KpiStatCapsule.kt (126 lines)
 67. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\upload\UploadDataScreen.kt (309 lines)
 68. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\upload\UploadSuccessScreen.kt (164 lines)
 69. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\upload\components\DocumentUploadItem.kt (153 lines)
 70. app\src\main\java\com\example\tumbuhnyata\ui\dashboardkeuangan\DashboardComponents.kt (93 lines)
 71. app\src\main\java\com\example\tumbuhnyata\ui\dashboardkeuangan\DashboardKeuanganScreen.kt (483 lines)
 72. app\src\main\java\com\example\tumbuhnyata\ui\dashboardkeuangan\PieChart.kt (129 lines)
 73. app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\CsrData.kt (12 lines)
 74. app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\CsrSubmissionScreen.kt (803 lines)
 75. app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\CsrSuccessScreen.kt (136 lines)
 76. app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\CsrVerificationScreen.kt (313 lines)
 77. app\src\main\java\com\example\tumbuhnyata\ui\home\HomeScreen.kt (637 lines)
 78. app\src\main\java\com\example\tumbuhnyata\ui\login\LoginScreen.kt (321 lines)
 79. app\src\main\java\com\example\tumbuhnyata\ui\notification\NotificationScreen.kt (236 lines)
 80. app\src\main\java\com\example\tumbuhnyata\ui\notification\NotifikasiDetailScreen.kt (257 lines)
 81. app\src\main\java\com\example\tumbuhnyata\ui\profile\AboutScreen.kt (119 lines)
 82. app\src\main\java\com\example\tumbuhnyata\ui\profile\ChangePassword.kt (211 lines)
 83. app\src\main\java\com\example\tumbuhnyata\ui\profile\ChangePasswordSuccess.kt (104 lines)
 84. app\src\main\java\com\example\tumbuhnyata\ui\profile\ProfileScreen.kt (246 lines)
 85. app\src\main\java\com\example\tumbuhnyata\ui\profile\UpdateProfile.kt (156 lines)
 86. app\src\main\java\com\example\tumbuhnyata\ui\profile\VerificationOne.kt (195 lines)
 87. app\src\main\java\com\example\tumbuhnyata\ui\profile\VerificationSuccess.kt (116 lines)
 88. app\src\main\java\com\example\tumbuhnyata\ui\profile\VerificationTwo.kt (192 lines)
 89. app\src\main\java\com\example\tumbuhnyata\ui\register\AkunBerhasil.kt (106 lines)
 90. app\src\main\java\com\example\tumbuhnyata\ui\register\OtpScreen.kt (208 lines)
 91. app\src\main\java\com\example\tumbuhnyata\ui\register\RegisterScreen.kt (766 lines)
 92. app\src\main\java\com\example\tumbuhnyata\ui\register\VerifikasiScreen.kt (131 lines)
 93. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\DetailRiwayatScreen.kt (284 lines)
 94. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\DiterimaScreen.kt (102 lines)
 95. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\InvoiceScreen.kt (151 lines)
 96. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\MendatangDetailScreen.kt (215 lines)
 97. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\PerluTindakanScreen.kt (102 lines)
 98. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\ProgressDetailScreen.kt (206 lines)
 99. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\RevisiSuccessScreen.kt (136 lines)
100. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\RiwayatScreen.kt (166 lines)
101. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\SelesaiDetailScreen.kt (334 lines)
102. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\UploadRevisiScreen.kt (192 lines)
103. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\verticalTimeline.kt (107 lines)
104. app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\OnboardingScreen.kt (127 lines)
105. app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\OnboardingScreen2.kt (127 lines)
106. app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\OnboardingScreen3.kt (132 lines)
107. app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\OptionScreen.kt (136 lines)
108. app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\SplashScreen.kt (75 lines)
109. app\src\main\java\com\example\tumbuhnyata\ui\theme\Color.kt (15 lines)
110. app\src\main\java\com\example\tumbuhnyata\ui\theme\Theme.kt (29 lines)
111. app\src\main\java\com\example\tumbuhnyata\ui\theme\Typography.kt (59 lines)
112. app\src\main\java\com\example\tumbuhnyata\ui\workshop\DaftarWorkshop.kt (254 lines)
113. app\src\main\java\com\example\tumbuhnyata\ui\workshop\DeskripsiWorkshopScreen.kt (72 lines)
114. app\src\main\java\com\example\tumbuhnyata\ui\workshop\NewWorkshop.kt (83 lines)
115. app\src\main\java\com\example\tumbuhnyata\ui\workshop\RekomWorkshop.kt (82 lines)
116. app\src\main\java\com\example\tumbuhnyata\ui\workshop\WorkshopBerhasil.kt (109 lines)
117. app\src\main\java\com\example\tumbuhnyata\ui\workshop\WorkshopScreen.kt (81 lines)
118. app\src\main\java\com\example\tumbuhnyata\util\NetworkConnectivityUtil.kt (33 lines)
119. app\src\main\java\com\example\tumbuhnyata\util\TokenManager.kt (29 lines)
120. app\src\main\java\com\example\tumbuhnyata\viewmodel\AjukanSertifikasiViewModel.kt (83 lines)
121. app\src\main\java\com\example\tumbuhnyata\viewmodel\CsrSubmissionViewModel.kt (138 lines)
122. app\src\main\java\com\example\tumbuhnyata\viewmodel\CsrVerificationViewModel.kt (75 lines)
123. app\src\main\java\com\example\tumbuhnyata\viewmodel\DaftarWorkshopViewModel.kt (76 lines)
124. app\src\main\java\com\example\tumbuhnyata\viewmodel\DashboardKeuanganViewModel.kt (14 lines)
125. app\src\main\java\com\example\tumbuhnyata\viewmodel\DashboardViewModel.kt (103 lines)
126. app\src\main\java\com\example\tumbuhnyata\viewmodel\HomeViewModel.kt (140 lines)
127. app\src\main\java\com\example\tumbuhnyata\viewmodel\NotificationViewModel.kt (86 lines)
128. app\src\main\java\com\example\tumbuhnyata\viewmodel\ProfileViewModel.kt (106 lines)
129. app\src\main\java\com\example\tumbuhnyata\viewmodel\RegisterViewModel.kt (138 lines)
130. app\src\main\java\com\example\tumbuhnyata\viewmodel\RiwayatPengajuanViewModel.kt (71 lines)
131. app\src\main\java\com\example\tumbuhnyata\viewmodel\RiwayatViewModel.kt (23 lines)
132. app\src\main\java\com\example\tumbuhnyata\viewmodel\SertifikasiViewModel.kt (64 lines)
133. app\src\main\java\com\example\tumbuhnyata\viewmodel\SplashViewModel.kt (24 lines)
134. app\src\main\java\com\example\tumbuhnyata\viewmodel\UploadViewModel.kt (96 lines)
135. app\src\main\java\com\example\tumbuhnyata\viewmodel\VerificationOneViewModel.kt (45 lines)
136. app\src\main\java\com\example\tumbuhnyata\viewmodel\VerificationTwoViewModel.kt (30 lines)
137. app\src\main\java\com\example\tumbuhnyata\viewmodel\WorkshopDetailViewModel.kt (24 lines)
138. app\src\main\java\com\example\tumbuhnyata\viewmodel\WorkshopViewModel.kt (22 lines)
139. app\src\main\res\drawable\angle_double_small_down.xml (5 lines)
140. app\src\main\res\drawable\ic_carbonfootprint.xml (9 lines)
141. app\src\main\res\drawable\ic_filter.xml (11 lines)
142. app\src\main\res\drawable\ic_konsumsienergi.xml (5 lines)
143. app\src\main\res\drawable\ic_launcher_background.xml (170 lines)
144. app\src\main\res\drawable\ic_launcher_foreground.xml (30 lines)
145. app\src\main\res\drawable\ic_pembaruandatasplashlogo.xml (29 lines)
146. app\src\main\res\drawable\ic_penerimamanfaat.xml (9 lines)
147. app\src\main\res\drawable\ic_pengelolaansampah.xml (5 lines)
148. app\src\main\res\drawable\ic_penggunaanair.xml (7 lines)
149. app\src\main\res\drawable\ic_pohontertanam.xml (5 lines)
150. app\src\main\res\drawable\ic_tachometer_average.xml (5 lines)
151. app\src\main\res\drawable\ic_tambahdata.xml (7 lines)
152. app\src\main\res\layout\activity_main.xml (19 lines)
153. app\src\main\res\mipmap-anydpi-v26\ic_launcher.xml (6 lines)
154. app\src\main\res\mipmap-anydpi-v26\ic_launcher_round.xml (6 lines)
155. app\src\main\res\values-night\themes.xml (7 lines)
156. app\src\main\res\values\colors.xml (5 lines)
157. app\src\main\res\values\strings.xml (3 lines)
158. app\src\main\res\values\themes.xml (9 lines)
159. app\src\main\res\xml\backup_rules.xml (13 lines)
160. app\src\main\res\xml\data_extraction_rules.xml (19 lines)
161. app\src\main\res\xml\network_security_config.xml (6 lines)
162. gradle.properties (23 lines)
163. gradle\wrapper\gradle-wrapper.properties (6 lines)

================================================================================

FILE 1: app\src\main\AndroidManifest.xml
Lines: 33 | Size: 1200 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

    <application
        android:name=".TumbuhNyataApp"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.TumbuhNyata"
        tools:targetApi="31"
        android:networkSecurityConfig="@xml/network_security_config"
        >
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

    </application>

</manifest>

================================================================================

FILE 2: app\src\main\java\com\example\tumbuhnyata\MainActivity.kt
Lines: 18 | Size: 518 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import com.example.tumbuhnyata.navigation.AppNavigation
import com.example.tumbuhnyata.ui.theme.TumbuhNyataTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            TumbuhNyataTheme {
                AppNavigation()
            }
        }
    }
}


================================================================================

FILE 3: app\src\main\java\com\example\tumbuhnyata\TumbuhNyataApp.kt
Lines: 16 | Size: 333 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata

import android.app.Application
import android.content.Context

class TumbuhNyataApp : Application() {
    companion object {
        lateinit var appContext: Context
            private set
    }

    override fun onCreate() {
        super.onCreate()
        appContext = applicationContext
    }
} 

================================================================================

FILE 4: app\src\main\java\com\example\tumbuhnyata\data\CsrApiService.kt
Lines: 16 | Size: 417 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data

import com.example.tumbuhnyata.viewmodel.CsrSubmissionRequest
import retrofit2.Response
import retrofit2.http.Body
import retrofit2.http.POST

interface CsrApiService {
    @POST("csr/ajukan ")
    suspend fun submitCSR(@Body request: CsrSubmissionRequest): Response<CsrSubmissionResponse>
}

data class CsrSubmissionResponse(
    val success: Boolean,
    val message: String?
)

================================================================================

FILE 5: app\src\main\java\com\example\tumbuhnyata\data\CsrData.kt
Lines: 13 | Size: 339 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data

data class CsrData(
    val programName: String,
    val category: String,
    val description: String,
    val location: String,
    val partnerName: String,
    val startDate: String,
    val endDate: String,
    val budget: String,
    val agreed: Boolean = true // Default to true for submission
)

================================================================================

FILE 6: app\src\main\java\com\example\tumbuhnyata\data\api\AuthAPI.kt
Lines: 17 | Size: 589 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.api

import retrofit2.http.Body
import retrofit2.http.POST
import retrofit2.Call
import com.example.tumbuhnyata.data.model.LoginRequest
import com.example.tumbuhnyata.data.model.LoginResponse
import com.example.tumbuhnyata.data.model.RegisterRequest
import com.example.tumbuhnyata.data.model.RegisterResponse

interface AuthApi {
    @POST("auth/login") // Remove the leading slash
    fun login(@Body request: LoginRequest): Call<LoginResponse>
    
    @POST("auth/register")
    fun register(@Body request: RegisterRequest): Call<RegisterResponse>
}

================================================================================

FILE 7: app\src\main\java\com\example\tumbuhnyata\data\api\DashboardApiService.kt
Lines: 101 | Size: 4365 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.api

import com.example.tumbuhnyata.data.model.DashboardDataResponse // Model baru untuk endpoint /dashboard
import com.example.tumbuhnyata.data.model.CsrReportModel // Jika ada endpoint lain yang mengembalikan list ini
import com.example.tumbuhnyata.data.model.KpiDetailResponse // Model untuk KPI detail
import com.example.tumbuhnyata.data.model.CsrSubmissionsResponse // Added for the new submissions response type
import com.example.tumbuhnyata.data.model.UploadResponse // Model for upload response
import okhttp3.MultipartBody
import retrofit2.Response
import retrofit2.http.*

/**
 * Retrofit service interface for fetching dashboard related data, 
 * specifically CSR reports or KPI data.
 */
interface DashboardApiService {

    /**
     * Fetches aggregated dashboard data including analytics, recent submissions, and summary.
     * Uses the /carbon-submissions/dashboard endpoint from the backend.
     *
     * @param companyId Optional filter by company ID.
     * @param year Optional filter by year (defaults to current year on backend).
     * @return A Retrofit Response wrapping DashboardDataResponse.
     */
    @GET("carbon-submissions/dashboard") // Endpoint yang benar berdasarkan struktur backend
    suspend fun getDashboardData(
        // Jika API Anda membutuhkan token otorisasi di header:
        // @Header("Authorization") token: String,

        @Query("company_id") companyId: Int? = null,
        @Query("year") year: Int? = null
        // Backend sudah memiliki default untuk tahun jika tidak disediakan
    ): Response<DashboardDataResponse>

    /**
     * Alternative endpoint untuk testing (tidak diperlukan lagi karena sudah tahu yang benar)
     */
    @GET("dashboard") // Keep as fallback
    suspend fun getDashboardDataNoPrefIx(
        @Query("company_id") companyId: Int? = null,
        @Query("year") year: Int? = null
    ): Response<DashboardDataResponse>

    /**
     * Fetches detailed KPI data for a specific KPI type.
     * Endpoint: /carbon-submissions/kpi/{kpiType}
     * 
     * @param kpiType KPI type (carbon_footprint, energy_usage, etc.)
     * @param companyId Optional company filter
     * @param year Optional year filter for yearly data
     * @return Response containing detailed KPI data with monthly and yearly breakdowns
     */
    @GET("carbon-submissions/kpi/{kpiType}")
    suspend fun getKpiDetail(
        @Path("kpiType") kpiType: String,
        @Query("company_id") companyId: String? = null,
        @Query("year") year: Int
    ): Response<KpiDetailResponse>

    /**
     * Fetches a list of all CSR submissions.
     * Menggunakan endpoint /carbon-submissions/submissions dari backend Anda.
     *
     * @param companyId Optional filter by company ID.
     * @param year Optional filter by year.
     * @param month Optional filter by month.
     * @param page Optional pagination parameter.
     * @param limit Optional pagination parameter for items per page.
     * @return A Retrofit Response wrapping a submissions response with pagination.
     */
    @GET("carbon-submissions/submissions") // Endpoint yang benar
    suspend fun getAllSubmissions(
        // @Header("Authorization") token: String, // Jika perlu token
        @Query("company_id") companyId: String? = null,
        @Query("year") year: Int? = null,
        @Query("month") month: Int? = null,
        @Query("page") page: Int? = null,
        @Query("limit") limit: Int? = null
    ): Response<CsrSubmissionsResponse> // Update to handle wrapper response

    // Tambahan: endpoint untuk analytics terpisah jika diperlukan
    @GET("carbon-submissions/analytics")
    suspend fun getAnalytics(
        @Query("company_id") companyId: Int? = null,
        @Query("year") year: Int? = null
    ): Response<DashboardDataResponse> // Atau buat model terpisah untuk analytics

    /**
     * Uploads a CSV file containing carbon emissions data.
     * Uses the /carbon-submissions/upload-csv endpoint from the backend.
     *
     * @param file The CSV file to upload (multipart with field name "csvFile")
     * @return A Retrofit Response wrapping UploadResponse with upload status and message.
     */
    @Multipart
    @POST("carbon-submissions/upload-csv")
    suspend fun uploadCsvFile(
        @Part file: MultipartBody.Part
    ): Response<UploadResponse>
} 

================================================================================

FILE 8: app\src\main\java\com\example\tumbuhnyata\data\api\NotificationApi.kt
Lines: 21 | Size: 653 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.api

import com.example.tumbuhnyata.data.model.Notification
import retrofit2.Response
import retrofit2.http.*

interface NotificationApi {
    @GET("notifications/{userId}")
    suspend fun getNotifications(@Path("userId") userId: String): Response<List<Notification>>

    @POST("notifications")
    suspend fun createNotification(
        @Body notification: Notification
    ): Response<Notification>

    @PATCH("notifications/{id}/read")
    suspend fun markAsRead(@Path("id") id: Int): Response<Unit>

    @DELETE("notifications/{id}")
    suspend fun deleteNotification(@Path("id") id: Int): Response<Unit>
} 

================================================================================

FILE 9: app\src\main\java\com\example\tumbuhnyata\data\api\ProfileApi.kt
Lines: 22 | Size: 623 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.api

import com.example.tumbuhnyata.data.model.ProfileResponse
import retrofit2.Response
import retrofit2.http.GET
import retrofit2.http.PATCH
import retrofit2.http.Body

interface ProfileApi {
    @GET("profile/me")
    suspend fun getUserProfile(): Response<ProfileResponse>
    
    @PATCH("profile/update")
    suspend fun updateProfile(
        @Body updateData: Map<String, String>
    ): Response<Map<String, String>>
    
    @PATCH("profile/change-password")
    suspend fun changePassword(
        @Body passwordData: Map<String, String>
    ): Response<Map<String, String>>
}

================================================================================

FILE 10: app\src\main\java\com\example\tumbuhnyata\data\api\WorkshopApiService.kt
Lines: 10 | Size: 268 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.api

import retrofit2.Response
import retrofit2.http.Body
import retrofit2.http.POST

interface WorkshopApiService {
    @POST("workshops/register")
    suspend fun registerWorkshop(@Body body: Map<String, String>): Response<Any>
}

================================================================================

FILE 11: app\src\main\java\com\example\tumbuhnyata\data\local\AppDatabase.kt
Lines: 46 | Size: 1809 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import com.example.tumbuhnyata.data.local.dao.DashboardDao // DAO yang sudah kita buat
import com.example.tumbuhnyata.data.local.entity.CsrReportEntity // Entity yang sudah kita buat

/**
 * Main database class for the application using Room.
 * It should list all entities and provide access to DAOs.
 */
@Database(
    entities = [
        CsrReportEntity::class
        // Tambahkan entitas lain di sini jika ada, contoh: UserEntity::class, NotificationEntity::class
    ],
    version = 1, // Naikkan versi jika ada perubahan skema (dan sediakan migration)
    exportSchema = false // Set true jika ingin mengekspor skema ke file JSON (untuk version control skema)
)
abstract class AppDatabase : RoomDatabase() {

    abstract fun dashboardDao(): DashboardDao // Expose DashboardDao
    // abstract fun userDao(): UserDao // Contoh jika ada DAO lain

    companion object {
        @Volatile
        private var INSTANCE: AppDatabase? = null

        fun getDatabase(context: Context): AppDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "tumbuh_nyata_database" // Nama file database
                )
                // .addMigrations(MIGRATION_1_2) // Tambahkan migrasi jika ada perubahan skema
                .fallbackToDestructiveMigration() // Hati-hati: ini akan menghapus dan membuat ulang DB jika skema berubah dan tidak ada migrasi
                .build()
                INSTANCE = instance
                instance
            }
        }
    }
} 

================================================================================

FILE 12: app\src\main\java\com\example\tumbuhnyata\data\local\TokenManager.kt
Lines: 33 | Size: 1040 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local

import android.content.Context
import androidx.security.crypto.EncryptedSharedPreferences
import androidx.security.crypto.MasterKeys

object TokenManager {
    private const val PREFS_NAME = "auth_prefs"
    private const val KEY_ACCESS_TOKEN = "ACCESS_TOKEN"

    private fun getPrefs(context: Context) = EncryptedSharedPreferences.create(
        PREFS_NAME,
        MasterKeys.getOrCreate(MasterKeys.AES256_GCM_SPEC),
        context,
        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
    )

    fun saveToken(context: Context, token: String) {
        getPrefs(context).edit()
            .putString(KEY_ACCESS_TOKEN, token)
            .apply()
    }

    fun getToken(context: Context): String? =
        getPrefs(context).getString(KEY_ACCESS_TOKEN, null)

    fun clearToken(context: Context) {
        getPrefs(context).edit()
            .remove(KEY_ACCESS_TOKEN)
            .apply()
    }
}


================================================================================

FILE 13: app\src\main\java\com\example\tumbuhnyata\data\local\dao\DashboardDao.kt
Lines: 45 | Size: 1693 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local.dao

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import com.example.tumbuhnyata.data.local.entity.CsrReportEntity
import kotlinx.coroutines.flow.Flow

/**
 * Data Access Object (DAO) for CSR Reports (or dashboard KPI source data).
 * Defines methods for interacting with the 'csr_reports' table in the Room database.
 */
@Dao
interface DashboardDao {

    /**
     * Inserts a list of CsrReportEntity into the database.
     * If a report with the same ID already exists, it will be replaced.
     * @param reports The list of CsrReportEntity to insert.
     */
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertOrUpdateReports(reports: List<CsrReportEntity>)

    /**
     * Fetches all CsrReportEntity from the 'csr_reports' table.
     * Returns a Flow, so an observer will be notified of any data changes.
     * @return A Flow emitting a list of all CsrReportEntity.
     */
    @Query("SELECT * FROM csr_reports ORDER BY createdAt DESC") // Urutkan berdasarkan tanggal terbaru
    fun getAllReports(): Flow<List<CsrReportEntity>>

    /**
     * Deletes all reports from the 'csr_reports' table.
     */
    @Query("DELETE FROM csr_reports")
    suspend fun clearAllReports()
    
    // Anda bisa menambahkan query lain sesuai kebutuhan, misalnya:
    // @Query("SELECT * FROM csr_reports WHERE year = :year AND month = :month")
    // fun getReportsByMonth(year: Int, month: Int): Flow<List<CsrReportEntity>>

    // @Query("SELECT * FROM csr_reports WHERE id = :reportId")
    // fun getReportById(reportId: Int): Flow<CsrReportEntity?> 
} 

================================================================================

FILE 14: app\src\main\java\com\example\tumbuhnyata\data\local\entity\CsrReportEntity.kt
Lines: 28 | Size: 933 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local.entity

import androidx.room.Entity
import androidx.room.PrimaryKey

/**
 * Represents a CSR Report item in the local Room database.
 * This entity is used for caching data fetched from the API.
 */
@Entity(tableName = "csr_reports") // Nama tabel bisa disesuaikan jika perlu
data class CsrReportEntity(
    @PrimaryKey
    val id: Int, // id dari API akan menjadi Primary Key di Room

    val companyId: Int,
    val year: Int,
    val month: Int?,
    val carbonValue: Float?,
    val documentType: String,
    val documentName: String?,
    val documentPath: String,
    val analysis: String?,
    val createdAt: String, // Menyimpan timestamp sebagai String (ISO 8601) atau Long jika preferensi

    // Jika Anda akan mengimplementasikan fitur "buat/ubah data offline dan sinkronkan nanti",
    // Anda mungkin perlu menambahkan field seperti ini:
    // val isSynced: Boolean = true
) 

================================================================================

FILE 15: app\src\main\java\com\example\tumbuhnyata\data\mapper\DataMappers.kt
Lines: 265 | Size: 11027 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.mapper

import com.example.tumbuhnyata.R // Pastikan R diimport dengan benar dan ikon tersedia
import com.example.tumbuhnyata.data.local.entity.CsrReportEntity
import com.example.tumbuhnyata.data.model.CsrReportModel // Model dari API
import com.example.tumbuhnyata.data.model.DashboardData // Model baru untuk /dashboard endpoint
import com.example.tumbuhnyata.viewmodel.KPIItemState // UI State Model dari DashboardViewModel
import java.text.DecimalFormat
import java.text.ParseException
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import com.example.tumbuhnyata.data.model.KpiDetailData
import com.example.tumbuhnyata.ui.dashboard.kpi.KpiDetails

// Mapper dari Model API (CsrReportModel) ke Entity Room (CsrReportEntity)
fun CsrReportModel.toEntity(): CsrReportEntity {
    return CsrReportEntity(
        id = this.id,
        companyId = this.companyId,
        year = this.year,
        month = this.month,
        carbonValue = this.carbonValue,
        documentType = this.documentType,
        documentName = this.documentName,
        documentPath = this.documentPath,
        analysis = this.analysis,
        createdAt = this.createdAt
    )
}

fun List<CsrReportModel>.toEntityList(): List<CsrReportEntity> {
    return this.map { it.toEntity() }
}

// Helper function untuk parsing tanggal dengan beberapa format umum
private fun parseDateString(dateString: String?): Date? {
    if (dateString == null) return null
    val formats = listOf(
        SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()),
        SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault()),
        SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.getDefault()),
        SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX", Locale.getDefault()),
        SimpleDateFormat("EEE MMM dd yyyy HH:mm:ss 'GMT'Z (zzzz)", Locale.ENGLISH) // Format dari new Date().toString()
    )
    for (format in formats) {
        try {
            return format.parse(dateString)
        } catch (e: ParseException) {
            // Lanjutkan mencoba format berikutnya
        }
    }
    return null
}

// Mapper dari data /dashboard endpoint (DashboardData) ke List UI State Model (KPIItemState)
fun DashboardData.toKpiItemStateList(): List<KPIItemState> {
    val kpiList = mutableListOf<KPIItemState>()
    val decimalFormat = DecimalFormat("#,###.##")

    // DEBUG: Log data yang diterima dari backend
    println("DataMapper DEBUG - Dashboard data received:")
    println("  summary.currentYearTotal: ${this.summary?.currentYearTotal}")
    println("  analytics.totalStats.totalCarbon: ${this.analytics?.totalStats?.totalCarbon}")
    println("  analytics.year: ${this.analytics?.year}")
    println("  summary.submissionCount: ${this.summary?.submissionCount}")

    // UTAMA: 1 KPI Card untuk Carbon Emission berdasarkan data summary atau analytics
    val carbonValue = this.summary?.currentYearTotal ?: this.analytics?.totalStats?.totalCarbon ?: 0f
    val year = this.analytics?.year ?: java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)
    val submissionCount = this.summary?.submissionCount ?: this.analytics?.totalStats?.totalSubmissions ?: 0
    
    println("DataMapper DEBUG - Calculated values:")
    println("  carbonValue: $carbonValue")
    println("  year: $year")
    println("  submissionCount: $submissionCount")
    
    // Hitung persentase berdasarkan target (misal target tahunan 10,000 kg CO₂e)
    val targetValue = 10000f // Target tahunan dalam kg CO₂e
    val achievementPercentage = if (targetValue > 0f) (carbonValue / targetValue) * 100f else 0f
    val isUp = carbonValue > (targetValue * 0.5f) // Up jika > 50% target
    
    kpiList.add(
        KPIItemState(
            title = "Carbon Emission",
            topIcon = R.drawable.ic_carbonfootprint,
            statusText = "${achievementPercentage.toInt()}% dari target",
            statusPercentageValue = if (achievementPercentage > 0) "${achievementPercentage.toInt()}%" else "",
            isUp = isUp,
            value = decimalFormat.format(carbonValue),
            unit = "kg CO₂e",
            targetValue = "Target: ${decimalFormat.format(targetValue)} kg CO₂e",
            onClickRoute = "kpi_detail/carbon_footprint"
        )
    )

    // Fallback jika tidak ada data
    if (kpiList.isEmpty() || carbonValue == 0f) {
        kpiList.clear()
        kpiList.add(
            KPIItemState(
                title = "Carbon Emission",
                topIcon = R.drawable.ic_carbonfootprint,
                statusText = "Belum ada data",
                statusPercentageValue = "",
                isUp = false,
                value = "0",
                unit = "kg CO₂e",
                targetValue = "Target: ${decimalFormat.format(targetValue)} kg CO₂e",
                onClickRoute = "kpi_detail/carbon_footprint"
            )
        )
    }

    return kpiList
}

// Mapper dari List Entity Room (CsrReportEntity) ke List UI State Model (KPIItemState) untuk OFFLINE
// Ini akan digunakan saat data diambil dari cache Room.
fun List<CsrReportEntity>.toKpiItemStateListForOffline(): List<KPIItemState> {
    if (this.isEmpty()) {
        return emptyList()
    }
    val kpiList = mutableListOf<KPIItemState>()
    val decimalFormat = DecimalFormat("#,###.##")

    // Untuk offline, kita mungkin hanya bisa menampilkan data individual yang tersimpan
    // atau agregasi sederhana jika memungkinkan.
    // Contoh: Menampilkan beberapa entri terbaru sebagai KPI
    this.take(5).forEach { entity -> // Ambil 5 terbaru dari cache
        entity.carbonValue?.let { carbonVal ->
            kpiList.add(
                KPIItemState(
                    title = "Laporan Offline (${entity.year}${if(entity.month != null) "/" + entity.month.toString().padStart(2,'0') else ""})",
                    topIcon = R.drawable.ic_carbonfootprint, // Ganti ikon
                    statusText = "${entity.documentType}",
                    statusPercentageValue = "Cached",
                    isUp = false, // Sulit menentukan tanpa perbandingan/target
                    value = decimalFormat.format(carbonVal),
                    unit = "kg CO₂e",
                    targetValue = "Data Offline",
                    onClickRoute = "kpi_detail/offline_report_${entity.id}"
                )
            )
        }
    }
    
    if (kpiList.isEmpty()) {
         kpiList.add(KPIItemState(
                title = "Tidak Ada Data Offline",
                topIcon = R.drawable.ic_carbonfootprint, 
                statusText = "Hubungkan ke internet",
                statusPercentageValue = "",
                isUp = false, 
                value = "-",
                unit = "",
                targetValue = "",
                onClickRoute = "noop_offline"
            ))
    }

    return kpiList
}

// Mapper tunggal dari Entity ke KPIItemState jika dibutuhkan (mungkin kurang umum untuk dashboard agregat)
fun CsrReportEntity.toKpiItemState(): KPIItemState {
    val currentValue = this.carbonValue ?: 0.0f
    val targetValue = 10000.0f // Contoh target
    val unit = "kg CO₂e"
    val decimalFormat = DecimalFormat("#,###.##")
    val percentageToTarget = if (targetValue > 0f) (currentValue / targetValue) * 100f else 0f

    return KPIItemState(
        title = "Laporan ${this.documentType} (${this.year})",
        topIcon = R.drawable.ic_carbonfootprint, // Pastikan ikon ini ada
        statusText = "${decimalFormat.format(percentageToTarget)}% target",
        statusPercentageValue = "N/A", // Membutuhkan logika perbandingan yang lebih kompleks
        isUp = currentValue > (targetValue * 0.8), // Contoh: up jika > 80% target
        value = decimalFormat.format(currentValue),
        unit = unit,
        targetValue = "${decimalFormat.format(targetValue)} $unit",
        onClickRoute = "kpi_detail/individual_report_${this.id}"
    )
}

// ===== MAPPERS UNTUK KPI DETAIL =====

/**
 * Mapper dari KpiDetailData (API response) ke KpiDetails (UI state)
 */
fun KpiDetailData.toKpiDetails(): KpiDetails {
    val decimalFormat = DecimalFormat("#,###.##")
    
    // DEBUG: Log data yang diterima untuk KPI detail
    println("DataMapper DEBUG - KPI Detail data received:")
    println("  kpiType: ${this.kpiType}")
    println("  title: ${this.title}")
    println("  yearlyData size: ${this.yearlyData?.size}")
    println("  yearlyData content: ${this.yearlyData}")
    println("  multiYearData size: ${this.multiYearData?.size}")
    println("  multiYearData content: ${this.multiYearData}")
    
    // Convert monthly data to list of floats for chart
    val yearlyChartData = this.yearlyData?.mapNotNull { monthData ->
        monthData.value
    } ?: List(12) { 0f } // Default 12 months dengan value 0
    
    // Convert multi-year data to list of floats for chart  
    val fiveYearChartData = this.multiYearData?.mapNotNull { yearData ->
        yearData.totalValue
    } ?: List(5) { 0f } // Default 5 years dengan value 0
    
    println("DataMapper DEBUG - Converted chart data:")
    println("  yearlyChartData: $yearlyChartData")
    println("  fiveYearChartData: $fiveYearChartData")
    
    // Get statistics
    val averageValue = this.statistics?.averageValue?.let { 
        decimalFormat.format(it) 
    } ?: "0"
    
    val minValue = this.statistics?.minValue?.let { 
        decimalFormat.format(it) 
    } ?: "0"
    
    return KpiDetails(
        id = this.kpiType ?: "unknown",
        title = this.title ?: "KPI Detail",
        unit = this.unit ?: "unit",
        yearlyChartData = yearlyChartData,
        fiveYearChartData = fiveYearChartData,
        averageValue = averageValue,
        minValue = minValue,
        analysis = this.analysis ?: "Analisis tidak tersedia."
    )
}

/**
 * Fallback mapper dari dummy data untuk KPI yang belum diintegrasikan
 * Ini akan digunakan jika API belum ready atau sebagai fallback
 */
fun createDummyKpiDetails(kpiId: String): KpiDetails {
    return when (kpiId) {
        "carbon_footprint" -> KpiDetails(
            id = kpiId,
            title = "Carbon Footprint",
            unit = "kg CO₂e",
            yearlyChartData = listOf(65f, 75f, 85f, 72f, 93f, 80f, 100f, 110f, 105f, 115f, 110f, 130f),
            fiveYearChartData = listOf(850f, 920f, 1050f, 980f, 1230f),
            averageValue = "95.8",
            minValue = "65",
            analysis = "Data ini berasal dari template sementara. Jejak karbon menunjukkan tren peningkatan yang perlu dikontrol melalui program CSR yang lebih efektif."
        )
        else -> KpiDetails(
            id = kpiId,
            title = "KPI Detail",
            unit = "unit",
            yearlyChartData = List(12) { 50f + (it * 5f) },
            fiveYearChartData = List(5) { 500f + (it * 100f) },
            averageValue = "100",
            minValue = "50",
            analysis = "Data template untuk KPI yang belum diintegrasikan dengan backend."
        )
    }
} 

================================================================================

FILE 16: app\src\main\java\com\example\tumbuhnyata\data\model\BottomNavItem.kt
Lines: 8 | Size: 178 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

data class BottomNavItem(
    val label: String,
    val route: String,
    val unselectedIconRes: Int,
    val selectedIconRes: Int
)

================================================================================

FILE 17: app\src\main\java\com\example\tumbuhnyata\data\model\CsrCategory.kt
Lines: 9 | Size: 179 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

import androidx.compose.ui.graphics.Color

data class CsrCategory(
    val name: String,
    val amount: Float,
    val color: Color
)


================================================================================

FILE 18: app\src\main\java\com\example\tumbuhnyata\data\model\CsrReportModel.kt
Lines: 75 | Size: 2116 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

import com.google.gson.annotations.SerializedName

/**
 * Represents the overall API response when fetching CSR reports.
 * Assumes the API returns a list of reports战争pped in a common response structure.
 */
data class CsrReportApiResponse(
    @SerializedName("data") // Adjust if your API uses a different key for the list of reports
    val data: List<CsrReportModel>?,

    @SerializedName("message")
    val message: String?,

    @SerializedName("status_code") // Or "status", "success", etc., depending on your API
    val statusCode: Int? // Or String, Boolean, etc.
)

/**
 * Represents a single CSR Report item, mirroring the database schema provided.
 * This class is used for parsing the JSON response from the API.
 */
data class CsrReportModel(
    @SerializedName("id")
    val id: Int,

    @SerializedName("company_id")
    val companyId: Int,

    @SerializedName("year")
    val year: Int,

    @SerializedName("month")
    val month: Int?, // Allowed to be NULL in DB

    @SerializedName("carbon_value")
    val carbonValue: Float?, // Allowed to be NULL in DB

    @SerializedName("document_type")
    val documentType: String, // ENUM from DB, represented as String

    @SerializedName("document_name")
    val documentName: String?, // Allowed to be NULL in DB

    @SerializedName("document_path")
    val documentPath: String,

    @SerializedName("analysis")
    val analysis: String?, // Allowed to be NULL in DB

    @SerializedName("created_at")
    val createdAt: String // TIMESTAMP from DB, typically represented as ISO 8601 String
)

/**
 * Response wrapper for CSR submissions endpoint with pagination
 * Matches the actual backend response format:
 * {"success": true, "data": [...], "pagination": {...}}
 */
data class CsrSubmissionsResponse(
    val success: Boolean,
    val data: List<CsrReportModel>,
    val pagination: PaginationInfo
)

/**
 * Pagination information from submissions endpoint
 */
data class PaginationInfo(
    val currentPage: Int,
    val totalPages: Int,
    val totalItems: Int,
    val itemsPerPage: Int
) 

================================================================================

FILE 19: app\src\main\java\com\example\tumbuhnyata\data\model\CsrStatus.kt
Lines: 122 | Size: 3812 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

data class CsrItem(
    val title: String,
    val organization: String,
    val status: String,
    val subStatus: SubStatus,
    val category: String,
    val location: String,
    val period: String
)

fun getSubStatusEmoji(status: SubStatus): String {
    return when (status) {
        SubStatus.PROSES_REVIEW -> "🔍"
        SubStatus.MENUNGGU_PEMBAYARAN -> "💳"
        SubStatus.MEMERLUKAN_REVISI -> "📝"
        SubStatus.MENDATANG -> "📅"
        SubStatus.PROGRESS -> "⏳"
        SubStatus.SELESAI -> "✅"
    }
}

enum class SubStatus(val displayText: String, val colorHex: String) {
    PROSES_REVIEW("Proses Review", "#1E1E1E"),
    MENUNGGU_PEMBAYARAN("Menunggu Pembayaran", "#86FF8E"),
    MEMERLUKAN_REVISI("Memerlukan Revisi", "#FF7B7B"),
    MENDATANG("Akan Datang", "#9CDEFF"),
    PROGRESS("Sedang Berlangsung", "#FFD95D"),
    SELESAI("Selesai", "#989898")
}

val dummyCsrList = listOf(
    CsrItem(
        title = "Penanaman 1000 Pohon",
        organization = "Komunitas Jaya Hijau",
        status = "Proses Review",
        subStatus = SubStatus.PROSES_REVIEW,
        category = "Lingkungan",
        location = "Jakarta Timur",
        period = "12 Apr - 20 Jun 24"
    ),
    CsrItem(
        title = "Pembangunan Panti Sukamaju",
        organization = "Yayasan Asih Jaya",
        status = "Menunggu Pembayaran",
        subStatus = SubStatus.MENUNGGU_PEMBAYARAN,
        category = "Sosial",
        location = "Jakarta Raya",
        period = "1 Apr - 20 Jun 24"
    ),
    CsrItem(
        title = "Penghijauan Suaka Jateng",
        organization = "CV. Budi Raya",
        status = "Memerlukan Revisi",
        subStatus = SubStatus.MEMERLUKAN_REVISI,
        category = "Lingkungan",
        location = "Semarang, Jawa Tengah",
        period = "12 Mar - 20 Jun 24"
    ),
    CsrItem(
        title = "Penghijauan Hutan Kaltim",
        organization = "PT Hijau Sejati",
        status = "Mendatang",
        subStatus = SubStatus.MENDATANG,
        category = "Lingkungan",
        location = "Kalimantan",
        period = "12 Mei - 20 Mei 25"
    ),
    CsrItem(
        title = "Beasiswa Yatim Jabar",
        organization = "Pemerintah Prov. Jabar",
        status = "Progress",
        subStatus = SubStatus.PROGRESS,
        category = "Sosial",
        location = "Jawa Barat",
        period = "8 Mar - 10 Jun 25"
    ),
    CsrItem(
        title = "Donor Darah Paragon 2025",
        organization = "RS Bunda Mulia",
        status = "Progress",
        subStatus = SubStatus.PROGRESS,
        category = "Sosial",
        location = "Jakarta Raya",
        period = "12 Jan - 2 Apr 25"
    ),
    CsrItem(
        title = "Penanaman Mangrove",
        organization = "Pemkot Kota Lombok",
        status = "Program Selesai",
        subStatus = SubStatus.SELESAI,
        category = "Lingkungan",
        location = "Lombok Barat, Lombok",
        period = "12 Mar - 20 Jun 24"
    ),
)

fun getDummyTimelineData(status: String): List<TimelineItem> {
    return listOf(
        TimelineItem(
            title = "Pengajuan Dikirim",
            timestamp = "10/05/2024 - 09:41 WIB",
            isCompleted = true
        ),
        TimelineItem(
            title = "Review & Evaluasi",
            timestamp = "10/05/2024 - 09:50 WIB",
            isCompleted = status.lowercase() == "progress" || status.lowercase() == "diterima",
            isInProgress = status.lowercase() == "progress"
        ),
        TimelineItem(
            title = "Pembayaran",
            timestamp = "10/05/2024 - 10:00 WIB",
            isCompleted = status.lowercase() == "diterima"
        ),
        TimelineItem(
            title = "Implementasi Program",
            isCompleted = status.lowercase() == "diterima"
        )
    )
}

================================================================================

FILE 20: app\src\main\java\com\example\tumbuhnyata\data\model\DashboardDataResponse.kt
Lines: 187 | Size: 4448 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

import com.google.gson.annotations.SerializedName

/**
 * Represents the overall API response from the /dashboard endpoint.
 */
data class DashboardDataResponse(
    @SerializedName("success")
    val success: Boolean?,

    @SerializedName("data")
    val data: DashboardData?,

    @SerializedName("message")
    val message: String?,

    @SerializedName("error")
    val error: String?
)

/**
 * Contains the main data structure for the dashboard.
 */
data class DashboardData(
    @SerializedName("analytics")
    val analytics: AnalyticsData?,

    @SerializedName("recentSubmissions")
    val recentSubmissions: List<CsrReportModel>?, // Menggunakan CsrReportModel yang sudah ada

    @SerializedName("summary")
    val summary: SummaryData?
)

/**
 * Represents analytics data, including monthly carbon data and total stats.
 */
data class AnalyticsData(
    @SerializedName("year")
    val year: Int?,

    @SerializedName("monthlyData")
    val monthlyData: List<MonthlyCarbonData>?,

    @SerializedName("totalStats")
    val totalStats: TotalStats?
)

/**
 * Represents carbon data for a specific month.
 */
data class MonthlyCarbonData(
    @SerializedName("month")
    val month: Int?,

    @SerializedName("carbon_value") // Sesuai output backend: "carbon_value"
    val carbonValue: Float?
)

/**
 * Represents total statistics for carbon submissions.
 */
data class TotalStats(
    @SerializedName("totalCarbon")
    val totalCarbon: Float?,

    @SerializedName("totalSubmissions")
    val totalSubmissions: Int?
)

/**
 * Represents summary data for the dashboard.
 */
data class SummaryData(
    @SerializedName("currentYearTotal")
    val currentYearTotal: Float?,

    @SerializedName("submissionCount")
    val submissionCount: Int?,

    @SerializedName("lastUpdated")
    val lastUpdated: String? // String representation of a Date
)

// CsrReportModel.kt (yang sudah ada) akan digunakan untuk recentSubmissions
// Jika CsrReportModel belum ada atau berbeda, definisikan di sini atau di file terpisah:
// data class CsrReportModel(
//    @SerializedName("id") val id: Int?,
//    @SerializedName("company_id") val companyId: Int?,
//    @SerializedName("year") val year: Int?,
//    @SerializedName("month") val month: Int?,
//    @SerializedName("carbon_value") val carbonValue: Float?,
//    @SerializedName("document_type") val documentType: String?,
//    @SerializedName("document_name") val documentName: String?,
//    @SerializedName("document_path") val documentPath: String?,
//    @SerializedName("analysis") val analysis: String?,
//    @SerializedName("created_at") val createdAt: String?
// ) 

/**
 * Model untuk response KPI Detail dari backend
 */
data class KpiDetailResponse(
    @SerializedName("success")
    val success: Boolean?,

    @SerializedName("data")
    val data: KpiDetailData?,

    @SerializedName("message")
    val message: String?,

    @SerializedName("error")
    val error: String?
)

/**
 * Data untuk detail KPI tertentu
 */
data class KpiDetailData(
    @SerializedName("kpi_type")
    val kpiType: String?, // carbon_footprint, energy_usage, etc.

    @SerializedName("title")
    val title: String?,

    @SerializedName("unit")
    val unit: String?,

    @SerializedName("yearly_data")
    val yearlyData: List<MonthlyKpiData>?, // Data per bulan dalam tahun

    @SerializedName("multi_year_data")
    val multiYearData: List<YearlyKpiData>?, // Data per tahun untuk 5 tahun

    @SerializedName("statistics")
    val statistics: KpiStatistics?,

    @SerializedName("analysis")
    val analysis: String?
)

/**
 * Data KPI per bulan
 */
data class MonthlyKpiData(
    @SerializedName("month")
    val month: Int?,

    @SerializedName("value")
    val value: Float?,

    @SerializedName("submission_count")
    val submissionCount: Int? // Jumlah submission dalam bulan ini
)

/**
 * Data KPI per tahun
 */
data class YearlyKpiData(
    @SerializedName("year")
    val year: Int?,

    @SerializedName("total_value")
    val totalValue: Float?,

    @SerializedName("submission_count")
    val submissionCount: Int?
)

/**
 * Statistik untuk KPI
 */
data class KpiStatistics(
    @SerializedName("average_value")
    val averageValue: Float?,

    @SerializedName("min_value")
    val minValue: Float?,

    @SerializedName("max_value")
    val maxValue: Float?,

    @SerializedName("total_value")
    val totalValue: Float?
) 

================================================================================

FILE 21: app\src\main\java\com\example\tumbuhnyata\data\model\LoginRequest.kt
Lines: 6 | Size: 117 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

data class LoginRequest(
    val NIB: String,
    val password: String
)


================================================================================

FILE 22: app\src\main\java\com\example\tumbuhnyata\data\model\LoginResponse.kt
Lines: 5 | Size: 95 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

data class LoginResponse(
    val token: String,
)


================================================================================

FILE 23: app\src\main\java\com\example\tumbuhnyata\data\model\Notification.kt
Lines: 25 | Size: 512 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

import com.google.gson.annotations.SerializedName

data class Notification(
    @SerializedName("id")
    val id: Int,
    
    @SerializedName("user_id")
    val userId: String,
    
    @SerializedName("title")
    val title: String,
    
    @SerializedName("message")
    val message: String,
    
    @SerializedName("is_read")
    val isRead: Int,
    
    @SerializedName("created_at")
    val createdAt: String
) {
    fun isReadBool(): Boolean = isRead > 0
} 

================================================================================

FILE 24: app\src\main\java\com\example\tumbuhnyata\data\model\Profile.kt
Lines: 28 | Size: 558 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

import com.google.gson.annotations.SerializedName

data class Profile(
    @SerializedName("id_perusahaan")
    val id: Int,
    
    @SerializedName("nama_perusahaan")
    val companyName: String,
    
    @SerializedName("email")
    val email: String,
    
    @SerializedName("no_telp")
    val phoneNumber: String,
    
    @SerializedName("NIB")
    val nib: String,
    
    @SerializedName("alamat")
    val address: String
)

data class ProfileResponse(
    @SerializedName("data")
    val data: Profile
)

================================================================================

FILE 25: app\src\main\java\com\example\tumbuhnyata\data\model\RegisterRequest.kt
Lines: 10 | Size: 226 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

data class RegisterRequest(
    val companyName: String,
    val email: String,
    val password: String,
    val phoneNumber: String,
    val NIB: String,
    val address: String
) 

================================================================================

FILE 26: app\src\main\java\com\example\tumbuhnyata\data\model\RegisterResponse.kt
Lines: 5 | Size: 99 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

data class RegisterResponse(
    val message: String
) 

================================================================================

FILE 27: app\src\main\java\com\example\tumbuhnyata\data\model\TimelineItem.kt
Lines: 8 | Size: 201 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

data class TimelineItem(
    val title: String,
    val timestamp: String = "",
    val isCompleted: Boolean = false,
    val isInProgress: Boolean = false
)

================================================================================

FILE 28: app\src\main\java\com\example\tumbuhnyata\data\model\UploadResponse.kt
Lines: 13 | Size: 516 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

/**
 * Response model for file upload API.
 * Represents the response from the /carbon-submissions/upload-csv endpoint.
 */
data class UploadResponse(
    val success: Boolean,
    val message: String,
    val submissionId: String? = null, // Optional submission ID if upload creates a new submission
    val processedRecords: Int? = null, // Number of records processed from the CSV
    val errors: List<String>? = null // Any validation errors from the CSV processing
) 

================================================================================

FILE 29: app\src\main\java\com\example\tumbuhnyata\data\model\Workshop.kt
Lines: 162 | Size: 5573 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

import com.example.tumbuhnyata.R

data class Workshop(
    val id: String,
    val title: String,
    val speaker: String,
    val date: String,
    val imageRes: Int,
    val isOnline: Boolean,
    val tanggal: String,
    val materi: List<String>,
    val biaya: Int,
    val deskripsi: String
)

val recommendedWorkshops = listOf(
    Workshop(
        id = "1",
        title = "Sustainability Reporting 101",
        speaker = "Dr. Andi Wijaya",
        date = "10 April 2025",
        imageRes = R.drawable.work1,
        isOnline = false,
        tanggal = "10 – 11 April 2025",
        materi = listOf(
            "Prinsip dasar sustainability reporting",
            "Implementasi GRI Standards",
            "Teknik pengukuran dampak sosial dan lingkungan",
            "Studi kasus perusahaan terkemuka"
        ),
        biaya = 1500000,
        deskripsi = "Pelajari cara menyusun laporan keberlanjutan sesuai standar GRI, ISO 26000, dan SDG Reporting..."
    ),
    Workshop(
        id = "2",
        title = "Green Supply Chain Management",
        speaker = "Ir. Rina Putri, M.Sc",
        date = "15 Mei 2025",
        imageRes = R.drawable.work2,
        isOnline = true,
        tanggal = "15 – 16 Mei 2025",
        materi = listOf(
            "Konsep dasar dan evolusi CSR",
            "Peran CSR dalam pembangunan berkelanjutan",
            "Strategi pelibatan pemangku kepentingan",
            "Evaluasi dan pelaporan dampak CSR"
        ),
        biaya = 1200000,
        deskripsi = "Pelatihan mendalam untuk menyusun strategi Corporate Social Responsibility (CSR) yang berdampak jangka panjang."
    ),
    Workshop(
        id = "3",
        title = "Implementasi ISO 26000 dalam CSR",
        speaker = "Dwi Kurniawati, S.E., M.BA",
        date = "5 Juni 2025",
        imageRes = R.drawable.work3,
        isOnline = false,
        tanggal = "5 – 6 Juni 2025",
        materi = listOf(
            "Fundamental digital marketing",
            "Social media campaign & analytics",
            "Content creation dengan tujuan sosial",
            "Studi kasus brand berdampak"
        ),
        biaya = 1000000,
        deskripsi = "Belajar strategi pemasaran digital untuk memperluas jangkauan dampak sosial organisasi dan startup."
    ),
    Workshop(
        id = "4",
        title = "Strategi CSR untuk Industri Manufaktur",
        speaker = "Budi Setiawan, Ph.D",
        date = "25 Mei 2025",
        imageRes = R.drawable.work4,
        isOnline = false,
        tanggal = "25 – 26 Mei 2025",
        materi = listOf(
            "Tahapan Design Thinking",
            "Empati terhadap pengguna",
            "Ideation dan prototyping",
            "Menguji dan memvalidasi solusi"
        ),
        biaya = 1300000,
        deskripsi = "Pelajari proses Design Thinking untuk menciptakan solusi inovatif terhadap masalah sosial."
    ),
    Workshop(
        id = "5",
        title = "Mengukur Dampak CSR dengan SROI",
        speaker = "Ratna Dewi, S.Stat",
        date = "18 Juni 2025",
        imageRes = R.drawable.work5,
        isOnline = true,
        tanggal = "18 – 19 Juni 2025",
        materi = listOf(
            "Siklus proyek sosial",
            "Perencanaan dan anggaran",
            "Manajemen risiko",
            "Monitoring dan evaluasi"
        ),
        biaya = 1400000,
        deskripsi = "Workshop ini membantu peserta dalam merancang, mengelola, dan mengevaluasi proyek sosial yang berkelanjutan."
    ),
    Workshop(
        id = "6",
        title = "Penyusunan Program CSR Berkelanjutan",
        speaker = "Hendra Wijaya, M.Soc.Sc",
        date = "12 Sep 2025",
        imageRes = R.drawable.work6,
        isOnline = false,
        tanggal = "12 – 13 September 2025",
        materi = listOf(
            "Teori Perubahan (Theory of Change)",
            "KPI dan indikator dampak",
            "SROI dan metode pengukuran lainnya",
            "Pelaporan berbasis hasil"
        ),
        biaya = 1600000,
        deskripsi = "Kuasai alat dan pendekatan untuk mengukur hasil dan dampak program sosial dan keberlanjutan."
    )
)

val recentWorkshops = listOf(
    recommendedWorkshops[4],
    recommendedWorkshops[5],
    Workshop(
        id = "7",
        title = "Net Zero & Carbon Offset dalam CSR",
        speaker = "Rizky Alamsyah, M.Env",
        date = "2 Agu 2025",
        imageRes = R.drawable.work7,
        isOnline = true,
        tanggal = "2 – 4 Agustus 2025",
        materi = listOf(
            "Dasar-dasar public speaking",
            "Storytelling untuk advokasi",
            "Menghadapi audiens beragam",
            "Praktik presentasi berdampak"
        ),
        biaya = 900000,
        deskripsi = "Kembangkan kemampuan komunikasi publik untuk menyampaikan pesan perubahan sosial secara persuasif."
    ),
    Workshop(
        id = "8",
        title = "Komunikasi Publik untuk CSR Branding",
        speaker = "Siti Amalia, S.I.Kom",
        date = "12 Sep 2025",
        imageRes = R.drawable.work8,
        isOnline = false,
        tanggal = "12 – 13 September 2025",
        materi = listOf(
            "Jenis-jenis pendanaan sosial",
            "Cara membuat proposal proyek",
            "Teknik pitching yang meyakinkan",
            "Simulasi presentasi ke investor"
        ),
        biaya = 1100000,
        deskripsi = "Pelajari strategi mendapatkan pendanaan untuk inisiatif sosial, termasuk pembuatan proposal dan pitching."
    ),
    recommendedWorkshops[0],
    recommendedWorkshops[1]
)


================================================================================

FILE 30: app\src\main\java\com\example\tumbuhnyata\data\network\AuthInterceptor.kt
Lines: 19 | Size: 598 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.network

import android.content.Context
import com.example.tumbuhnyata.util.TokenManager
import okhttp3.Interceptor
import okhttp3.Response

class AuthInterceptor(private val context: Context) : Interceptor {
    override fun intercept(chain: Interceptor.Chain): Response {
        val requestBuilder = chain.request().newBuilder()
        val token = TokenManager.getToken(context)
        
        token?.let {
            requestBuilder.addHeader("Authorization", "Bearer $it")
        }
        
        return chain.proceed(requestBuilder.build())
    }
} 

================================================================================

FILE 31: app\src\main\java\com\example\tumbuhnyata\data\network\RetrofitInstance.kt
Lines: 40 | Size: 1303 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.network

import com.example.tumbuhnyata.data.api.AuthApi
import com.example.tumbuhnyata.data.api.DashboardApiService
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.util.concurrent.TimeUnit

object RetrofitInstance {
    private val loggingInterceptor = HttpLoggingInterceptor().apply {
        level = HttpLoggingInterceptor.Level.BODY
    }

    private val client = OkHttpClient.Builder()
        .addInterceptor(loggingInterceptor)
        .connectTimeout(60, TimeUnit.SECONDS)
        .readTimeout(60, TimeUnit.SECONDS)
        .writeTimeout(60, TimeUnit.SECONDS)
        .build()

    val api: AuthApi by lazy {
        Retrofit.Builder()
            .baseUrl("http://10.0.2.2:5000")
            .client(client)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(AuthApi::class.java)
    }

    val dashboardApi: DashboardApiService by lazy {
        Retrofit.Builder()
            .baseUrl("http://10.0.2.2:5000")
            .client(client)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(DashboardApiService::class.java)
    }
}


================================================================================

FILE 32: app\src\main\java\com\example\tumbuhnyata\data\repository\DashboardRepository.kt
Lines: 207 | Size: 11514 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.repository

import android.content.Context // Diperlukan untuk cek koneksi internet (jika dilakukan di sini)
import com.example.tumbuhnyata.data.api.DashboardApiService
import com.example.tumbuhnyata.data.local.dao.DashboardDao
import com.example.tumbuhnyata.data.mapper.toEntityList
import com.example.tumbuhnyata.data.mapper.toKpiItemStateList // Mapper untuk DashboardData -> List<KPIItemState>
import com.example.tumbuhnyata.data.mapper.toKpiItemStateListForOffline // Mapper untuk List<CsrReportEntity> -> List<KPIItemState>
import com.example.tumbuhnyata.data.mapper.toKpiDetails // Mapper untuk KpiDetailData -> KpiDetails
import com.example.tumbuhnyata.data.mapper.createDummyKpiDetails // Fallback mapper
import com.example.tumbuhnyata.util.NetworkConnectivityUtil // Anda perlu membuat utilitas ini
import com.example.tumbuhnyata.viewmodel.KPIItemState
import com.example.tumbuhnyata.ui.dashboard.kpi.KpiDetails // Import KpiDetails
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.firstOrNull
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.flow.map
import java.io.IOException

// Definisikan Resource wrapper jika belum ada di util
sealed class Resource<T>(val data: T? = null, val message: String? = null) {
    class Success<T>(data: T) : Resource<T>(data)
    class Error<T>(message: String, data: T? = null) : Resource<T>(data, message)
    class Loading<T>(data: T? = null) : Resource<T>(data) // Opsional: bisa juga tanpa data saat loading
}

class DashboardRepository(
    private val dashboardApiService: DashboardApiService,
    private val dashboardDao: DashboardDao,
    private val context: Context // Untuk NetworkConnectivityUtil
) {

    /**
     * Fetches dashboard KPI items.
     * Tries to fetch from API first. If online and successful, it also attempts to refresh
     * the local cache of all submissions.
     * If API fails or offline, it attempts to load from the local cache.
     */
    fun getDashboardKpiItems(companyId: Int?, year: Int?): Flow<Resource<List<KPIItemState>>> = flow {
        emit(Resource.Loading()) // Emit loading state

        val localDataFlow = dashboardDao.getAllReports().map { it.toKpiItemStateListForOffline() }
        val currentLocalKpis = localDataFlow.firstOrNull() // Ambil data lokal saat ini untuk fallback cepat

        if (NetworkConnectivityUtil.isOnline(context)) {
            try {
                // 1. Ambil data dashboard utama menggunakan endpoint yang benar
                val response = dashboardApiService.getDashboardData(companyId = companyId, year = year)
                println("DashboardRepository: Calling endpoint: carbon-submissions/dashboard")
                println("DashboardRepository: Response code: ${response.code()}")
                
                if (response.isSuccessful && response.body()?.success == true) {
                    val dashboardData = response.body()?.data
                    if (dashboardData != null) {
                        println("DashboardRepository: Success! Data received from carbon-submissions/dashboard")
                        val kpiItems = dashboardData.toKpiItemStateList()
                        emit(Resource.Success(kpiItems)) // Emit data sukses dari API

                        // 2. (Opsional tapi direkomendasikan) Refresh cache submissions mentah di background
                        try {
                            val companyIdString = companyId?.toString()
                            val submissionsResponse = dashboardApiService.getAllSubmissions(companyId = companyIdString, year = year)
                            if (submissionsResponse.isSuccessful) {
                                submissionsResponse.body()?.let { response ->
                                    println("DashboardRepository: Cache refreshed with ${response.data.size} submissions")
                                    dashboardDao.clearAllReports() 
                                    dashboardDao.insertOrUpdateReports(response.data.toEntityList())
                                }
                            }
                        } catch (e: Exception) {
                            println("DashboardRepository: Failed to refresh submissions cache: ${e.message}")
                        }
                        return@flow // Selesai jika API dashboard sukses
                    } else {
                        emit(Resource.Error("Data dashboard dari API kosong.", currentLocalKpis))
                    }
                } else {
                    val errorBody = response.errorBody()?.string()
                    val errorMsg = "Gagal mengambil data dashboard. " +
                            "Code: ${response.code()}, Message: ${response.message()}" +
                            if (errorBody != null) ", Error: $errorBody" else ""
                    println("DashboardRepository: $errorMsg")
                    emit(Resource.Error(errorMsg, currentLocalKpis))
                }
            } catch (e: IOException) { // Network error
                val errorMsg = "Kesalahan jaringan: ${e.message}. Menampilkan data offline."
                println("DashboardRepository: $errorMsg")
                emit(Resource.Error(errorMsg, currentLocalKpis))
            } catch (e: Exception) { // Other errors (e.g., JSON parsing)
                val errorMsg = "Terjadi kesalahan: ${e.message}"
                println("DashboardRepository: $errorMsg")
                emit(Resource.Error(errorMsg, currentLocalKpis))
            }
        } else { // Offline
            if (!currentLocalKpis.isNullOrEmpty()) {
                emit(Resource.Success(currentLocalKpis))
            } else {
                emit(Resource.Error("Anda offline dan tidak ada data tersimpan."))
            }
        }
    }

    /**
     * Fetches detailed KPI data for a specific KPI type.
     * Tries API first, falls back to dummy data if API fails.
     */
    fun getKpiDetail(kpiType: String, companyId: Int?, year: Int?): Flow<Resource<KpiDetails>> = flow {
        emit(Resource.Loading()) // Emit loading state

        if (NetworkConnectivityUtil.isOnline(context)) {
            try {
                // Ensure year is set (default to current year)
                val actualYear = year ?: java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)
                
                // Convert companyId to String if not null, otherwise don't send the parameter
                val companyIdString = companyId?.toString()
                
                println("DashboardRepository: Calling KPI detail endpoint: carbon-submissions/kpi/$kpiType")
                println("DashboardRepository: Parameters - companyId: $companyIdString, year: $actualYear")
                
                val response = dashboardApiService.getKpiDetail(kpiType, companyIdString, actualYear)
                println("DashboardRepository: KPI Detail Response code: ${response.code()}")
                
                if (response.isSuccessful && response.body()?.success == true) {
                    val kpiDetailData = response.body()?.data
                    if (kpiDetailData != null) {
                        println("DashboardRepository: Success! KPI detail data received for $kpiType")
                        val kpiDetails = kpiDetailData.toKpiDetails()
                        emit(Resource.Success(kpiDetails))
                        return@flow
                    } else {
                        println("DashboardRepository: KPI detail data is null, using dummy data")
                        emit(Resource.Success(createDummyKpiDetails(kpiType)))
                    }
                } else {
                    val errorBody = response.errorBody()?.string()
                    val errorMsg = "API KPI detail gagal. Code: ${response.code()}, Message: ${response.message()}" +
                            if (errorBody != null) ", Error: $errorBody" else ""
                    println("DashboardRepository: $errorMsg")
                    println("DashboardRepository: Using dummy data for KPI: $kpiType")
                    emit(Resource.Success(createDummyKpiDetails(kpiType)))
                }
            } catch (e: IOException) {
                val errorMsg = "Kesalahan jaringan untuk KPI detail: ${e.message}. Menggunakan data template."
                println("DashboardRepository: $errorMsg")
                emit(Resource.Success(createDummyKpiDetails(kpiType)))
            } catch (e: Exception) {
                val errorMsg = "Kesalahan KPI detail: ${e.message}. Menggunakan data template."
                println("DashboardRepository: $errorMsg")
                emit(Resource.Success(createDummyKpiDetails(kpiType)))
            }
        } else { // Offline - use dummy data
            println("DashboardRepository: Offline, using dummy data for KPI: $kpiType")
            emit(Resource.Success(createDummyKpiDetails(kpiType)))
        }
    }

    // Fungsi terpisah untuk menyegarkan cache jika diperlukan dari tempat lain
    suspend fun refreshSubmissionsCache(companyId: Int?, year: Int?) {
        if (NetworkConnectivityUtil.isOnline(context)) {
            try {
                val companyIdString = companyId?.toString()
                val submissionsResponse = dashboardApiService.getAllSubmissions(companyId = companyIdString, year = year)
                if (submissionsResponse.isSuccessful) {
                    submissionsResponse.body()?.let { response ->
                        dashboardDao.clearAllReports()
                        dashboardDao.insertOrUpdateReports(response.data.toEntityList())
                    }
                }
            } catch (e: Exception) {
                println("DashboardRepository: Failed to refresh submissions cache: ${e.message}")
            }
        }
    }

    /**
     * Refreshes the submissions cache by fetching from API and storing in Room.
     * Called periodically or on user action.
     */
    private suspend fun refreshSubmissionsCache() {
        try {
            println("DashboardRepository: Attempting to refresh submissions cache...")
            val response = dashboardApiService.getAllSubmissions()
            println("DashboardRepository: Submissions API call completed with code: ${response.code()}")
            
            if (response.isSuccessful) {
                response.body()?.let { submissionsResponse ->
                    // Extract the actual data array from the wrapper response
                    val submissions = submissionsResponse.data
                    println("DashboardRepository: Success! Got ${submissions.size} submissions from API")
                    
                    // Convert and save to local database
                    val entities = submissions.toEntityList()
                    dashboardDao.insertOrUpdateReports(entities)
                    println("DashboardRepository: Successfully cached ${entities.size} submissions to Room")
                } ?: run {
                    println("DashboardRepository: Response body was null for submissions")
                }
            } else {
                println("DashboardRepository: Failed to fetch submissions. Code: ${response.code()}, Message: ${response.message()}")
            }
        } catch (e: Exception) {
            println("DashboardRepository: Failed to refresh submissions cache: ${e.message}")
            e.printStackTrace()
        }
    }
} 

================================================================================

FILE 33: app\src\main\java\com\example\tumbuhnyata\data\repository\NotificationRepository.kt
Lines: 24 | Size: 741 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.repository

import com.example.tumbuhnyata.data.api.NotificationApi
import com.example.tumbuhnyata.data.model.Notification

class NotificationRepository(
    private val api: NotificationApi
) {
    suspend fun getNotifications(userId: String): List<Notification> {
        return api.getNotifications(userId).body() ?: emptyList()
    }

    suspend fun createNotification(notification: Notification): Notification? {
        return api.createNotification(notification).body()
    }

    suspend fun markAsRead(id: Int): Boolean {
        return api.markAsRead(id).isSuccessful
    }

    suspend fun deleteNotification(id: Int): Boolean {
        return api.deleteNotification(id).isSuccessful
    }
} 

================================================================================

FILE 34: app\src\main\java\com\example\tumbuhnyata\data\repository\ProfileRepository.kt
Lines: 46 | Size: 1239 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.repository

import com.example.tumbuhnyata.data.api.ProfileApi
import com.example.tumbuhnyata.data.model.Profile

class ProfileRepository(private val api: ProfileApi) {
    
    suspend fun getUserProfile(): Profile? {
        val response = api.getUserProfile()
        return if (response.isSuccessful) {
            response.body()?.data
        } else {
            null
        }
    }
    
    suspend fun updateProfile(
        companyName: String,
        email: String,
        phoneNumber: String,
        address: String
    ): Boolean {
        val updateData = mapOf(
            "companyName" to companyName,
            "email" to email,
            "phoneNumber" to phoneNumber,
            "address" to address
        )
        
        val response = api.updateProfile(updateData)
        return response.isSuccessful
    }
    
    suspend fun changePassword(
        currentPassword: String,
        newPassword: String
    ): Boolean {
        val passwordData = mapOf(
            "currentPassword" to currentPassword,
            "newPassword" to newPassword
        )
        
        val response = api.changePassword(passwordData)
        return response.isSuccessful
    }
}

================================================================================

FILE 35: app\src\main\java\com\example\tumbuhnyata\data\repository\UploadRepository.kt
Lines: 95 | Size: 3478 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.repository

import android.content.Context
import android.net.Uri
import com.example.tumbuhnyata.data.api.DashboardApiService
import com.example.tumbuhnyata.data.model.UploadResponse
import com.example.tumbuhnyata.data.util.Resource
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.RequestBody.Companion.asRequestBody
import java.io.File
import java.io.FileOutputStream
import java.io.InputStream

class UploadRepository(
    private val dashboardApiService: DashboardApiService,
    private val context: Context
) {

    /**
     * Uploads a CSV file to the backend
     * @param fileUri The URI of the selected file
     * @return Resource wrapper containing upload result
     */
    suspend fun uploadCsvFile(fileUri: Uri): Resource<UploadResponse> {
        return withContext(Dispatchers.IO) {
            try {
                // Convert URI to File
                val file = createFileFromUri(fileUri)
                if (file == null) {
                    return@withContext Resource.Error("Failed to process selected file")
                }

                // Validate file extension
                if (!file.name.endsWith(".csv", ignoreCase = true)) {
                    file.delete() // Clean up
                    return@withContext Resource.Error("Please select a CSV file")
                }

                // Create multipart body
                val requestFile = file.asRequestBody("text/csv".toMediaTypeOrNull())
                val multipartBody = MultipartBody.Part.createFormData("csvFile", file.name, requestFile)

                // Make API call
                val response = dashboardApiService.uploadCsvFile(multipartBody)

                // Clean up temporary file
                file.delete()

                if (response.isSuccessful) {
                    val uploadResponse = response.body()
                    if (uploadResponse != null) {
                        if (uploadResponse.success) {
                            Resource.Success(uploadResponse)
                        } else {
                            Resource.Error(uploadResponse.message)
                        }
                    } else {
                        Resource.Error("No response from server")
                    }
                } else {
                    Resource.Error("Upload failed: ${response.message()}")
                }
            } catch (e: Exception) {
                Resource.Error("Upload failed: ${e.message}")
            }
        }
    }

    /**
     * Converts URI to File for upload
     */
    private suspend fun createFileFromUri(uri: Uri): File? {
        return withContext(Dispatchers.IO) {
            try {
                val inputStream: InputStream? = context.contentResolver.openInputStream(uri)
                inputStream?.let { stream ->
                    val tempFile = File(context.cacheDir, "upload_${System.currentTimeMillis()}.csv")
                    val outputStream = FileOutputStream(tempFile)
                    
                    stream.copyTo(outputStream)
                    stream.close()
                    outputStream.close()
                    
                    tempFile
                }
            } catch (e: Exception) {
                e.printStackTrace()
                null
            }
        }
    }
} 

================================================================================

FILE 36: app\src\main\java\com\example\tumbuhnyata\data\repository\WorkshopRepository.kt
Lines: 18 | Size: 515 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.repository

import com.example.tumbuhnyata.data.api.WorkshopApiService

class WorkshopRepository(private val api: WorkshopApiService) {
    suspend fun registerWorkshop(
        workshopId: String,
        companyName: String,
        email: String
    ): Boolean {
        val body = mapOf(
            "workshop_id" to workshopId,
            "company_name" to companyName,
            "email" to email
        )
        return api.registerWorkshop(body).isSuccessful
    }
} 

================================================================================

FILE 37: app\src\main\java\com\example\tumbuhnyata\data\util\Resource.kt
Lines: 14 | Size: 463 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.util

/**
 * A generic class that holds a value with its loading status.
 * Used to wrap network responses and provide unified error handling.
 */
sealed class Resource<T>(
    val data: T? = null,
    val message: String? = null
) {
    class Success<T>(data: T) : Resource<T>(data)
    class Error<T>(message: String, data: T? = null) : Resource<T>(data, message)
    class Loading<T>(data: T? = null) : Resource<T>(data)
} 

================================================================================

FILE 38: app\src\main\java\com\example\tumbuhnyata\di\NetworkModule.kt
Lines: 64 | Size: 2065 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.di

import com.example.tumbuhnyata.TumbuhNyataApp
import com.example.tumbuhnyata.data.api.NotificationApi
import com.example.tumbuhnyata.data.api.ProfileApi
import com.example.tumbuhnyata.data.api.WorkshopApiService
import com.example.tumbuhnyata.data.network.AuthInterceptor
import com.example.tumbuhnyata.data.repository.NotificationRepository
import com.example.tumbuhnyata.data.repository.ProfileRepository
import com.example.tumbuhnyata.data.repository.WorkshopRepository
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

object NetworkModule {

    private val authInterceptor by lazy {
        AuthInterceptor(TumbuhNyataApp.appContext)
    }

    private val okHttpClient by lazy {
        val loggingInterceptor = HttpLoggingInterceptor().apply {
            level = HttpLoggingInterceptor.Level.BODY
        }
        
        OkHttpClient.Builder()
            .addInterceptor(loggingInterceptor)
            .addInterceptor(authInterceptor)
            .build()
    }

    private val retrofit by lazy {
        Retrofit.Builder()
            .baseUrl("http://10.0.2.2:5000/") // Menggunakan 10.0.2.2 untuk localhost pada emulator Android
            .addConverterFactory(GsonConverterFactory.create())
            .client(okHttpClient)
            .build()
    }

    val notificationApi: NotificationApi by lazy {
        retrofit.create(NotificationApi::class.java)
    }

    val notificationRepository: NotificationRepository by lazy {
        NotificationRepository(notificationApi)
    }
    
    val profileApi: ProfileApi by lazy {
        retrofit.create(ProfileApi::class.java)
    }
    
    val profileRepository: ProfileRepository by lazy {
        ProfileRepository(profileApi)
    }

    val workshopApi: WorkshopApiService by lazy {
        retrofit.create(WorkshopApiService::class.java)
    }

    val workshopRepository: WorkshopRepository by lazy {
        WorkshopRepository(workshopApi)
    }
}

================================================================================

FILE 39: app\src\main\java\com\example\tumbuhnyata\navigation\NavGraph.kt
Lines: 340 | Size: 12582 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.navigation

import androidx.compose.runtime.Composable
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.ui.home.HomeScreen
import com.example.tumbuhnyata.ui.login.LoginScreen
import com.example.tumbuhnyata.ui.profile.AboutScreen
import com.example.tumbuhnyata.ui.profile.ChangePassword
import com.example.tumbuhnyata.ui.profile.ChangePasswordSuccess
import com.example.tumbuhnyata.ui.profile.ProfileScreen
import com.example.tumbuhnyata.ui.profile.UpdateProfile
import com.example.tumbuhnyata.ui.profile.VerificationOne
import com.example.tumbuhnyata.ui.profile.VerificationSuccess
import com.example.tumbuhnyata.ui.profile.VerificationTwo
import com.example.tumbuhnyata.ui.register.AkunBerhasil
import com.example.tumbuhnyata.ui.register.OtpScreen
import com.example.tumbuhnyata.ui.register.RegisterScreen
import com.example.tumbuhnyata.ui.register.VerifikasiScreen
import com.example.tumbuhnyata.ui.notification.NotifikasiDetailScreen
import com.example.tumbuhnyata.ui.splashscreen.OnboardingScreen1
import com.example.tumbuhnyata.ui.splashscreen.OnboardingScreen2
import com.example.tumbuhnyata.ui.splashscreen.OnboardingScreen3
import android.util.Log
import androidx.compose.runtime.remember
import com.example.tumbuhnyata.ui.splashscreen.SplashScreen
import com.example.tumbuhnyata.ui.eventcsr.CsrSubmissionScreen
import com.example.tumbuhnyata.ui.eventcsr.CsrVerificationScreen
import com.example.tumbuhnyata.ui.eventcsr.CsrSuccessScreen
import com.google.gson.Gson
import com.example.tumbuhnyata.ui.splashscreen.OptionScreen
import com.example.tumbuhnyata.ui.workshop.DaftarWorkshop
import com.example.tumbuhnyata.ui.workshop.DeskripsiWorkshopScreen
import com.example.tumbuhnyata.ui.workshop.NewWorkshop
import com.example.tumbuhnyata.ui.workshop.RekomWorkshop
import com.example.tumbuhnyata.ui.workshop.WorkshopBerhasil
import com.example.tumbuhnyata.ui.workshop.WorkshopScreen
import com.example.tumbuhnyata.ui.dashboard.DashboardScreen
import com.example.tumbuhnyata.ui.dashboard.kpi.KpiDetailScreen
import com.example.tumbuhnyata.ui.dashboard.upload.UploadDataScreen
import com.example.tumbuhnyata.ui.dashboard.upload.UploadSuccessScreen
import androidx.navigation.NavType
import androidx.navigation.navArgument
import com.example.tumbuhnyata.data.model.dummyCsrList
import com.example.tumbuhnyata.ui.riwayat.*
import com.example.tumbuhnyata.ui.Sertifikasi.SertifikasiScreen
import com.example.tumbuhnyata.ui.Sertifikasi.AjukanSertifikasiScreen
import com.example.tumbuhnyata.ui.Sertifikasi.SertifikasiAndaScreen
import com.example.tumbuhnyata.ui.Sertifikasi.RiwayatPengajuanScreen
import com.example.tumbuhnyata.ui.Sertifikasi.DetailSertifikasiScreen
import com.example.tumbuhnyata.ui.Sertifikasi.DokumenOne
import com.example.tumbuhnyata.ui.Sertifikasi.CertificationSuccessScreen
import com.example.tumbuhnyata.ui.dashboardkeuangan.DashboardKeuanganScreen
import com.example.tumbuhnyata.ui.detail.CsrDetailScreen
import com.example.tumbuhnyata.ui.riwayat.UploadRevisiScreen
import com.example.tumbuhnyata.ui.riwayat.RevisiSuccessScreen
import com.example.tumbuhnyata.ui.eventcsr.CsrData
import com.example.tumbuhnyata.viewmodel.RiwayatViewModel

@Composable
fun AppNavigation() {
    val navController = rememberNavController()

    NavHost(
        navController = navController,
        startDestination = "home" // Ganti dengan "splash" jika ingin memulai dari splash screen,
    ) {
        composable("splash") {
            SplashScreen(navController)
        }
        composable("onboarding") {
            OnboardingScreen1(navController)
        }
        composable("onboarding2") {
            OnboardingScreen2(navController)
        }
        composable("onboarding3") {
            OnboardingScreen3(navController)
        }
        composable("option") {
            OptionScreen(navController)
        }
        composable("register") {
            RegisterScreen(navController)
        }
        composable("login") {
            LoginScreen(navController)
        }
        composable("verifikasi") {
            VerifikasiScreen(navController)
        }
        composable("otp") {
            OtpScreen(navController)
        }
        composable("akunberhasil") {
            AkunBerhasil(navController)
        }
        
        // Notifikasi
        composable("notifikasi") {
            com.example.tumbuhnyata.ui.notification.NotificationScreen(
                userId = "1", // Ganti dengan ID user yang sebenarnya dari session
                onBackClick = { navController.popBackStack() }
            )
        }
        composable("notifikasi_detail") {
            NotifikasiDetailScreen(navController = navController)
        }
        
        // Profile
        composable("profile") {
            ProfileScreen(navController)
        }
        composable("about") {
            AboutScreen(navController)
        }
        composable("verification_one") {
            VerificationOne(navController)
        }
        composable("verification_two") {
            VerificationTwo(navController)
        }
        composable("verification_success") {
            VerificationSuccess(navController)
        }
        
        // Dashboard
        composable("dashboard") {
            DashboardScreen(navController = navController)
        }
        
        // KPI Detail
        composable(
            route = "kpi_detail/{kpiId}",
            arguments = listOf(navArgument("kpiId") {
                type = NavType.StringType
            })
        ) { backStackEntry ->
            val kpiId = backStackEntry.arguments?.getString("kpiId")
            requireNotNull(kpiId) { "kpiId parameter wasn't found. Please make sure it's set!" }
            KpiDetailScreen(navController = navController, kpiId = kpiId)
        }
        
        // Upload screens
        composable("upload_data") {
            UploadDataScreen(navController = navController)
        }
        composable("upload_success") {
            UploadSuccessScreen(navController = navController)
        }
        
        // Workshop screens
        composable("workshop") {
            WorkshopScreen(navController)
        }
        composable("rekomendasiworkshop") {
            RekomWorkshop(navController)
        }
        composable("workshopterbaru") {
            NewWorkshop(navController)
        }
        composable("deskripsiworkshop/{workshopId}") { backStackEntry ->
            val workshopId = backStackEntry.arguments?.getString("workshopId") ?: ""
            DeskripsiWorkshopScreen(navController, workshopId)
        }
        composable("daftarworkshop") {
            DaftarWorkshop(navController)
        }
        composable("workshopberhasil") {
            WorkshopBerhasil(navController)
        }
        
        // CSR Event screens
        composable("csr_submission") {
            CsrSubmissionScreen(navController)
        }
        composable(
            route = "csr_verification/{csrDataJson}",
            arguments = listOf(navArgument("csrDataJson") { type = NavType.StringType })
        ) { backStackEntry ->
            val csrDataJson = backStackEntry.arguments?.getString("csrDataJson")
            if (csrDataJson != null) {
                val csrData = Gson().fromJson(csrDataJson, CsrData::class.java)
                CsrVerificationScreen(navController, csrData)
            } else {
                // Optionally show an error or navigate back
                // navController.popBackStack()
            }
        }
        composable("csr_success") {
            CsrSuccessScreen(navController)
        }
        
        // Home
        composable("home") {
            HomeScreen(navController)
        }
        
        // Invoice Screen
        composable("invoice") {
            InvoiceScreen(
                onBack = { navController.popBackStack() }
            )
        }

        // Riwayat screens
        composable("riwayat") {
            val riwayatViewModel = remember {
                RiwayatViewModel(dummyList = dummyCsrList)
            }
            RiwayatScreen(
                navController = navController,
                riwayatViewModel = riwayatViewModel,
                onCsrCardClick = { csrItem ->
                    Log.d("NavGraph", "CSR Card clicked: ${csrItem.title}")
                    navController.navigate("detailRiwayat/${csrItem.title.replace(" ", "_")}")
                },
                onLihatSemuaPerluTindakan = {
                    navController.navigate("perluTindakan")
                },
                onLihatSemuaDiterima = {
                    navController.navigate("diterima")
                }
            )
        }

        composable(
            route = "detailRiwayat/{csrTitle}",
            arguments = listOf(
                navArgument("csrTitle") { type = NavType.StringType }
            )
        ) { backStackEntry ->
            val csrTitle = backStackEntry.arguments?.getString("csrTitle")?.replace("_", " ")
            val csrItem = dummyCsrList.find { it.title == csrTitle }
            if (csrItem != null) {
                CsrDetailScreen(
                    csr = csrItem,
                    onBack = { navController.popBackStack() },
                    onNavigateToInvoice = { navController.navigate("invoice") },
                    onNavigateToUploadRevisi = { navController.navigate("upload_revisi") }
                )
            }
        }

        composable("perluTindakan") {
            val riwayatViewModel = remember {
                RiwayatViewModel(dummyList = dummyCsrList)
            }
            PerluTindakanScreen(
                riwayatViewModel = riwayatViewModel,
                onBack = { navController.popBackStack() },
                onCsrCardClick = { csrItem ->
                    navController.navigate("detailRiwayat/${csrItem.title.replace(" ", "_")}")
                }
            )
        }

        composable("diterima") {
            val riwayatViewModel = remember {
                RiwayatViewModel(dummyList = dummyCsrList)
            }
            DiterimaScreen(
                riwayatViewModel = riwayatViewModel,
                onBack = { navController.popBackStack() },
                onCsrCardClick = { csrItem ->
                    navController.navigate("detailRiwayat/${csrItem.title.replace(" ", "_")}")
                }
            )
        }

        // Tambahkan route untuk upload revisi
        composable("upload_revisi") {
            UploadRevisiScreen(
                navController = navController,
                onBack = { navController.popBackStack() },
                onUpload = { fileName ->
                    // Handle file upload logic here
                }
            )
        }

        // Sertifikasi Routes
        composable("sertifikasi") {
            SertifikasiScreen(navController)
        }
        composable("ajukansertifikasi") {
            AjukanSertifikasiScreen(navController)
        }
        composable("sertifikasianda") {
            SertifikasiAndaScreen(navController)
        }
        composable("riwayatpengajuan") {
            RiwayatPengajuanScreen(navController)
        }
        composable("detailsertifikasi") {
            DetailSertifikasiScreen(navController)
        }
        composable("dokumenone") {
            DokumenOne(navController)
        }
        composable("berhasil") {
            CertificationSuccessScreen(navController)
        }

        composable("dashboardkeuangan") {
            DashboardKeuanganScreen(navController)
        }

        composable("revisi_success") {
            RevisiSuccessScreen(navController = navController)
        }
        composable("profile") {
            ProfileScreen(navController)
        }
        composable("about") {
            AboutScreen(navController)
        }
        composable("verification_one") {
            VerificationOne(navController)
        }
        composable("verification_two") {
            VerificationTwo(navController)
        }
        composable("verification_success") {
            VerificationSuccess(navController)
        }
        composable("update_profile") {
            UpdateProfile(navController)
        }
        composable("change_password") {
            ChangePassword(navController)
        }
        composable("change_password_success") {
            ChangePasswordSuccess(navController)
        }
    }
}




================================================================================

FILE 40: app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\AjukanSertifikasi.kt
Lines: 147 | Size: 4849 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.Sertifikasi

import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.material3.Text
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.tumbuhnyata.viewmodel.*

@Composable
fun AjukanSertifikasiScreen(navController: NavController) {
    val viewModel: AjukanSertifikasiViewModel = viewModel()
    val state by viewModel.state.collectAsState()

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(start = 20.dp, top = 30.dp, end = 20.dp)
    ) {
        TopBarProfile(
            title = "Ajukan Sertifikasi",
            step = "",
            iconResId = R.drawable.btn_back,
            onBackClick = { navController.popBackStack() }
        )

        Spacer(modifier = Modifier.height(24.dp))

        Text(
            "Pilih Sertifikasi Anda",
            fontWeight = FontWeight.Bold,
            fontFamily = PoppinsFontFamily,
            fontSize = 21.sp,
            color = Color(0xFF1A4218)
        )

        when {
            state.isLoading -> {
                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                    CircularProgressIndicator()
                }
            }
            state.error != null -> {
                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                    Text(text = state.error ?: "An error occurred")
                }
            }
            else -> {
                AjukanSertifikasiSection(navController, state.availableSertifikasiList, viewModel)
            }
        }
    }
}

data class AjukanSertifikasi(
    val title: String,
    val code: String,
    val deskripsi: String,
    val imageRes: Int
)

@Composable
fun AjukanSertifikasiSection(
    navController: NavController,
    sertifikasiList: List<AjukanSertifikasi>,
    viewModel: AjukanSertifikasiViewModel
) {
    Spacer(modifier = Modifier.height(8.dp))

    sertifikasiList.forEach { sertifikasi ->
        AjukanSertifikasiCard(
            data = sertifikasi,
            navController = navController,
            onSelect = { viewModel.selectSertifikasi(sertifikasi) }
        )
        Spacer(modifier = Modifier.height(12.dp))
    }
}

@Composable
fun AjukanSertifikasiCard(
    data: AjukanSertifikasi,
    navController: NavController,
    onSelect: () -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 1.dp)
            .clickable { 
                onSelect()
                navController.navigate("detailsertifikasi")
            },
        colors = CardDefaults.cardColors(containerColor = Color.Transparent),
        elevation = CardDefaults.cardElevation(0.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.Top
        ) {
            Image(
                painter = painterResource(id = data.imageRes),
                contentDescription = "Sertifikasi Icon",
                modifier = Modifier
                    .size(78.dp)
                    .padding(end = 16.dp),
                contentScale = ContentScale.Fit
            )

            Column(modifier = Modifier.weight(1f)) {
                Text(data.title, fontWeight = FontWeight.Bold, fontFamily = PoppinsFontFamily, fontSize = 17.sp)
                Text(data.code, fontSize = 14.sp, fontFamily = PoppinsFontFamily, color = Color.Gray)
                Text(data.deskripsi, fontFamily = PoppinsFontFamily, fontSize = 12.sp)
                Spacer(modifier = Modifier.height(4.dp))
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewAjukanSertifikasiScreen() {
    val navController = rememberNavController()
    AjukanSertifikasiScreen(navController)
}

================================================================================

FILE 41: app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\Berhasil.kt
Lines: 137 | Size: 5004 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.Sertifikasi
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun CertificationSuccessScreen(navController: NavController) {
    Box(
        modifier = Modifier
            .fillMaxSize()
    ) {
        Image(
            painter = painterResource(id = R.drawable.bg_sukses), // Background image dari drawable
            contentDescription = "Background",
            modifier = Modifier.fillMaxSize()
        )

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(24.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            Image(
                painter = painterResource(id = R.drawable.gambar_sertifikasi), // Ilustrasi sertifikat
                contentDescription = "Sertifikat",
                modifier = Modifier
                    .size(180.dp)
                    .padding(bottom = 24.dp)
            )

            Text(
                text = "Pengajuan Sertifikasi\nBerhasil!",
                textAlign = TextAlign.Center,
                fontFamily = PoppinsFontFamily,
                fontSize = 25.sp,
                fontWeight = FontWeight.Bold,
                color = Color.White
            )

            Spacer(modifier = Modifier.height(16.dp))

            Text(
                text = "Pengajuan Anda telah diterima dan sedang\n" +
                        "dalam proses verifikasi dokumen oleh tim auditor",
                fontSize = 15.sp,
                fontFamily = PoppinsFontFamily,
                textAlign = TextAlign.Center,
                color = Color.White
            )

            Spacer(modifier = Modifier.height(8.dp))

            Text(
                text = "Estimasi waktu proses: 10–30 hari kerja",
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                textAlign = TextAlign.Center,
                color = Color.White
            )

            Spacer(modifier = Modifier.height(24.dp))

            Text(
                text = "Notifikasi Email: ",
                fontSize = 12.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color.White
            )
            Text(
                text = "Perusahaan akan menerima email konfirmasi dan\nlink untuk melacak status pengajuan",
                fontSize = 12.sp,
                fontFamily = PoppinsFontFamily,
                textAlign = TextAlign.Center,
                color = Color.White
            )

            Spacer(modifier = Modifier.height(5.dp))

            Button(
                onClick = { navController.navigate("riwayatpengajuan") },
                colors = ButtonDefaults.buttonColors(containerColor = Color.Black),
                shape = RoundedCornerShape(8.dp),
                modifier = Modifier
                    .fillMaxWidth()
                    .height(48.dp)
            ) {
                Text("Lihat Detail Riwayat", color = Color.White, fontSize = 16.sp, fontWeight = FontWeight.Bold,  fontFamily = PoppinsFontFamily)
            }
            

            Spacer(modifier = Modifier.height(12.dp))

            Button(
                onClick = { navController.navigate("home") },
                colors = ButtonDefaults.buttonColors(containerColor = Color.White),
                shape = RoundedCornerShape(8.dp),
                modifier = Modifier
                    .fillMaxWidth()
                    .height(48.dp)
            ) {
                Text("Kembali ke Beranda", color = Color.Black, fontSize = 16.sp, fontWeight = FontWeight.Bold,  fontFamily = PoppinsFontFamily)
            }
        }
    }
}

@Preview()
@Composable
fun CertificationSuccessScreenPreview() {
    val navController = rememberNavController()
    CertificationSuccessScreen(navController)
}


================================================================================

FILE 42: app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\DetailSertifikasi.kt
Lines: 160 | Size: 5295 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.Sertifikasi

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController

@Composable
fun DetailSertifikasiScreen(navController: NavController) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(start = 20.dp, top = 40.dp, end = 20.dp)
            .padding(vertical = 16.dp)
    ) {
        TopBarProfile(
            title = "Detail Sertifikasi",
            step = "",
            iconResId = R.drawable.btn_back,
            onBackClick = { navController.popBackStack() }
        )

        Spacer(modifier = Modifier.height(24.dp))

        // Logo ISO
        Image(
            painter = painterResource(id = R.drawable.iso_26000), // Ganti dengan drawable iso kamu
            contentDescription = "ISO Logo",
            modifier = Modifier
                .size(100.dp)
                .align(Alignment.CenterHorizontally),
            contentScale = ContentScale.Fit
        )

        Spacer(modifier = Modifier.height(24.dp))

        Text(
            text = "Nama Sertifikasi",
            fontWeight = FontWeight.Bold,
            fontFamily = PoppinsFontFamily,
            fontSize = 14.sp
        )
        Text(
            text = "ISO 26000 - Sustainability",
            fontFamily = PoppinsFontFamily,
            fontSize = 14.sp
        )

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Lembaga Kredensial",
            fontWeight = FontWeight.Bold,
            fontFamily = PoppinsFontFamily,
            fontSize = 14.sp
        )
        Text(
            text = "International Organization for Standardization (ISO)",
            fontFamily = PoppinsFontFamily,
            fontSize = 14.sp
        )

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Deskripsi",
            fontWeight = FontWeight.Bold,
            fontFamily = PoppinsFontFamily,
            fontSize = 14.sp
        )
        Text(
            text = "Standar global untuk tanggung jawab sosial perusahaan, mencakup tata kelola, hak asasi manusia, lingkungan, praktik ketenagakerjaan, dan keterlibatan masyarakat.",
            fontSize = 14.sp
        )

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Manfaat",
            fontWeight = FontWeight.Bold,
            fontFamily = PoppinsFontFamily,
            fontSize = 14.sp
        )
        Text(
            text = "1. Meningkatkan reputasi perusahaan\n" +
                    "2. Memastikan kepatuhan terhadap standar internasional\n" +
                    "3. Meningkatkan daya saing bisnis",
            fontFamily = PoppinsFontFamily,
            fontSize = 14.sp
        )

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Biaya",
            fontWeight = FontWeight.Bold,
            fontFamily = PoppinsFontFamily,
            fontSize = 14.sp
        )

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(Color(0xFFF5F5F5), shape = RoundedCornerShape(8.dp))
                .padding(16.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(text = "Rp", fontWeight = FontWeight.Bold)
                Text(
                    text = "25.000.000",
                    fontWeight = FontWeight.Bold,
                    fontFamily = PoppinsFontFamily,
                    fontSize = 18.sp
                )
            }
        }

        Spacer(modifier = Modifier.weight(1f))

        Button(
            onClick = { navController.navigate("dokumenone") },
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF2F4019)),
            shape = RoundedCornerShape(8.dp),
            modifier = Modifier
                .fillMaxWidth()
                .height(48.dp)
        ) {
            Text(text = "Ajukan Sekarang", color = Color.White, fontSize = 16.sp, fontWeight = FontWeight.Bold, fontFamily = PoppinsFontFamily)
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewDetailSertifikasiScreen() {
    val navController = rememberNavController()
    DetailSertifikasiScreen(navController)
}

================================================================================

FILE 43: app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\DokumenOne.kt
Lines: 198 | Size: 7427 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.Sertifikasi

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun DokumenOne(navController: NavController) {
    var fileCSR by remember { mutableStateOf<String?>(null) }
    var fileLingkungan by remember { mutableStateOf<String?>(null) }
    var fileImplementasi by remember { mutableStateOf<String?>(null) }
    var filePernyataan by remember { mutableStateOf<String?>(null) }

    val isBothFilesUploaded = fileCSR != null && fileLingkungan != null && fileImplementasi != null && filePernyataan != null

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF8F8F8))
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(start = 20.dp, top = 40.dp, end = 20.dp)
        ) {
            TopBarProfile(
                title = "Verifikasi",
                step = "",
                iconResId = R.drawable.btn_back,
                onBackClick = { navController.popBackStack() }
            )

            Spacer(modifier = Modifier.height(50.dp))
            Text(
                text = "Unggah Dokumen Pendukung",
                fontSize = 22.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(start = 2.dp)
            )
            Text(
                text = "Unggah dokumen pendukung untuk melanjutkan pengajuan sertifikasi CSR",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF4B4B4B),
                modifier = Modifier.padding(start = 2.dp, top = 10.dp, end = 5.dp)
            )

            UploadField(
                fileName = fileCSR,
                placeholder = "Akta Pendirian",
                onUploadClick = { fileCSR = "CSR_Report_2023.pdf" }, // Simulasi upload
                onDelete = { fileCSR = null },
                modifier = Modifier.padding(top=40.dp)
            )

            UploadField(
                fileName = fileLingkungan,
                placeholder = "SKDP",
                onUploadClick = { fileLingkungan = "Green_Policy_Paragon.pdf" }, // Simulasi upload
                onDelete = { fileLingkungan = null },
                modifier = Modifier.padding(top=20.dp)
            )
            UploadField(
                fileName = fileImplementasi,
                placeholder = "Akta Pendirian",
                onUploadClick = { fileImplementasi = "Project_TreePlanting.pdf" }, // Simulasi upload
                onDelete = { fileImplementasi = null },
                modifier = Modifier.padding(top=40.dp)
            )

            UploadField(
                fileName = filePernyataan,
                placeholder = "SKDP",
                onUploadClick = { filePernyataan = "Compliance_Declaration.pdf" }, // Simulasi upload
                onDelete = { filePernyataan = null },
                modifier = Modifier.padding(top=20.dp)
            )

            Text(
                text = "*Jika perusahaan anda tidak mempunyai beberapa laporan di atas anda bisa mendownload template di sini",
                fontSize = 12.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF4B4B4B),
                modifier = Modifier.padding(start = 2.dp, top = 10.dp, end = 5.dp)
            )

            Spacer(modifier = Modifier.height(150.dp))

            Button(
                onClick = { navController.navigate("berhasil")},
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp)
                    .padding(start = 1.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(
                    if (isBothFilesUploaded) Color(0xFF27361F) else Color(0xFF989898)
                ),
                enabled = isBothFilesUploaded
            ) {
                Text(
                    text = "Selanjutnya",
                    color = Color.White,
                    fontSize = 20.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    textAlign = TextAlign.Center
                )
            }
        }
    }
}

@Composable
fun UploadField(
    fileName: String?,
    placeholder: String,
    onUploadClick: () -> Unit,
    onDelete: () -> Unit,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier
            .fillMaxWidth()
    ) {

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp)
                .border(2.dp, Color(0xFFB9B9B9), shape = RoundedCornerShape(10.dp))
                .padding(horizontal = 16.dp)
                .clickable { onUploadClick() },
            contentAlignment = Alignment.CenterStart
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.fillMaxWidth()
            ) {
                Image(
                    painter = painterResource(id = if (fileName != null) R.drawable.ic_doc else R.drawable.ic_upload),
                    contentDescription = "Icon",
                    modifier = Modifier.size(24.dp)
                )
                Spacer(modifier = Modifier.width(12.dp))

                Text(
                    text = fileName ?: placeholder,
                    fontSize = 16.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = if (fileName != null) FontWeight.SemiBold else FontWeight.Normal,
                    color = if (fileName != null) Color(0xFF686868) else Color(0xFFB8B8B8),
                    modifier = Modifier.weight(1f)
                )

                if (fileName != null) {
                    Image(
                        painter = painterResource(id = R.drawable.ic_cancel),
                        contentDescription = "Delete",
                        modifier = Modifier
                            .size(20.dp)
                            .clickable { onDelete() }
                    )
                }
            }
        }
    }
}

@Preview
@Composable
fun PreviewDokumenOne() {
    DokumenOne(navController = rememberNavController())
}

================================================================================

FILE 44: app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\RiwayatPengajuan.kt
Lines: 140 | Size: 4634 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.Sertifikasi

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.material3.Text
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.tumbuhnyata.viewmodel.RiwayatPengajuan
import com.example.tumbuhnyata.viewmodel.RiwayatPengajuanViewModel

@Composable
fun RiwayatPengajuanScreen(navController: NavController) {
    val viewModel: RiwayatPengajuanViewModel = viewModel()
    val state by viewModel.state.collectAsState()

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(start = 20.dp, top = 30.dp, end = 20.dp)
    ) {
        TopBarProfile(
            title = "Riwayat Pengajuan",
            step = "",
            iconResId = R.drawable.btn_back,
            onBackClick = { navController.popBackStack() }
        )

        Spacer(modifier = Modifier.height(24.dp))

        Text(
            "Riwayat Pengajuan Sertifikasi",
            fontWeight = FontWeight.Bold,
            fontFamily = PoppinsFontFamily,
            fontSize = 21.sp,
            color = Color(0xFF1A4218)
        )

        when {
            state.isLoading -> {
                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                    CircularProgressIndicator()
                }
            }
            state.error != null -> {
                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                    Text(text = state.error ?: "An error occurred")
                }
            }
            else -> {
                RiwayatPengajuanSection(state.riwayatList)
            }
        }
    }
}

@Composable
fun RiwayatPengajuanSection(riwayatList: List<RiwayatPengajuan>) {
    Spacer(modifier = Modifier.height(8.dp))

    riwayatList.forEach { riwayat ->
        RiwayatPengajuanCard(riwayat)
        Spacer(modifier = Modifier.height(12.dp))
    }
}

@Composable
fun RiwayatPengajuanCard(data: RiwayatPengajuan) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 1.dp),
        colors = CardDefaults.cardColors(containerColor = Color.Transparent),
        elevation = CardDefaults.cardElevation(0.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.Top
        ) {
            Image(
                painter = painterResource(id = data.imageRes),
                contentDescription = "Sertifikasi Icon",
                modifier = Modifier
                    .size(78.dp)
                    .padding(end = 16.dp)
            )

            Column(modifier = Modifier.weight(1f)) {
                Text(
                    data.title,
                    fontWeight = FontWeight.Bold,
                    fontFamily = PoppinsFontFamily,
                    fontSize = 17.sp
                )
                Text(
                    data.status,
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    color = when (data.status) {
                        "Dalam Proses" -> Color(0xFFFFA500)
                        "Selesai" -> Color(0xFF4CAF50)
                        else -> Color.Gray
                    }
                )
                Text(
                    data.tanggal,
                    fontFamily = PoppinsFontFamily,
                    fontSize = 12.sp,
                    color = Color.Gray
                )
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewRiwayatPengajuanScreen() {
    val navController = rememberNavController()
    RiwayatPengajuanScreen(navController)
}

================================================================================

FILE 45: app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\Sertifikasi.kt
Lines: 379 | Size: 13062 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.Sertifikasi

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.KeyboardArrowRight
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Icon
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.draw.clip
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.ui.components.BottomNavigationBar
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.tumbuhnyata.viewmodel.SertifikasiViewModel

@Composable
fun SertifikasiScreen(navController: NavController) {
    val viewModel: SertifikasiViewModel = viewModel()
    val state by viewModel.state.collectAsState()

    Scaffold(
        bottomBar = {
            BottomNavigationBar(navController = navController)
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .padding(innerPadding)
                .fillMaxSize()
                .verticalScroll(rememberScrollState())
                .padding(16.dp)
        ) {
            Spacer(modifier = Modifier.height(24.dp))
            BannerSection(navController)
            Spacer(modifier = Modifier.height(24.dp))
            
            when {
                state.isLoading -> {
                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                        CircularProgressIndicator()
                    }
                }
                state.error != null -> {
                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                        Text(text = state.error ?: "An error occurred")
                    }
                }
                else -> {
                    SertifikasiSection(navController, state.sertifikasiList)
                }
            }
            
            Spacer(modifier = Modifier.height(24.dp))
            RiwayatPengajuanSection(navController)
        }
    }
}

@Composable
fun BannerSection(navController: NavController) {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .height(140.dp)
            .clip(RoundedCornerShape(16.dp))
    ) {
        // Gambar background banner
        Image(
            painter = painterResource(id = R.drawable.banner_sertifikasi),
            contentDescription = "Banner Sertifikasi",
            contentScale = ContentScale.Crop,
            modifier = Modifier
                .matchParentSize()
        )

        // Teks & tombol di atas gambar
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.Center
        ) {
            Text(
                text = "Naikkan Kredibilitas",
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color.White
            )
            Text(
                text = "Perusahaan Anda",
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color.White
            )
            Spacer(modifier = Modifier.height(4.dp))
            Text(
                text = "Ajukan Sertifikasi Sekarang!",
                fontSize = 12.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
            )

            Spacer(modifier = Modifier.height(8.dp))

            Button(
                onClick = { navController.navigate("ajukansertifikasi") },
                shape = RoundedCornerShape(8.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color.White),
            ) {
                Text("Ajukan Sertifikasi", color = Color.Black, fontFamily = PoppinsFontFamily)
                Spacer(modifier = Modifier.width(4.dp))
                Icon(Icons.Default.Add, contentDescription = null, tint = Color.Black)
            }
        }
    }
}

data class Sertifikasi(
    val title: String,
    val code: String,
    val issued: String,
    val credentialId: String,
    val imageRes: Int
)

@Composable
fun SertifikasiSection(navController: NavController, sertifikasiList: List<Sertifikasi>) {
    Text(
        "Sertifikasi Anda",
        fontWeight = FontWeight.Bold,
        fontFamily = PoppinsFontFamily,
        fontSize = 21.sp,
        color = Color(0xFF1A4218)
    )
    Spacer(modifier = Modifier.height(8.dp))

    sertifikasiList.forEach {
        SertifikasiCard(it)
        Spacer(modifier = Modifier.height(12.dp))
    }

    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Button(
            onClick = { navController.navigate("sertifikasianda") },
            modifier = Modifier
                .weight(1f)
                .fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(
                containerColor = Color(0xFFE9E9E9),
                contentColor = Color(0xFF4B4B4B)
            ),
            shape = RoundedCornerShape(5.dp)
        ) {
            Text("Lihat Semua Sertifikasi")
            Spacer(modifier = Modifier.width(8.dp))
            Image(
                painter = painterResource(id = R.drawable.arrow_rightsertif),
                contentDescription = "Arrow Right",
                modifier = Modifier.size(18.dp)
            )
        }
    }
}

@Composable
fun SertifikasiCard(data: Sertifikasi) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 1.dp),
        colors = CardDefaults.cardColors(containerColor = Color.Transparent),
        elevation = CardDefaults.cardElevation(0.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.Top
        ) {
            Image(
                painter = painterResource(id = data.imageRes),
                contentDescription = "Sertifikasi Icon",
                modifier = Modifier
                    .size(78.dp)
                    .padding(end = 16.dp),
                contentScale = ContentScale.Fit
            )

            Column(modifier = Modifier.weight(1f)) {
                Text(data.title, fontWeight = FontWeight.Bold, fontSize = 17.sp)
                Text(data.code, fontSize = 14.sp, color = Color.Gray)
                Text(data.issued, fontSize = 12.sp)
                Text(data.credentialId, fontSize = 12.sp, color = Color.Gray)
                Spacer(modifier = Modifier.height(4.dp))
                Button(
                    onClick = { /* show credential */ },
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFFF8F8F8),
                        contentColor = Color(0xFF4B4B4B)
                    ),
                    shape = RoundedCornerShape(5.dp),
                    border = BorderStroke(1.dp, Color(0xFF4B4B4B))
                ) {
                    Text("show credential", color = Color(0xFF4B4B4B), fontSize = 12.sp)
                    Icon(
                        Icons.Default.KeyboardArrowRight,
                        contentDescription = null,
                        tint = Color(0xFF4B4B4B)
                    )
                }
            }
        }
    }
}

data class Pengajuan(
    val status: String,
    val color: Color,
    val sertifikasi: String,
    val kategori: String,
    val pengajuan: String,
    val deadline: String
)

@Composable
fun RiwayatPengajuanSection(navController: NavController) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            "Riwayat Pengajuan",
            fontWeight = FontWeight.Bold,
            fontSize = 21.sp,
            color = Color(0xFF1A4218)
        )

        Spacer(modifier = Modifier.weight(1f))

        TextButton(
            onClick = { navController.navigate("riwayatpengajuan") },
            contentPadding = PaddingValues(0.dp)
        ) {
            Text(
                "Lihat Semua",
                fontSize = 14.sp,
                color = Color(0xFF1A4218)
            )
            Spacer(modifier = Modifier.width(4.dp))
            Icon(
                imageVector = Icons.Default.KeyboardArrowRight,
                contentDescription = "Arrow Right",
                tint = Color(0xFF1A4218),
                modifier = Modifier.size(18.dp)
            )
        }
    }

    val dataPengajuan = listOf(
        Pengajuan(
            status = "Proses Review",
            color = Color.Black,
            sertifikasi = "ISO 26000 – Sustainability",
            kategori = "Lingkungan",
            pengajuan = "12 Maret 2024",
            deadline = "25 April 2024"
        ),
        Pengajuan(
            status = "Diterima",
            color = Color(0xFF34C759),
            sertifikasi = "ISO 14001 – Environmental Management",
            kategori = "Manajemen",
            pengajuan = "5 Februari 2024",
            deadline = "20 Maret 2024"
        ),
        Pengajuan(
            status = "Ditolak",
            color = Color.Red,
            sertifikasi = "ISO 9001 – Quality Management",
            kategori = "Kualitas",
            pengajuan = "1 Januari 2024",
            deadline = "10 Februari 2024"
        )
    )

    dataPengajuan.forEachIndexed { index, item ->
        PengajuanCard(item)
        if (index != dataPengajuan.lastIndex) Spacer(modifier = Modifier.height(8.dp))
    }
}

@Composable
fun PengajuanCard(data: Pengajuan) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),
        colors = CardDefaults.cardColors(containerColor = Color.Transparent),
        border = BorderStroke(1.dp, Color(0xFF989898))
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                Text("Status : ${data.status}", fontWeight = FontWeight.Bold)
                Spacer(modifier = Modifier.width(8.dp))
                Box(
                    modifier = Modifier
                        .size(10.dp)
                        .clip(CircleShape)
                        .background(data.color)
                )
            }
            Spacer(modifier = Modifier.height(8.dp))

            InfoRow(iconId = R.drawable.sertifikasi_icon, label = "Sertifikasi", value = data.sertifikasi)
            InfoRow(iconId = R.drawable.kategori_icon, label = "Kategori", value = data.kategori)
            InfoRow(iconId = R.drawable.pengajuan_icon, label = "Pengajuan", value = data.pengajuan)
            InfoRow(iconId = R.drawable.deadline_icon, label = "Deadline", value = data.deadline)
        }
    }
}

@Composable
fun InfoRow(iconId: Int, label: String, value: String) {
    Row(
        verticalAlignment = Alignment.CenterVertically,
        modifier = Modifier.padding(vertical = 2.dp)
    ) {
        Icon(
            painter = painterResource(id = iconId),
            contentDescription = label,
            tint = Color(0xFF4B4B4B), // bisa kamu ganti warnanya
            modifier = Modifier
                .size(16.dp)
                .padding(end = 8.dp)
        )
        Text("$label : $value", fontSize = 14.sp)
    }
}

@Preview(showBackground = true,     showSystemUi = true
)
@Composable
fun SertifikasiScreenPreview() {
    val navController = rememberNavController()
    SertifikasiScreen(navController)
}

================================================================================

FILE 46: app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\SertifikasiAnda.kt
Lines: 153 | Size: 5371 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.Sertifikasi

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.KeyboardArrowRight
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.material3.Text
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController

@Composable
fun SertifikasiAndaScreen(
    navController: NavController
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(start = 20.dp, top = 40.dp, end = 20.dp)
    ) {
        TopBarProfile(
            title = "Sertifikasi Anda",
            step = "",
            iconResId = R.drawable.btn_back,
            onBackClick = { navController.popBackStack() }
        )

        Spacer(modifier = Modifier.height(24.dp))
        SertifikasiAndaSection()
    }
}

data class SertifikasiAnda(
    val title: String,
    val code: String,
    val issued: String,
    val credentialId: String,
    val imageRes: Int
)

@Composable
fun SertifikasiAndaSection() {
    val sertifikasiList = listOf(
        SertifikasiAnda(
            title = "Environmental Management System",
            code = "ISO 14001",
            issued = "Issued Jun 2024 - Expires Jun 2027",
            credentialId = "Credential ID ABC123XYZ",
            imageRes = R.drawable.iso_14001
        ),
        SertifikasiAnda(
            title = "Social Responsibility",
            code = "ISO 26000",
            issued = "Issued Feb 2023 - Expires Feb 2026",
            credentialId = "Credential ID DEF456LMN",
            imageRes = R.drawable.iso_26000
        ),
        SertifikasiAnda(
                title = "Carbon Footprint Certification",
        code = "ISCC",
        issued = "Issued Feb 2023 - Expires Feb 2026",
        credentialId = "Credential ID DEF456LMN",
        imageRes = R.drawable.iscc
        )
    )

    Spacer(modifier = Modifier.height(8.dp))

    sertifikasiList.forEach {
        SertifikasiAndaCard(it)
        Spacer(modifier = Modifier.height(12.dp))
    }
}


@Composable
fun SertifikasiAndaCard(data: SertifikasiAnda) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 1.dp),
        colors = CardDefaults.cardColors(containerColor = Color.Transparent),
        elevation = CardDefaults.cardElevation(0.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.Top
        ) {
            Image(
                painter = painterResource(id = data.imageRes),
                contentDescription = "Sertifikasi Icon",
                modifier = Modifier
                    .size(78.dp)
                    .padding(end = 16.dp),
                contentScale = ContentScale.Fit
            )

            Column(modifier = Modifier.weight(1f)) {
                Text(data.title, fontWeight = FontWeight.Bold, fontFamily = PoppinsFontFamily, fontSize = 17.sp)
                Text(data.code, fontSize = 14.sp, fontFamily = PoppinsFontFamily, color = Color.Gray)
                Text(data.issued, fontFamily = PoppinsFontFamily, fontSize = 12.sp)
                Text(data.credentialId, fontFamily = PoppinsFontFamily, fontSize = 12.sp, color = Color.Gray)
                Spacer(modifier = Modifier.height(4.dp))
                Button(
                    onClick = { /* show credential */ },
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFFF8F8F8),
                        contentColor = Color(0xFF4B4B4B)
                    ),
                    shape = RoundedCornerShape(5.dp),
                    border = BorderStroke(1.dp, Color(0xFF4B4B4B))
                ) {
                    Text("show credential", fontFamily = PoppinsFontFamily, color = Color(0xFF4B4B4B), fontSize = 12.sp)
                    Icon(
                        Icons.Default.KeyboardArrowRight,
                        contentDescription = null,
                        tint = Color(0xFF4B4B4B)
                    )
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewSertifikasiAndaScreen() {
    val navController = rememberNavController()
    SertifikasiAndaScreen(navController)
}

================================================================================

FILE 47: app\src\main\java\com\example\tumbuhnyata\ui\component\SuccessDialog.kt
Lines: 74 | Size: 2534 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.component

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import com.example.tumbuhnyata.R

@Composable
fun SuccessDialog(
    message: String,
    onDismiss: () -> Unit
) {
    Dialog(onDismissRequest = onDismiss) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            shape = RoundedCornerShape(8.dp),
            colors = CardDefaults.cardColors(containerColor = Color.White)
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Image(
                    painter = painterResource(id = R.drawable.ic_download),
                    contentDescription = "Success",
                    modifier = Modifier.size(48.dp)
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Text(
                    text = message,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Medium,
                    fontFamily = poppins,
                    textAlign = TextAlign.Center
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Button(
                    onClick = onDismiss,
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(8.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF2C3E1F)
                    )
                ) {
                    Text(
                        text = "Ok",
                        fontFamily = poppins,
                        fontWeight = FontWeight.SemiBold
                    )
                }
            }
        }
    }
} 

================================================================================

FILE 48: app\src\main\java\com\example\tumbuhnyata\ui\components\BottomNavBarProfile.kt
Lines: 75 | Size: 2966 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun BottomNavBarProfile(selectedItem: Int, onItemSelected: (Int) -> Unit) {
    val items = listOf(
        NavigationItem("Beranda", R.drawable.ic_navbar_home),
        NavigationItem("Sertifikasi", R.drawable.ic_navbar_certification),
        NavigationItem("Workshop", R.drawable.ic_navbar_workshop),
        NavigationItem("Profil", R.drawable.ic_navbar_profile)
    )

    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .height(100.dp)
            .padding(top = 2.dp),
        color = Color.White,
        shadowElevation = 20.dp,
        shape = RoundedCornerShape(topStart = 20.dp, topEnd = 20.dp),
    ) {
        Row(
            modifier = Modifier.fillMaxSize(),
            horizontalArrangement = Arrangement.SpaceAround,
            verticalAlignment = Alignment.CenterVertically
        ) {
            items.forEachIndexed { index, item ->
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    modifier = Modifier
                        .weight(1f)
                        .clickable { onItemSelected(index) }
                        .padding(vertical = 20.dp)
                        .width(98.dp)
                ) {
                    Icon(
                        painter = painterResource(id = item.icon),
                        contentDescription = item.label,
                        tint = if (index == selectedItem) Color(0xFF27361F) else Color(0xFF888888),
                        modifier = Modifier.size(30.dp)
                    )

                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = item.label,
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        letterSpacing = 0.sp,
                        textAlign = TextAlign.Center,
                        lineHeight = 10.sp,
                        fontWeight = if (index == selectedItem) FontWeight.Medium else FontWeight.Normal,
                        color = if (index == selectedItem) Color(0xFF27361F) else Color(0xFF888888)
                    )
                }
            }
        }
    }
}

data class NavigationItem(val label: String, val icon: Int)

================================================================================

FILE 49: app\src\main\java\com\example\tumbuhnyata\ui\components\BottomNavigationBar.kt
Lines: 58 | Size: 2421 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.size
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import androidx.navigation.compose.currentBackStackEntryAsState
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.model.BottomNavItem
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun BottomNavigationBar(navController: NavController) {
    val items = listOf(
        BottomNavItem("Beranda", "home", R.drawable.ic_unhome, R.drawable.ic_home),
        BottomNavItem("Sertifikasi", "sertifikasi", R.drawable.ic_unsertif, R.drawable.ic_sertif),
        BottomNavItem("Workshop", "workshop", R.drawable.ic_unwork, R.drawable.ic_work),
        BottomNavItem("Profil", "profile", R.drawable.ic_unprofile, R.drawable.ic_profile)
    )

    val navBackStackEntry = navController.currentBackStackEntryAsState().value
    val currentRoute = navBackStackEntry?.destination?.route

    NavigationBar(
        containerColor = Color.White
    ) {
        items.forEach { item ->
            val isSelected = currentRoute == item.route
            NavigationBarItem(
                icon = {
                    Image(
                        painter = painterResource(id = if (isSelected) item.selectedIconRes else item.unselectedIconRes),
                        contentDescription = item.label,
                        modifier = Modifier.size(24.dp)
                    )
                },
                label = { Text(item.label, fontFamily = PoppinsFontFamily, color = if (isSelected) Color(0xFF27361F) else Color(0xFF888888)) },
                selected = isSelected,
                onClick = {
                    if (currentRoute != item.route) {
                        navController.navigate(item.route) {
                            launchSingleTop = true
                            restoreState = true
                            popUpTo(navController.graph.startDestinationId) {
                                saveState = true
                            }
                        }
                    }
                }
            )
        }
    }
}


================================================================================

FILE 50: app\src\main\java\com\example\tumbuhnyata\ui\components\CsrCard.kt
Lines: 165 | Size: 5783 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.component

import com.example.tumbuhnyata.ui.riwayat.RiwayatScreen


import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.data.model.CsrItem
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.model.SubStatus
import com.example.tumbuhnyata.data.model.getSubStatusEmoji

val poppins = FontFamily(
    Font(R.font.poppins_regular, FontWeight.Normal),
    Font(R.font.poppins_medium, FontWeight.Medium),
    Font(R.font.poppins_semibold, FontWeight.SemiBold),
    Font(R.font.poppins_bold, FontWeight.Bold)
)

@Composable
fun CsrCard(item: CsrItem, onClick: () -> Unit = {}) {
    Row(
        modifier = Modifier
            .clickable { onClick() }
            .padding(horizontal = 16.dp, vertical = 6.dp)
            .fillMaxWidth()
            .height(IntrinsicSize.Min) // penting agar tinggi row menyesuaikan tinggi konten
    ) {
        // Strip warna kiri
        Box(
            modifier = Modifier
                .width(20.dp)
                .fillMaxHeight()
                .clip(RoundedCornerShape(topStart = 6.dp, bottomStart = 6.dp))
                .background(Color(android.graphics.Color.parseColor(item.subStatus.colorHex)))
        )

        // Konten utama kartu
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .background(
                    color = Color.White,
                    shape = RoundedCornerShape(topEnd = 6.dp, bottomEnd = 6.dp)
                )
                .padding(16.dp)
        ) {
            Text(
                text = item.title,
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                fontFamily = poppins
            )
            Text(
                text = item.organization,
                fontSize = 14.sp,
                color = Color.Gray,
                fontFamily = poppins
            )
            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = "Status : ${
                    item.subStatus.name.replace("_", " ").lowercase()
                        .replaceFirstChar { it.uppercase() }
                } ${getSubStatusEmoji(item.subStatus)}",
                fontSize = 14.sp,
                fontWeight = FontWeight.SemiBold,
                fontFamily = poppins
            )

            // 🔽 Garis di bawah status
            Spacer(modifier = Modifier.height(8.dp))
            Divider(color = Color.LightGray, thickness = 0.5.dp)
            Spacer(modifier = Modifier.height(12.dp))

            // 🔽 Info 3 kolom
            // 🔽 Info 3 kolom dengan garis vertikal pemisah
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                // Kategori
                Column(
                    modifier = Modifier.weight(1f)
                ) {
                    Text(
                        "Kategori",
                        fontSize = 12.sp,
                        fontWeight = FontWeight.SemiBold,
                        fontFamily = poppins
                    )
                    Text(item.category, fontSize = 14.sp, fontFamily = poppins)
                }

                // 🔽 Garis vertikal pemisah antara kategori dan lokasi
                Spacer(modifier = Modifier.width(8.dp))
                Box(
                    modifier = Modifier
                        .fillMaxHeight()
                        .width(0.5.dp)
                        .background(Color.LightGray)
                )

                // Lokasi
                Spacer(modifier = Modifier.width(8.dp))
                Column(
                    modifier = Modifier.weight(1f)
                ) {
                    Text(
                        "Lokasi",
                        fontSize = 12.sp,
                        fontWeight = FontWeight.SemiBold,
                        fontFamily = poppins
                    )
                    Text(item.location, fontSize = 14.sp, fontFamily = poppins)
                }

                // 🔽 Garis vertikal pemisah antara lokasi dan periode
                Spacer(modifier = Modifier.width(8.dp))
                Box(
                    modifier = Modifier
                        .fillMaxHeight()
                        .width(0.5.dp)
                        .background(Color.LightGray)
                )

                // Periode
                Spacer(modifier = Modifier.width(8.dp))
                Column(
                    modifier = Modifier.weight(1f)
                ) {
                    Text(
                        "Periode",
                        fontSize = 12.sp,
                        fontWeight = FontWeight.SemiBold,
                        fontFamily = poppins
                    )
                    Text(item.period, fontSize = 14.sp, fontFamily = poppins)
                }
            }

        }
    }
}

@Preview
@Composable
fun CsrCardPreview() {
    CsrCard(
        CsrItem("Penghijauan Hutan Kaltim", "PT Hijau Sejati", "Diterima", SubStatus.MENDATANG, "Lingkungan", "Kalimantan", "12 Mei - 20 Mei 25")
    )
}

================================================================================

FILE 51: app\src\main\java\com\example\tumbuhnyata\ui\components\DeskripsiWorkshop.kt
Lines: 195 | Size: 6734 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import com.example.tumbuhnyata.data.model.Workshop
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import java.text.NumberFormat
import java.util.*

@Composable
fun DeskripsiWorkshop(navController: NavController, workshop: Workshop) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
    ) {
        Box(
            modifier = Modifier
                .fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            Image(
                painter = painterResource(id = workshop.imageRes),
                contentDescription = "Poster Workshop",
                contentScale = ContentScale.Crop,
                modifier = Modifier
                    .size(317.dp, 352.dp)
                    .padding(16.dp)
            )
        }

        Column(modifier = Modifier.padding(horizontal = 16.dp)) {
            Spacer(modifier = Modifier.height(24.dp))

            Text(
                text = "Nama Workshop",
                fontWeight = FontWeight.Bold,
                fontFamily = PoppinsFontFamily,
                color = Color(0xFF1E1E1E),
                fontSize = 17.sp
            )
            Text(
                text = workshop.title,
                fontFamily = PoppinsFontFamily,
                fontSize = 17.sp,
                color = Color.DarkGray
            )

            Spacer(modifier = Modifier.height(17.dp))

            Text(
                text = "Deskripsi",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1E1E1E),
                fontSize = 17.sp
            )
            Text(
                text = workshop.deskripsi,
                fontFamily = PoppinsFontFamily,
                fontSize = 14.sp,
                textAlign = TextAlign.Justify,
                color = Color(0xFF4B4B4B)
            )

            Spacer(modifier = Modifier.height(17.dp))

            Text(
                text = "Instruktur",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1E1E1E),
                fontSize = 17.sp
            )
            Text(
                text = workshop.speaker,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Medium,
                fontSize = 17.sp,
                color = Color(0xFF4B4B4B)
            )

            Spacer(modifier = Modifier.height(17.dp))

            Text(
                text = "Tanggal",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1E1E1E),
                fontSize = 17.sp
            )
            Text(
                text = workshop.tanggal,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.SemiBold,
                fontSize = 17.sp,
                color = Color(0xFF4B4B4B)
            )

            Spacer(modifier = Modifier.height(17.dp))

            Text(
                text = "Materi",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1E1E1E),
                fontSize = 17.sp
            )
            workshop.materi.forEachIndexed { index, materi ->
                Text(
                    text = "${index + 1}. $materi",
                    fontFamily = PoppinsFontFamily,
                    fontSize = 17.sp,
                    textAlign = TextAlign.Justify,
                    color = Color(0xFF4B4B4B)
                )
            }

            Spacer(modifier = Modifier.height(17.dp))

            Text(
                text = "Biaya",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF4B4B4B),
                fontSize = 17.sp
            )
            Spacer(modifier = Modifier.height(7.dp))

            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp)
                    .background(Color(0xFFE9E9E9), shape = RoundedCornerShape(10.dp))
                    .padding(horizontal = 16.dp, vertical = 12.dp),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text(
                    text = "Rp",
                    fontFamily = PoppinsFontFamily,
                    fontSize = 21.sp,
                    fontWeight = FontWeight.ExtraBold,
                    color = Color(0xFF4B4B4B)
                )
                Text(
                    text = NumberFormat.getNumberInstance(Locale("id", "ID")).format(workshop.biaya),
                    fontSize = 21.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.ExtraBold,
                    color = Color(0xFF4B4B4B)
                )
            }

            Spacer(modifier = Modifier.height(23.dp))

            Button(
                onClick = { navController.navigate("daftarworkshop") },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF27361F))
            )  {
                Text(
                    text = "Daftar Sekarang",
                    color = Color.White,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    fontSize = 17.sp
                )
            }
            Spacer(modifier = Modifier.height(17.dp))
        }
    }
}



================================================================================

FILE 52: app\src\main\java\com\example\tumbuhnyata\ui\components\InputField.kt
Lines: 40 | Size: 1572 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp

@Composable
fun InputField(value: String, onValueChange: (String) -> Unit, iconRes: Int, label: String, keyboardType: KeyboardType = KeyboardType.Text) {
    OutlinedTextField(
        value = value,
        onValueChange = onValueChange,
        leadingIcon = {
            Image(
                painter = painterResource(id = iconRes),
                contentDescription = "$label Icon",
                modifier = Modifier.size(24.dp)
            )
        },
        placeholder = { Text(label) },
        modifier = Modifier.fillMaxWidth().background(Color.White),
        shape = RoundedCornerShape(16.dp),
        colors = TextFieldDefaults.colors(
            focusedIndicatorColor = Color(0xFF27361F),
            unfocusedIndicatorColor = Color.Gray,
            unfocusedContainerColor = Color.White,
            focusedContainerColor = Color.White
        )
    )
}

================================================================================

FILE 53: app\src\main\java\com\example\tumbuhnyata\ui\components\SectionHeader.kt
Lines: 58 | Size: 2166 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowForward
import androidx.compose.material.icons.filled.KeyboardArrowRight
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun SectionHeader(title: String, onLihatSemua: () -> Unit) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 8.dp),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(
            text = title,
            fontWeight = FontWeight.Bold,
            fontSize = 16.sp,
            fontFamily = PoppinsFontFamily
        )
        TextButton(onClick = onLihatSemua) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                Text("Lihat Semua", fontFamily = PoppinsFontFamily, color = Color(0xFF525E4C) )
                Icon(
                    imageVector = Icons.Filled.KeyboardArrowRight,
                    contentDescription = "Lihat Semua",
                    modifier = Modifier.size(16.dp) ,
                    tint = Color(0xFF525E4C)
                )
            }
        }
    }
}
@androidx.compose.ui.tooling.preview.Preview
@Composable
fun PreviewSectionHeader() {
    SectionHeader(title = "Judul Bagian", onLihatSemua = { /*TODO*/ })
}

================================================================================

FILE 54: app\src\main\java\com\example\tumbuhnyata\ui\components\SectionWithTittle.kt
Lines: 41 | Size: 1270 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.compose.material3.*
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.Alignment
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp


@Composable
fun SectionWithTitle(title: String, onSeeAllClick: () -> Unit) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 12.dp),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            title,
            fontSize = 25.sp,
            fontFamily = PoppinsFontFamily,
            color = Color(0xFF27361F),
            fontWeight = FontWeight.ExtraBold
        )

        Text(
            "Lihat Semua >",
            fontSize = 12.sp,
            fontFamily = PoppinsFontFamily,
            color = Color(0xFF525E4C),
            modifier = Modifier.clickable { onSeeAllClick() }
        )
    }
}


================================================================================

FILE 55: app\src\main\java\com\example\tumbuhnyata\ui\components\SeeAllButton.kt
Lines: 32 | Size: 991 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun SeeAllButton(onClick: () -> Unit) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 8.dp),
        horizontalArrangement = Arrangement.End
    ) {
        TextButton(onClick = onClick) {
            Text("Lihat Semua", fontFamily = PoppinsFontFamily)
        }
    }
}

@androidx.compose.ui.tooling.preview.Preview
@Composable
fun PreviewSeeAllButton() {
    SeeAllButton(onClick = { /*TODO*/ })
}

================================================================================

FILE 56: app\src\main\java\com\example\tumbuhnyata\ui\components\TopBarProfile.kt
Lines: 53 | Size: 1586 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.graphics.Color
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun TopBarProfile(
    title: String,
    step: String,
    iconResId: Int,
    onBackClick: () -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .height(40.dp),
        verticalAlignment = Alignment.CenterVertically,
    ) {
        Image(
            painter = painterResource(id = iconResId),
            contentDescription = "Icon Back",
            modifier = Modifier
                .size(32.dp)
                .clickable { onBackClick() }
        )
        Spacer(modifier = Modifier.width(15.dp))
        Text(
            text = title,
            fontSize = 28.sp,
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.ExtraBold
        )
        Spacer(modifier = Modifier.width(100.dp))
        Text(
            text = step,
            fontSize = 13.sp,
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.Bold,
            color = Color(0xFF686868)
        )
    }
}

================================================================================

FILE 57: app\src\main\java\com\example\tumbuhnyata\ui\components\WorkshopCard.kt
Lines: 99 | Size: 3775 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.data.model.Workshop

@Composable
fun WorkshopCard(
    workshop: Workshop,
    onClick: () -> Unit
) {
    Card(
        modifier = Modifier
            .size(261.dp, 207.dp)
            .clickable(onClick = onClick)
            .border(
                width = 1.dp,
                color = Color(0xFFE2E2E2),
                shape = RoundedCornerShape(10.dp)
            ),
        shape = RoundedCornerShape(10.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column {
            Image(
                painter = painterResource(id = workshop.imageRes),
                contentDescription = "Workshop image",
                contentScale = ContentScale.Crop,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(102.dp)
            )

            Column(modifier = Modifier.padding(12.dp)) {
                Text(
                    text = workshop.title,
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    color = Color(0xFF1E1E1E),
                    fontWeight = FontWeight.Bold,
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )
                Text(
                    text = workshop.speaker,
                    fontSize = 12.sp,
                    fontFamily = PoppinsFontFamily,
                    color = Color(0xFF4B4B4B),
                    fontWeight = FontWeight.SemiBold
                )
                Spacer(modifier = Modifier.height(22.dp))

                Row(
                    horizontalArrangement = Arrangement.SpaceBetween,
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text(
                        text = workshop.date,
                        fontFamily = PoppinsFontFamily,
                        fontSize = 12.sp,
                        color = Color(0xFF4B4B4B)
                    )
                    Box(
                        modifier = Modifier
                            .background(
                                color = if (workshop.isOnline) Color(0xFF4B4B4B) else Color(0xFFE2E2E2),
                                shape = RoundedCornerShape(5.dp)
                            )
                            .padding(horizontal = 8.dp, vertical = 4.dp)
                    ) {
                        Text(
                            text = if (workshop.isOnline) "Online" else "Offline",
                            fontSize = 12.sp,
                            fontFamily = PoppinsFontFamily,
                            color = if (workshop.isOnline) Color(0xFFE2E2E2) else Color(0xFF4B4B4B),
                            fontWeight = FontWeight.Medium
                        )
                    }
                }
            }
        }
    }
}

================================================================================

FILE 58: app\src\main\java\com\example\tumbuhnyata\ui\components\WorkshopListItem.kt
Lines: 113 | Size: 4118 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.runtime.Composable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.data.model.Workshop
import androidx.compose.ui.graphics.Color
import androidx.compose.material3.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun WorkshopListItem(
    workshop: Workshop,
    onClick: () -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .height(155.dp)
            .border(1.dp, Color(0xFFB9B9B9), RoundedCornerShape(10.dp))
            .clickable { onClick() } ,
        shape = RoundedCornerShape(10.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Row(
            modifier = Modifier
                .height(IntrinsicSize.Min)
                .padding(end=12.dp)
        ) {
            Image(
                painter = painterResource(id = workshop.imageRes),
                contentDescription = "Workshop image",
                contentScale = ContentScale.Crop,
                modifier = Modifier
                    .width(140.dp)
                    .fillMaxHeight()
            )

            Spacer(modifier = Modifier.width(12.dp))

            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 12.dp)
            ) {
                Text(
                    text = workshop.title,
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    color = Color(0xFF1E1E1E),
                    fontWeight = FontWeight.Bold,
                    maxLines = 2,
                    overflow = TextOverflow.Ellipsis
                )
                Spacer(modifier = Modifier.height(8.dp))

                Text(
                    text = workshop.speaker,
                    fontSize = 12.sp,
                    fontFamily = PoppinsFontFamily,
                    color = Color(0xFF4B4B4B),
                    fontWeight = FontWeight.SemiBold
                )

                Spacer(modifier = Modifier.weight(1f))

                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 4.dp),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Text(
                        text = workshop.date,
                        fontSize = 12.sp,
                        fontFamily = PoppinsFontFamily,
                        color = Color(0xFF4B4B4B)
                    )

                    Box(
                        modifier = Modifier
                            .background(
                                color = if (workshop.isOnline) Color(0xFF4B4B4B) else Color(0xFFE2E2E2),
                                shape = RoundedCornerShape(5.dp)
                            )
                            .padding(horizontal = 8.dp, vertical = 4.dp)
                    ) {
                        Text(
                            text = if (workshop.isOnline) "Online" else "Offline",
                            fontSize = 12.sp,
                            fontFamily = PoppinsFontFamily,
                            color = if (workshop.isOnline) Color(0xFFE2E2E2) else Color(0xFF4B4B4B),
                            fontWeight = FontWeight.Medium
                        )
                    }
                }
            }
        }
    }
}



================================================================================

FILE 59: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\DashboardScreen.kt
Lines: 229 | Size: 9784 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.collectAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.dashboard.components.KPIItem
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.DashboardViewModel
import com.example.tumbuhnyata.viewmodel.DashboardState

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DashboardScreen(
    navController: NavController,
    viewModel: DashboardViewModel = viewModel()
) {
    val uiState by viewModel.uiState.collectAsState()

    Scaffold(
        containerColor = Color.White,
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = "Dashboard",
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        fontSize = 25.sp,
                        color = Color.Black
                    )
                },
                navigationIcon = {
                    IconButton(
                        onClick = { navController.navigateUp() },
                        modifier = Modifier.padding(start = 4.dp)
                    ) {
                        Box(
                            modifier = Modifier
                                .size(32.dp)
                                .clip(CircleShape)
                                .background(Color(0xFF27361F)),
                            contentAlignment = Alignment.Center
                        ) {
                            Image(
                                painter = painterResource(id = R.drawable.arrow_left),
                                contentDescription = "Back",
                                modifier = Modifier.size(16.dp),
                                contentScale = ContentScale.Fit
                            )
                        }
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = Color.Transparent,
                    titleContentColor = Color.Black,
                    navigationIconContentColor = Color.White
                )
            )
        }
    ) { paddingValues ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            when {
                uiState.isLoading -> {
                    CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))
                }

                uiState.error != null -> {
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(16.dp),
                        verticalArrangement = Arrangement.Center,
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text(
                            text = "Oops! Terjadi Kesalahan", 
                            style = MaterialTheme.typography.titleMedium,
                            textAlign = TextAlign.Center
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = uiState.error ?: "Error tidak diketahui.",
                            style = MaterialTheme.typography.bodyMedium,
                            textAlign = TextAlign.Center
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Button(
                            onClick = { viewModel.loadDashboardItems() },
                            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF27361F))
                        ) {
                            Text("Coba Lagi")
                        }
                    }
                }

                !uiState.isLoading && uiState.error == null && uiState.kpiItems.isEmpty() -> {
                     Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(16.dp),
                        verticalArrangement = Arrangement.Center,
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Image(
                            painter = painterResource(id = R.drawable.ic_carbonfootprint),
                            contentDescription = "Tidak ada data",
                            modifier = Modifier.size(100.dp) 
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Text(
                            text = "Tidak Ada Data KPI",
                            style = MaterialTheme.typography.titleMedium,
                            textAlign = TextAlign.Center
                        )
                         Text(
                            text = "Belum ada data KPI untuk ditampilkan saat ini.",
                            style = MaterialTheme.typography.bodyMedium,
                            textAlign = TextAlign.Center
                        )
                         Spacer(modifier = Modifier.height(16.dp))
                         Button(
                            onClick = { viewModel.loadDashboardItems() },
                            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF27361F))
                        ) {
                            Text("Muat Ulang")
                        }
                    }
                }

                else -> {
                    Column(
                        modifier = Modifier.fillMaxSize()
                    ) {
                        Text(
                            "KPI (Key Performance Indicator)",
                            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),
                            fontWeight = FontWeight(800),
                            fontSize = 18.sp,
                            color = Color(0xFF27361F)
                        )

                        LazyVerticalGrid(
                            columns = GridCells.Fixed(2),
                            contentPadding = PaddingValues(16.dp),
                            horizontalArrangement = Arrangement.spacedBy(16.dp),
                            verticalArrangement = Arrangement.spacedBy(16.dp),
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            items(uiState.kpiItems) { kpiItem ->
                                KPIItem(
                                    title = kpiItem.title,
                                    topIcon = kpiItem.topIcon,
                                    statusText = kpiItem.statusText,
                                    statusPercentageValue = kpiItem.statusPercentageValue,
                                    isUp = kpiItem.isUp,
                                    value = kpiItem.value,
                                    unit = kpiItem.unit,
                                    targetValue = kpiItem.targetValue,
                                    onClick = { navController.navigate(kpiItem.onClickRoute) }
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

//@Preview(showBackground = true, name = "Dashboard Loading")
//@Composable
//fun DashboardScreenPreviewLoading() {
//    val mockViewModel = DashboardViewModel(Application())
//    DashboardScreen(navController = rememberNavController() /*, viewModel = mockViewModel */)
//}

@Preview(showBackground = true, name = "Dashboard Error")
@Composable
fun DashboardScreenPreviewError() {
    DashboardScreen(navController = rememberNavController())
}

@Preview(showBackground = true, name = "Dashboard No Data")
@Composable
fun DashboardScreenPreviewNoData() {
    DashboardScreen(navController = rememberNavController())
}

@Preview(showBackground = true, backgroundColor = 0xFFFFFFFF, name = "Dashboard Loaded Data")
@Composable
fun DashboardScreenPreview() {
    DashboardScreen(navController = rememberNavController())
}


================================================================================

FILE 60: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\components\KPIItem.kt
Lines: 227 | Size: 8159 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.components

import androidx.annotation.DrawableRes
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowDownward
import androidx.compose.material.icons.filled.ArrowUpward
import androidx.compose.material.icons.filled.Info
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun KPIItem(
    modifier: Modifier = Modifier,
    title: String,
    @DrawableRes topIcon: Int,
    statusText: String,
    statusPercentageValue: String,
    isUp: Boolean,
    value: String,
    unit: String,
    targetLabel: String = "Target:",
    targetValue: String,
    contentColor: Color = Color.White,
    mainValueColor: Color = Color(0xFFE6FD4B),
    statusBackgroundColor: Color = Color.White.copy(alpha = 0.15f),
    arrowDownColor: Color = Color.Red,
    onClick: () -> Unit
) {
    val gradientBrush = Brush.verticalGradient(
        colors = listOf(Color(0xFF5A7C47), Color(0xFF415A33))
    )
    val cardShape = RoundedCornerShape(10.dp)

    val dynamicStatusIndicatorColor = if (statusText.trim() == "100% target") {
        Color(0xFF8BC34A)
    } else {
        Color(0xFFE2C731)
    }

    val arrowIcon = if (isUp) Icons.Filled.ArrowUpward else Icons.Filled.ArrowDownward
    val arrowColor = if (isUp) contentColor else arrowDownColor

    Card(
        modifier = modifier
            .size(width = 169.dp, height = 198.dp)
            .background(brush = gradientBrush, shape = cardShape)
            .clickable(onClick = onClick),
        shape = cardShape,
        colors = CardDefaults.cardColors(
            containerColor = Color.Transparent,
            contentColor = contentColor
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)
    ) {
        Column(
            modifier = Modifier
                .padding(start = 14.dp, top = 14.dp, end = 14.dp, bottom = 14.dp)
                .fillMaxHeight(),
            verticalArrangement = Arrangement.spacedBy(10.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = title,
                    fontSize = 10.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold
                )
                Spacer(Modifier.weight(1f))
                Icon(
                    painter = painterResource(id = topIcon),
                    contentDescription = "$title icon",
                    modifier = Modifier.size(14.dp)
                )
            }

            HorizontalDivider(
                thickness = 1.dp,
                color = contentColor.copy(alpha = 0.5f)
            )

            Box(
                modifier = Modifier.fillMaxWidth(),
                contentAlignment = Alignment.Center
            ) {
                Surface(
                    modifier = Modifier.height(25.dp),
                    shape = RoundedCornerShape(50),
                    color = statusBackgroundColor,
                    contentColor = contentColor
                ) {
                    Row(
                        modifier = Modifier.padding(horizontal = 12.dp),
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(6.dp)
                    ) {
                        Box(
                            modifier = Modifier
                                .size(8.dp)
                                .background(dynamicStatusIndicatorColor, CircleShape)
                        )
                        Text(
                            text = statusText,
                            fontFamily = PoppinsFontFamily,
                            fontSize = 10.sp
                        )
                        Spacer(Modifier.weight(1f))
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.spacedBy(2.dp)
                        ) {
                            Icon(
                                imageVector = arrowIcon,
                                contentDescription = if (isUp) "Arrow Up" else "Arrow Down",
                                modifier = Modifier.size(12.dp),
                                tint = arrowColor
                            )
                            Text(
                                text = statusPercentageValue,
                                fontFamily = PoppinsFontFamily,
                                fontSize = 10.sp,
                                color = contentColor
                            )
                        }
                    }
                }
            }

            Spacer(Modifier.height(8.dp))

            Row(
                verticalAlignment = Alignment.Bottom
            ) {
                Text(
                    text = value,
                    fontSize = 25.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    lineHeight = 26.sp,
                    color = mainValueColor
                )
                Spacer(Modifier.width(4.dp))
                Text(
                    text = unit,
                    fontFamily = PoppinsFontFamily,
                    fontSize = 10.sp,
                    modifier = Modifier.padding(bottom = 2.dp)
                )
            }

            Column {
                Text(
                    text = targetLabel,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    fontSize = 12.sp
                )
                Text(
                    text = targetValue,
                    fontFamily = PoppinsFontFamily,
                    fontSize = 10.sp
                )
            }
        }
    }
}

@Preview(showBackground = true, backgroundColor = 0xFFEEEEEE, name = "KPI 100% Target")
@Composable
private fun KPIItemPreviewGreen() {
    KPIItem(
        title = "Carbon Footprint",
        topIcon = android.R.drawable.ic_dialog_info,
        statusText = "100% target",
        statusPercentageValue = "5%",
        isUp = true,
        value = "12.300",
        unit = "kg CO₂e",
        targetValue = "10.000 kg CO₂e",
        onClick = { }
    )
}

@Preview(showBackground = true, backgroundColor = 0xFFEEEEEE, name = "KPI <100% Target Down")
@Composable
private fun KPIItemPreviewYellowRed() {
    KPIItem(
        title = "Water Usage",
        topIcon = android.R.drawable.ic_dialog_info,
        statusText = "95% target",
        statusPercentageValue = "2%",
        isUp = false,
        value = "8.500",
        unit = "Liters",
        targetValue = "8.000 Liters",
        onClick = { }
    )
}


================================================================================

FILE 61: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\KPIDetailScreen.kt
Lines: 463 | Size: 19045 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.kpi

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.KeyboardArrowLeft
import androidx.compose.material.icons.automirrored.filled.KeyboardArrowRight
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.*
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.text.*
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import androidx.compose.runtime.*
import com.example.tumbuhnyata.ui.dashboard.kpi.components.KpiFilterSwitch
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.compose.foundation.Image
import androidx.compose.foundation.border
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.ui.draw.clip
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import kotlin.math.roundToInt
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.remember
import com.patrykandpatrick.vico.core.cartesian.data.CartesianChartModelProducer
import com.patrykandpatrick.vico.core.cartesian.data.lineSeries
import com.patrykandpatrick.vico.core.cartesian.data.columnSeries
import com.example.tumbuhnyata.ui.dashboard.kpi.components.VicoLineChart
import com.example.tumbuhnyata.ui.dashboard.kpi.components.VicoBarChart
import kotlinx.coroutines.runBlocking
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.compose.runtime.getValue
import androidx.compose.runtime.collectAsState

data class KpiDetails(
    val id: String,
    val title: String,
    val unit: String,
    val yearlyChartData: List<Float>,
    val fiveYearChartData: List<Float>,
    val averageValue: String,
    val minValue: String,
    val analysis: String
)

fun getKpiDetails(kpiId: String): KpiDetails {
    return when (kpiId) {
        "carbon_footprint" -> KpiDetails(
            id = kpiId,
            title = "Carbon Footprint",
            unit = "kg CO₂e",
            yearlyChartData = listOf(65f, 75f, 85f, 72f, 93f, 80f, 100f, 110f, 105f, 115f, 110f, 130f),
            fiveYearChartData = listOf(850f, 920f, 1050f, 980f, 1230f),
            averageValue = "139",
            minValue = "68",
            analysis = "Jejak karbon meningkat 8% minggu ini, seiring distribusi logistik program bantuan sosial. Pertimbangkan opsi pengiriman ramah lingkungan agar dampak sosial tetap tinggi tanpa menambah emisi."
        )
        "energy_usage" -> KpiDetails(
            id = kpiId,
            title = "Konsumsi Energi",
            unit = "kWh",
            yearlyChartData = listOf(245f, 275f, 305f, 290f, 320f, 330f, 290f, 310f, 340f, 320f, 350f, 365f),
            fiveYearChartData = listOf(3200f, 3450f, 3600f, 3750f, 3890f),
            averageValue = "321",
            minValue = "245",
            analysis = "Konsumsi energi meningkat 5% dari bulan lalu, sebagian besar terjadi pada jam operasional tinggi. Pertimbangkan pengaturan suhu AC dan penggunaan peralatan hemat energi."
        )
        "water_usage" -> KpiDetails(
            id = kpiId,
            title = "Penggunaan Air",
            unit = "m³",
            yearlyChartData = listOf(42f, 48f, 53f, 45f, 50f, 55f, 47f, 49f, 52f, 50f, 54f, 57f),
            fiveYearChartData = listOf(520f, 550f, 590f, 570f, 610f),
            averageValue = "50.2",
            minValue = "42",
            analysis = "Penggunaan air relatif stabil dengan peningkatan kecil 3% dalam tiga bulan terakhir. Implementasi sistem pengolahan air daur ulang akan membantu mengurangi konsumsi keseluruhan."
        )
        "biodiversity" -> KpiDetails(
            id = kpiId,
            title = "Pohon Tertanam",
            unit = "pohon",
            yearlyChartData = listOf(15f, 20f, 30f, 25f, 35f, 50f, 45f, 40f, 60f, 55f, 65f, 70f),
            fiveYearChartData = listOf(350f, 420f, 510f, 580f, 630f),
            averageValue = "42.5",
            minValue = "15",
            analysis = "Program penanaman pohon menunjukkan peningkatan signifikan sebesar 25% dibandingkan tahun lalu. Fokus pada jenis pohon lokal telah meningkatkan keberhasilan pertumbuhan."
        )
        "waste" -> KpiDetails(
            id = kpiId,
            title = "Pengelolaan Sampah",
            unit = "kg",
            yearlyChartData = listOf(320f, 310f, 290f, 300f, 270f, 260f, 240f, 230f, 210f, 220f, 200f, 190f),
            fiveYearChartData = listOf(3800f, 3500f, 3200f, 2800f, 2450f),
            averageValue = "253",
            minValue = "190",
            analysis = "Volume sampah terus menurun berkat program pemilahan dan daur ulang. Pengurangan 12% dalam tiga bulan terakhir menunjukkan efektivitas program."
        )
        "sustainability" -> KpiDetails(
            id = kpiId,
            title = "Penerima Manfaat",
            unit = "orang",
            yearlyChartData = listOf(120f, 150f, 180f, 210f, 250f, 280f, 310f, 340f, 370f, 400f, 430f, 450f),
            fiveYearChartData = listOf(1500f, 2200f, 2900f, 3600f, 4300f),
            averageValue = "290",
            minValue = "120",
            analysis = "Jumlah penerima manfaat meningkat secara konsisten dengan pertumbuhan 15% per bulan. Program pemberdayaan masyarakat menunjukkan dampak positif berkelanjutan."
        )
        "energy_consumption" -> getKpiDetails("energy_usage")
        "trees_planted" -> getKpiDetails("biodiversity")
        "waste_management" -> getKpiDetails("waste")
        "benefit_receivers" -> getKpiDetails("sustainability")
        else -> KpiDetails(
            id = kpiId,
            title = "Detail KPI",
            unit = "unit",
            yearlyChartData = List(12) { 50f + (it * 5f) },
            fiveYearChartData = List(5) { 500f + (it * 100f) },
            averageValue = "100",
            minValue = "50",
            analysis = "Data KPI belum tersedia secara lengkap. Silakan pilih KPI spesifik untuk melihat analisis detailnya."
        )
    }
}

@OptIn(ExperimentalMaterial3Api::class, ExperimentalTextApi::class)
@Composable
fun KpiDetailScreen(
    navController: NavController,
    kpiId: String,
    viewModel: KPIDetailViewModel = viewModel()
) {
    val uiState by viewModel.uiState.collectAsState()
    var selectedYear by remember { mutableStateOf(2024) } // Start with 2024 since that's where our data is

    // Initial load and reload when kpiId or selectedYear changes
    LaunchedEffect(kpiId, selectedYear) {
        println("KpiDetailScreen: Loading data for kpiId=$kpiId, year=$selectedYear")
        viewModel.loadKPIDetails(kpiId, companyId = null, year = selectedYear)
    }

    Scaffold(
        containerColor = Color.White,
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = uiState.kpiDetails?.title ?: "KPI Detail",
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        fontSize = 20.sp,
                    )
                },
                navigationIcon = {
                    IconButton(
                        onClick = { navController.navigateUp() },
                        modifier = Modifier.padding(start = 4.dp)
                    ) {
                        Box(
                            modifier = Modifier
                                .size(32.dp)
                                .clip(CircleShape)
                                .background(Color(0xFF27361F)),
                            contentAlignment = Alignment.Center
                        ) {
                            Image(
                                painter = painterResource(id = R.drawable.arrow_left),
                                contentDescription = "Back",
                                modifier = Modifier.size(16.dp),
                                contentScale = ContentScale.Fit
                            )
                        }
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = Color.Transparent,
                    titleContentColor = MaterialTheme.colorScheme.onSurface
                )
            )
        }
    ) { paddingValues ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            when {
                uiState.isLoading -> {
                    CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))
                }

                uiState.error != null && uiState.kpiDetails == null -> {
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(16.dp),
                        verticalArrangement = Arrangement.Center,
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text(
                            text = "Oops! Terjadi Kesalahan",
                            style = MaterialTheme.typography.titleMedium,
                            textAlign = TextAlign.Center
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = uiState.error ?: "Error tidak diketahui.",
                            style = MaterialTheme.typography.bodyMedium,
                            textAlign = TextAlign.Center
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Button(
                            onClick = { viewModel.retryLoadKPIDetails(kpiId) },
                            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF27361F))
                        ) {
                            Text("Coba Lagi")
                        }
                    }
                }

                uiState.kpiDetails != null -> {
                    KpiDetailContent(
                        navController = navController,
                        kpiDetails = uiState.kpiDetails!!,
                        selectedYear = selectedYear,
                        onYearChange = { newYear -> selectedYear = newYear },
                        showErrorSnackbar = uiState.error != null, // Show snackbar if there's error but we have fallback data
                        onRetry = { viewModel.retryLoadKPIDetails(kpiId, companyId = null, year = selectedYear) }
                    )
                }

                else -> {
                    Text(
                        text = "Data tidak tersedia",
                        modifier = Modifier.align(Alignment.Center),
                        style = MaterialTheme.typography.bodyMedium
                    )
                }
            }
        }
    }
}

@Composable
private fun KpiDetailContent(
    navController: NavController,
    kpiDetails: KpiDetails,
    selectedYear: Int,
    onYearChange: (Int) -> Unit,
    showErrorSnackbar: Boolean = false,
    onRetry: () -> Unit = {}
) {
    var selectedFilter by remember { mutableStateOf("Tahunan") }
    val filterOptions = listOf("Tahunan", "5 Tahun")

    val lineModelProducer = remember { CartesianChartModelProducer() }
    val columnModelProducer = remember { CartesianChartModelProducer() }

    LaunchedEffect(kpiDetails.yearlyChartData, selectedFilter) {
        if (selectedFilter == "Tahunan") {
            println("Updating Line Chart data: ${kpiDetails.yearlyChartData}")
            lineModelProducer.runTransaction {
                lineSeries {
                    series(kpiDetails.yearlyChartData.map { it.toDouble() })
                }
            }
        }
    }

    LaunchedEffect(kpiDetails.fiveYearChartData, selectedFilter) {
        if (selectedFilter == "5 Tahun") {
            println("Updating Column Chart data: ${kpiDetails.fiveYearChartData}")
            columnModelProducer.runTransaction {
                columnSeries {
                    series(kpiDetails.fiveYearChartData.map { it.toDouble() })
                }
            }
        }
    }

    Column(
        modifier = Modifier
            .padding(horizontal = 16.dp)
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
    ) {
        Spacer(modifier = Modifier.height(16.dp))

        // Show error snackbar if there's error but we have fallback data
        if (showErrorSnackbar) {
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 8.dp),
                colors = CardDefaults.cardColors(containerColor = Color(0xFFFFF3CD))
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(12.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        Icons.Default.Warning,
                        contentDescription = "Warning",
                        tint = Color(0xFF856404),
                        modifier = Modifier.size(20.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "Menggunakan data template. Tap untuk coba lagi.",
                        style = MaterialTheme.typography.bodySmall,
                        color = Color(0xFF856404),
                        modifier = Modifier
                            .weight(1f)
                            .clickable { onRetry() }
                    )
                }
            }
        }

        KpiFilterSwitch(
            options = filterOptions,
            selectedOption = selectedFilter,
            onOptionSelected = { selectedFilter = it },
            selectedBackgroundColor = Color(0xFF27361F),
            unselectedContentColor = Color(0xFF27361F),
            unselectedBackgroundColor = Color(0xFFe9ebe9)
        )

        Spacer(modifier = Modifier.height(16.dp))

        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.Center
        ) {
            IconButton(onClick = { onYearChange(selectedYear - 1) }) {
                Icon(Icons.AutoMirrored.Filled.KeyboardArrowLeft, contentDescription = "Previous Year")
            }
            Text(
                text = if (selectedFilter == "Tahunan") selectedYear.toString() else "5 Tahun Terakhir",
                fontSize = 16.sp,
                fontWeight = FontWeight.Medium,
                modifier = Modifier.padding(horizontal = 16.dp)
            )
            IconButton(onClick = { onYearChange(selectedYear + 1) }, enabled = selectedFilter == "Tahunan") {
                Icon(Icons.AutoMirrored.Filled.KeyboardArrowRight, contentDescription = "Next Year")
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = if (selectedFilter == "Tahunan") "Tren ${kpiDetails.title} Tahunan" else "Tren ${kpiDetails.title} 5 Tahun",
            style = MaterialTheme.typography.titleMedium,
            modifier = Modifier.padding(bottom = 8.dp)
        )

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(200.dp)
        ) {
            if (selectedFilter == "Tahunan") {
                VicoLineChart(
                    modelProducer = lineModelProducer,
                    modifier = Modifier.fillMaxSize()
                )
            } else {
                VicoBarChart(
                    modelProducer = columnModelProducer,
                    modifier = Modifier.fillMaxSize()
                )
            }
        }

        Spacer(modifier = Modifier.height(24.dp))

        Button(
            onClick = { navController.navigate("upload_data") },
            modifier = Modifier
                .fillMaxWidth()
                .height(48.dp)
                .border(1.dp, Color.Gray, RoundedCornerShape(50)),
            colors = ButtonDefaults.buttonColors(
                containerColor = Color.White,
                contentColor = Color(0xFF27361F),
                disabledContentColor = Color.Gray,
                disabledContainerColor = Color.Transparent
            ),
            shape = RoundedCornerShape(50)
        ) {
            Box {
                Icon(
                    painter = painterResource(id = R.drawable.ic_tambahdata),
                    contentDescription = "Add Data",
                    modifier = Modifier.size(ButtonDefaults.IconSize),
                    tint = Color.Unspecified
                )
            }
            Spacer(modifier = Modifier.size(ButtonDefaults.IconSpacing))
            Text("Tambah Data")
        }

        Spacer(modifier = Modifier.height(24.dp))

        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            KpiStatCapsule(
                modifier = Modifier.weight(1f),
                icon = painterResource(id = R.drawable.ic_tachometer_average),
                value = kpiDetails.averageValue,
                unit = kpiDetails.unit,
                label = "Rata-rata"
            )
            KpiStatCapsule(
                modifier = Modifier.weight(1f),
                icon = painterResource(id = R.drawable.angle_double_small_down),
                value = kpiDetails.minValue,
                unit = kpiDetails.unit,
                label = "Terkecil"
            )
        }

        Spacer(modifier = Modifier.height(24.dp))

        Text(
            text = "Analisis",
            style = MaterialTheme.typography.titleMedium,
            modifier = Modifier.padding(bottom = 8.dp)
        )
        Text(
            text = kpiDetails.analysis,
            style = MaterialTheme.typography.bodyMedium,
            modifier = Modifier.padding(bottom = 16.dp)
        )
    }
}

@Preview(showBackground = true, backgroundColor = 0xFFFFFFFF)
@Composable
private fun KpiDetailScreenPreview() {
    KpiDetailScreen(
        navController = rememberNavController(),
        kpiId = "carbon_footprint"
    )
}


================================================================================

FILE 62: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\KPIDetailViewModel.kt
Lines: 80 | Size: 3519 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.kpi

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.api.DashboardApiService
import com.example.tumbuhnyata.data.local.AppDatabase
import com.example.tumbuhnyata.data.repository.DashboardRepository
import com.example.tumbuhnyata.data.repository.Resource
import com.example.tumbuhnyata.data.network.RetrofitInstance
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.launch

// Data class sesuai struktur KpiDetails di KpiDetailScreen
data class KPIDetailState(
    val kpiDetails: KpiDetails? = null,
    val isLoading: Boolean = false,
    val error: String? = null
)

class KPIDetailViewModel(application: Application) : AndroidViewModel(application) {
    private val _uiState = MutableStateFlow(KPIDetailState(isLoading = true))
    val uiState: StateFlow<KPIDetailState> = _uiState.asStateFlow()

    // Manual DI untuk Repository (sama seperti DashboardViewModel)
    private val dashboardRepository: DashboardRepository

    init {
        // Inisialisasi manual repository
        val dashboardApi = RetrofitInstance.dashboardApi
        val dashboardDao = AppDatabase.getDatabase(application).dashboardDao()
        dashboardRepository = DashboardRepository(dashboardApi, dashboardDao, application.applicationContext)
    }

    fun loadKPIDetails(kpiId: String, companyId: Int? = null, year: Int? = null) {
        viewModelScope.launch {
            // Set default year to current year if not provided
            val currentYear = year ?: java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)
            
            // For now, we can use a default company_id if needed
            // TODO: Get actual company_id from user session/preferences
            val actualCompanyId = companyId // Keep as null for now, or set default if needed
            
            println("KPIDetailViewModel: Loading KPI details for kpiId=$kpiId, companyId=$actualCompanyId, year=$currentYear")
            
            dashboardRepository.getKpiDetail(kpiId, actualCompanyId, currentYear)
                .collect { resource ->
                    when (resource) {
                        is Resource.Loading -> {
                            _uiState.value = _uiState.value.copy(
                                isLoading = true,
                                error = null
                            )
                        }
                        is Resource.Success -> {
                            _uiState.value = KPIDetailState(
                                isLoading = false,
                                kpiDetails = resource.data,
                                error = null
                            )
                        }
                        is Resource.Error -> {
                            _uiState.value = KPIDetailState(
                                isLoading = false,
                                kpiDetails = resource.data, // Might have fallback dummy data
                                error = resource.message
                            )
                        }
                    }
                }
        }
    }

    fun retryLoadKPIDetails(kpiId: String, companyId: Int? = null, year: Int? = null) {
        loadKPIDetails(kpiId, companyId, year)
    }
} 

================================================================================

FILE 63: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\components\KPIBarChart.kt
Lines: 141 | Size: 6037 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.kpi.components

// Adapted from Vico Compose sample code.
// Original copyright © 2025 Patryk Goworowski and Patrick Michalik.
// Licensed under Apache 2.0: https://www.apache.org/licenses/LICENSE-2.0

import android.text.Layout
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.patrykandpatrick.vico.compose.cartesian.CartesianChartHost
import com.patrykandpatrick.vico.compose.cartesian.axis.rememberAxisGuidelineComponent
import com.patrykandpatrick.vico.compose.cartesian.axis.rememberBottom
import com.patrykandpatrick.vico.compose.cartesian.axis.rememberStart
import com.patrykandpatrick.vico.compose.cartesian.layer.rememberColumnCartesianLayer
import com.patrykandpatrick.vico.compose.cartesian.marker.rememberDefaultCartesianMarker
import com.patrykandpatrick.vico.compose.cartesian.rememberCartesianChart
import com.patrykandpatrick.vico.compose.common.component.fixed
import com.patrykandpatrick.vico.compose.common.component.rememberShapeComponent
import com.patrykandpatrick.vico.compose.common.component.rememberTextComponent
import com.patrykandpatrick.vico.compose.common.fill
import com.patrykandpatrick.vico.compose.common.insets
import com.patrykandpatrick.vico.compose.common.shape.markerCorneredShape
import com.patrykandpatrick.vico.core.cartesian.axis.HorizontalAxis
import com.patrykandpatrick.vico.core.cartesian.axis.VerticalAxis
import com.patrykandpatrick.vico.core.cartesian.data.CartesianChartModelProducer
import com.patrykandpatrick.vico.core.cartesian.data.columnSeries
import com.patrykandpatrick.vico.core.cartesian.layer.ColumnCartesianLayer
import com.patrykandpatrick.vico.core.cartesian.marker.CartesianMarker
import com.patrykandpatrick.vico.core.cartesian.marker.ColumnCartesianLayerMarkerTarget
import com.patrykandpatrick.vico.core.cartesian.marker.DefaultCartesianMarker
import com.patrykandpatrick.vico.core.common.LayeredComponent
import com.patrykandpatrick.vico.core.common.component.ShapeComponent
import com.patrykandpatrick.vico.core.common.component.TextComponent
import com.patrykandpatrick.vico.core.common.shape.CorneredShape
import kotlinx.coroutines.runBlocking
import kotlin.math.roundToInt

@Composable
fun VicoBarChart(
    modelProducer: CartesianChartModelProducer,
    modifier: Modifier = Modifier,
) {
    val column = rememberColumnCartesianLayer(
        columnProvider = ColumnCartesianLayer.ColumnProvider.series(
            com.patrykandpatrick.vico.compose.common.component.rememberLineComponent(
                fill = fill(Color(0xFF27361F)),
                thickness = 8.dp
            )
        )
    )

    CartesianChartHost(
        chart =
            rememberCartesianChart(
                column,
                startAxis = VerticalAxis.rememberStart(),
                bottomAxis = HorizontalAxis.rememberBottom(),
                marker = rememberBarChartMarker()
            ),
        modelProducer = modelProducer,
        modifier = modifier,
    )
}

@Composable
internal fun rememberBarChartMarker(
    valueFormatter: DefaultCartesianMarker.ValueFormatter = DefaultCartesianMarker.ValueFormatter { _, targets ->
        val target = targets.filterIsInstance<ColumnCartesianLayerMarkerTarget>().firstOrNull()
        val value = target?.columns?.firstOrNull()?.entry?.y ?: 0f
        val valueDouble = value.toDouble()
        valueDouble.roundToInt().toString()
    },
    showIndicator: Boolean = true,
): CartesianMarker {
    val labelBackgroundShape = markerCorneredShape(CorneredShape.Corner.Rounded)
    val labelBackground =
        rememberShapeComponent(
            fill = fill(MaterialTheme.colorScheme.background),
            shape = labelBackgroundShape,
            strokeThickness = 1.dp,
            strokeFill = fill(MaterialTheme.colorScheme.outline),
        )
    val label =
        rememberTextComponent(
            color = MaterialTheme.colorScheme.onSurface,
            textAlignment = Layout.Alignment.ALIGN_CENTER,
            padding = insets(8.dp, 4.dp),
            background = labelBackground,
            minWidth = TextComponent.MinWidth.fixed(40.dp),
        )
    val indicatorFrontComponent =
        rememberShapeComponent(fill(MaterialTheme.colorScheme.surface), CorneredShape.Pill)
    val guideline = rememberAxisGuidelineComponent()

    return rememberDefaultCartesianMarker(
        label = label,
        valueFormatter = valueFormatter,
        indicator =
            if (showIndicator) {
                { color ->
                    LayeredComponent(
                        back = ShapeComponent(fill(color.copy(alpha = 0.15f)), CorneredShape.Pill),
                        front =
                            LayeredComponent(
                                back = ShapeComponent(fill = fill(color), shape = CorneredShape.Pill),
                                front = indicatorFrontComponent,
                                padding = insets(5.dp),
                            ),
                        padding = insets(10.dp),
                    )
                }
            } else {
                null
            },
        indicatorSize = 36.dp,
        guideline = guideline,
    )
}


@Preview(showBackground = true, backgroundColor = 0xFFFFFFFF)
@Composable
private fun VicoBarChartPreview() {
    val modelProducer = remember { CartesianChartModelProducer() }
    runBlocking {
        modelProducer.runTransaction {
            columnSeries { series(500f, 600f, 750f, 680f, 820f) }
        }
    }
    Box(modifier = Modifier.height(200.dp).fillMaxWidth()) {
        VicoBarChart(modelProducer = modelProducer)
    }
}


================================================================================

FILE 64: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\components\KPILineChart.kt
Lines: 133 | Size: 5580 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.kpi.components

// Adapted from Vico Compose sample code.
// Original copyright © 2025 Patryk Goworowski and Patrick Michalik.
// Licensed under Apache 2.0: https://www.apache.org/licenses/LICENSE-2.0


import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.patrykandpatrick.vico.compose.cartesian.CartesianChartHost
import com.patrykandpatrick.vico.compose.cartesian.* 
import com.patrykandpatrick.vico.compose.cartesian.axis.rememberBottom
import com.patrykandpatrick.vico.compose.cartesian.axis.rememberStart
import com.patrykandpatrick.vico.compose.cartesian.layer.rememberLine
import com.patrykandpatrick.vico.compose.cartesian.layer.rememberLineCartesianLayer
import com.patrykandpatrick.vico.compose.common.fill
import com.patrykandpatrick.vico.core.cartesian.axis.HorizontalAxis
import com.patrykandpatrick.vico.core.cartesian.axis.VerticalAxis
import com.patrykandpatrick.vico.core.cartesian.data.CartesianChartModelProducer
import com.patrykandpatrick.vico.core.cartesian.data.lineSeries
import com.patrykandpatrick.vico.core.cartesian.layer.LineCartesianLayer
import kotlinx.coroutines.runBlocking
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import android.text.Layout
import androidx.compose.material3.MaterialTheme
import com.patrykandpatrick.vico.compose.cartesian.axis.rememberAxisGuidelineComponent
import com.patrykandpatrick.vico.compose.cartesian.marker.rememberDefaultCartesianMarker
import com.patrykandpatrick.vico.compose.common.component.fixed
import com.patrykandpatrick.vico.compose.common.component.rememberShapeComponent
import com.patrykandpatrick.vico.compose.common.component.rememberTextComponent
import com.patrykandpatrick.vico.compose.common.insets
import com.patrykandpatrick.vico.compose.common.shape.markerCorneredShape
import com.patrykandpatrick.vico.core.cartesian.marker.CartesianMarker
import com.patrykandpatrick.vico.core.cartesian.marker.DefaultCartesianMarker
import com.patrykandpatrick.vico.core.common.LayeredComponent
import com.patrykandpatrick.vico.core.common.component.ShapeComponent
import com.patrykandpatrick.vico.core.common.component.TextComponent
import com.patrykandpatrick.vico.core.common.shape.CorneredShape

@Composable
internal fun VicoLineChart(
    modelProducer: CartesianChartModelProducer,
    modifier: Modifier = Modifier,
) {
    val line = LineCartesianLayer.rememberLine(
        fill = LineCartesianLayer.LineFill.single(fill(Color(0xFF27361F))),
        areaFill = null
    )

    CartesianChartHost(
        chart = rememberCartesianChart(
            rememberLineCartesianLayer(
                lineProvider = LineCartesianLayer.LineProvider.series(line)
            ),
            startAxis = VerticalAxis.rememberStart(),
            bottomAxis = HorizontalAxis.rememberBottom(),
            marker = rememberMarker()
        ),
        modelProducer = modelProducer,
        modifier = modifier
    )
}

@Preview(showBackground = true)
@Composable
private fun VicoLineChartPreview() {
    val modelProducer = remember { CartesianChartModelProducer() }
    runBlocking {
        modelProducer.runTransaction {
            lineSeries { series(13, 8, 7, 12, 0, 1, 15, 14, 0, 11, 6, 12, 0, 11, 12, 11) }
        }
    }
    Box(modifier = Modifier.height(200.dp).fillMaxWidth()) {
        VicoLineChart(modelProducer = modelProducer)
    }
}

@Composable
internal fun rememberMarker(
    valueFormatter: DefaultCartesianMarker.ValueFormatter =
        DefaultCartesianMarker.ValueFormatter.default(),
    showIndicator: Boolean = true,
): CartesianMarker {
    val labelBackgroundShape = markerCorneredShape(CorneredShape.Corner.Rounded)
    val labelBackground =
        rememberShapeComponent(
            fill = fill(MaterialTheme.colorScheme.background),
            shape = labelBackgroundShape,
            strokeThickness = 1.dp,
            strokeFill = fill(MaterialTheme.colorScheme.outline),
        )
    val label =
        rememberTextComponent(
            color = MaterialTheme.colorScheme.onSurface,
            textAlignment = Layout.Alignment.ALIGN_CENTER,
            padding = insets(8.dp, 4.dp),
            background = labelBackground,
            minWidth = TextComponent.MinWidth.fixed(40.dp),
        )
    val indicatorFrontComponent =
        rememberShapeComponent(fill(MaterialTheme.colorScheme.surface), CorneredShape.Pill)
    val guideline = rememberAxisGuidelineComponent()
    return rememberDefaultCartesianMarker(
        label = label,
        valueFormatter = valueFormatter,
        indicator =
        if (showIndicator) {
            { color ->
                LayeredComponent(
                    back = ShapeComponent(fill(color.copy(alpha = 0.15f)), CorneredShape.Pill),
                    front =
                    LayeredComponent(
                        back = ShapeComponent(fill = fill(color), shape = CorneredShape.Pill),
                        front = indicatorFrontComponent,
                        padding = insets(5.dp),
                    ),
                    padding = insets(10.dp),
                )
            }
        } else {
            null
        },
        indicatorSize = 36.dp,
        guideline = guideline,
    )
}

================================================================================

FILE 65: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\components\KpiFilterSwitch.kt
Lines: 75 | Size: 2678 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.kpi.components

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun KpiFilterSwitch(
    modifier: Modifier = Modifier,
    options: List<String>,
    selectedOption: String,
    onOptionSelected: (String) -> Unit,
    selectedBackgroundColor: Color = MaterialTheme.colorScheme.primary,
    selectedContentColor: Color = MaterialTheme.colorScheme.onPrimary,
    unselectedBackgroundColor: Color = MaterialTheme.colorScheme.surfaceVariant,
    unselectedContentColor: Color = MaterialTheme.colorScheme.onSurfaceVariant
) {
    Surface(
        modifier = modifier,
        shape = RoundedCornerShape(50),
        color = unselectedBackgroundColor,
        tonalElevation = 2.dp
    ) {
        Row(
            modifier = Modifier
                .padding(4.dp)
                .fillMaxWidth()
        ) {
            options.forEach { option ->
                val isSelected = option == selectedOption
                Button(
                    onClick = { onOptionSelected(option) },
                    modifier = Modifier
                        .weight(1f)
                        .height(36.dp),
                    shape = RoundedCornerShape(50),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = if (isSelected) selectedBackgroundColor else Color.Transparent,
                        contentColor = if (isSelected) selectedContentColor else unselectedContentColor
                    ),
                    elevation = null,
                    contentPadding = PaddingValues(horizontal = 16.dp)
                ) {
                    Text(
                        text = option,
                        fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal,
                        fontSize = 12.sp
                    )
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
private fun KpiFilterSwitchPreview() {
    var selected by remember { mutableStateOf("Tahunan") }
    val options = listOf("Tahunan", "5 Tahun")

    Column(modifier = Modifier.padding(16.dp)) {
        KpiFilterSwitch(
            options = options,
            selectedOption = selected,
            onOptionSelected = { selected = it }
        )
    }
}


================================================================================

FILE 66: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\components\KpiStatCapsule.kt
Lines: 126 | Size: 4462 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.kpi

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowDownward
import androidx.compose.material.icons.filled.Info
import androidx.compose.material.icons.filled.Speed
import androidx.compose.material.icons.filled.TrendingUp
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ColorFilter
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R

@Composable
fun KpiStatCapsule(
    modifier: Modifier = Modifier,
    icon: Painter,
    value: String,
    unit: String,
    label: String,
    containerColor: Color = Color.White,
    contentColor: Color = Color(0xFF27361F),
    iconBackgroundColor: Color = Color(0xFF27361F),
    iconColor: Color = Color.White
) {
    Card(
        modifier = modifier,
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(
            containerColor = containerColor,
            contentColor = contentColor
        ),
        border = BorderStroke(1.dp, Color(0xFFE2E2E2)),
        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 12.dp, vertical = 10.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(6.dp),

        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Box(
                    modifier = Modifier
                        .size(24.dp)
                        .clip(RoundedCornerShape(6.dp))
                        .background(iconBackgroundColor)
                        .padding(4.dp),
                    contentAlignment = Alignment.Center
                ) {
                    Image(
                        painter = icon,
                        contentDescription = null,
                        modifier = Modifier.size(20.dp),
                        contentScale = ContentScale.Fit,
                        colorFilter = ColorFilter.tint(iconColor)
                    )
                }
                Row(verticalAlignment = Alignment.Bottom) {
                    Text(
                        text = value,
                        fontWeight = FontWeight.Bold,
                        fontSize = 20.sp
                    )
                    Spacer(Modifier.width(4.dp))
                    Text(
                        text = unit,
                        fontSize = 10.sp,
                        modifier = Modifier.padding(bottom = 2.dp)
                    )
                }
            }
            Text(
                text = label,
                fontSize = 12.sp,
                modifier = Modifier.padding(start = 4.dp)
            )
        }
    }
}

@Preview(showBackground = true, backgroundColor = 0xFFFFFFFF)
@Composable
private fun KpiStatCapsulePreview() {
    val rataIcon = painterResource(id = R.drawable.ic_tachometer_average)
    val terkecilIcon = painterResource(id = R.drawable.angle_double_small_down)
    Row(
        modifier = Modifier.padding(16.dp).fillMaxWidth(),
        horizontalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        KpiStatCapsule(
            modifier = Modifier.weight(1f),
            icon = rataIcon,
            value = "139",
            unit = "kg CO₂e",
            label = "Rata-rata"
        )
        KpiStatCapsule(
            modifier = Modifier.weight(1f),
            icon = terkecilIcon,
            value = "68",
            unit = "kg CO₂e",
            label = "Terkecil"
        )
    }
}


================================================================================

FILE 67: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\upload\UploadDataScreen.kt
Lines: 309 | Size: 11696 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.upload

import android.net.Uri
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.util.Resource
import com.example.tumbuhnyata.ui.dashboard.upload.components.DocumentUploadItem
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.UploadViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun UploadDataScreen(
    navController: NavController,
    uploadViewModel: UploadViewModel = viewModel()
) {
    val uploadState by uploadViewModel.uploadState.collectAsState()
    val context = LocalContext.current

    // File picker launcher
    val filePickerLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.GetContent()
    ) { uri: Uri? ->
        uri?.let { selectedUri ->
            // Get file name from URI
            val fileName = getFileNameFromUri(context, selectedUri) ?: "data_file.csv"
            uploadViewModel.selectFile(selectedUri, fileName)
        }
    }

    // Handle upload result
    LaunchedEffect(uploadState.uploadResult) {
        when (val result = uploadState.uploadResult) {
            is Resource.Success -> {
                // Navigate to success screen
                navController.navigate("upload_success") {
                    popUpTo("upload_data") { inclusive = true }
                }
            }
            is Resource.Error -> {
                // Error will be shown in UI, no need to navigate
            }
            else -> {}
        }
    }

    Scaffold(
        containerColor = Color.White,
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = "Dashboard",
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        fontSize = 25.sp,
                        color = Color.Black
                    )
                },
                navigationIcon = {
                    IconButton(
                        onClick = { navController.navigateUp() },
                        modifier = Modifier.padding(start = 4.dp)
                    ) {
                        Box(
                            modifier = Modifier
                                .size(32.dp)
                                .clip(CircleShape)
                                .background(Color(0xFF27361F)),
                            contentAlignment = Alignment.Center
                        ) {
                            Image(
                                painter = painterResource(id = R.drawable.arrow_left),
                                contentDescription = "Back",
                                modifier = Modifier.size(16.dp),
                                contentScale = ContentScale.Fit
                            )
                        }
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = Color.Transparent,
                    titleContentColor = Color.Black,
                    navigationIconContentColor = Color.White
                )
            )
        },
        bottomBar = {
            Button(
                onClick = { uploadViewModel.uploadFile() },
                enabled = uploadState.isUploadEnabled && !uploadState.isLoading,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 12.dp)
                    .height(48.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF27361F),
                    contentColor = Color(0xFFFAFAFA),
                    disabledContainerColor = Color(0xFF989898),
                    disabledContentColor = Color(0xFFFAFAFA)
                ),
                shape = RoundedCornerShape(10.dp)
            ) {
                if (uploadState.isLoading) {
                    CircularProgressIndicator(
                        modifier = Modifier.size(16.dp),
                        color = Color.White,
                        strokeWidth = 2.dp
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "Uploading...",
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        fontSize = 17.sp
                    )
                } else {
                    Text(
                        text = "Unggah Data",
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        fontSize = 17.sp
                    )
                }
            }
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .padding(horizontal = 16.dp)
                .fillMaxSize()
                .verticalScroll(rememberScrollState()) 
        ) {

            Text(
                text = "Upload Data File",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                fontSize = 25.sp,
                color = Color.Black,
            )

            Spacer(modifier = Modifier.height(8.dp))

            Text(
                text = "* Upload file CSV berisi data emisi karbon (maksimal 10MB)",
                fontFamily = PoppinsFontFamily,
                style = MaterialTheme.typography.bodySmall,
                color = MaterialTheme.colorScheme.onSurfaceVariant,
                modifier = Modifier.padding(bottom = 16.dp)
            )

            // CSV Format Guide
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 24.dp),
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFFF5F5F5)
                )
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "Format CSV yang diperlukan:",
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.SemiBold,
                        fontSize = 14.sp,
                        color = Color.Black,
                        modifier = Modifier.padding(bottom = 8.dp)
                    )
                    
                    val csvColumns = listOf(
                        "id_perusahaan", "year", "month", "carbon_value",
                        "document_type", "document_name", "document_path", "analysis"
                    )
                    
                    csvColumns.forEach { column ->
                        Text(
                            text = "• $column",
                            fontFamily = PoppinsFontFamily,
                            fontSize = 12.sp,
                            color = Color(0xFF666666),
                            modifier = Modifier.padding(start = 8.dp, bottom = 2.dp)
                        )
                    }
                }
            }

            // Single CSV file upload
            DocumentUploadItem(
                label = "Data File (.csv)",
                placeholderText = "Pilih file CSV data emisi",
                selectedFileName = uploadState.selectedFileName,
                onSelectClick = {
                    filePickerLauncher.launch("*/*")
                },
                onRemoveClick = {
                    uploadViewModel.clearSelectedFile()
                },
                modifier = Modifier.padding(bottom = 16.dp)
            )

            // Error message
            uploadState.uploadResult?.let { result ->
                if (result is Resource.Error) {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(bottom = 16.dp),
                        colors = CardDefaults.cardColors(
                            containerColor = Color(0xFFFFEBEE)
                        )
                    ) {
                        Row(
                            modifier = Modifier
                                .padding(16.dp)
                                .fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = result.message ?: "Upload failed",
                                color = Color(0xFFD32F2F),
                                fontFamily = PoppinsFontFamily,
                                style = MaterialTheme.typography.bodyMedium,
                                modifier = Modifier.weight(1f)
                            )
                            TextButton(
                                onClick = { uploadViewModel.clearUploadResult() }
                            ) {
                                Text(
                                    text = "Dismiss",
                                    color = Color(0xFFD32F2F),
                                    fontFamily = PoppinsFontFamily
                                )
                            }
                        }
                    }
                }
            }

            Spacer(modifier = Modifier.height(16.dp))
        }
    }
}

/**
 * Helper function to get file name from URI
 */
private fun getFileNameFromUri(context: android.content.Context, uri: Uri): String? {
    var fileName: String? = null
    
    if (uri.scheme == "content") {
        val cursor = context.contentResolver.query(uri, null, null, null, null)
        cursor?.use {
            if (it.moveToFirst()) {
                val nameIndex = it.getColumnIndex(android.provider.OpenableColumns.DISPLAY_NAME)
                if (nameIndex != -1) {
                    fileName = it.getString(nameIndex)
                }
            }
        }
    }
    
    if (fileName == null) {
        fileName = uri.path?.let {
            val cut = it.lastIndexOf('/')
            if (cut != -1) {
                it.substring(cut + 1)
            } else {
                it
            }
        }
    }
    
    return fileName
}

@Preview(showBackground = true)
@Composable
private fun UploadDataScreenPreview() {
    UploadDataScreen(navController = rememberNavController())
}


================================================================================

FILE 68: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\upload\UploadSuccessScreen.kt
Lines: 164 | Size: 6027 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.upload

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.zIndex
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun UploadSuccessScreen(navController: NavController) {
    val gradientBrush = Brush.verticalGradient(
        colorStops = arrayOf(
            0.0f to Color(0xFF5A7C47),
            0.48f to Color(0xFF415A33),
            1.0f to Color(0xFF27361F)
        )
    )

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(gradientBrush),
        contentAlignment = Alignment.Center
    ) {

        Image(
            painter = painterResource(id = R.drawable.background_sc),
            contentDescription = "Background",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        Box(
            modifier = Modifier.fillMaxSize()
        ) {
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .fillMaxHeight(0.8f)
                    .align(Alignment.Center),
                contentAlignment = Alignment.Center
            ) {

                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    modifier = Modifier
                        .padding(horizontal = 32.dp)
                        .zIndex(1f)
                ) {

                    Icon(
                        painter = painterResource(id = R.drawable.ic_pembaruandatasplashlogo),
                        contentDescription = "Success",
                        modifier = Modifier.size(190.dp),
                        tint = Color.Unspecified
                    )

                    Spacer(modifier = Modifier.height(24.dp))

                    Text(
                        text = "Data CSV Berhasil\nDiunggah",
                        fontSize = 22.sp,
                        fontFamily = PoppinsFontFamily,
                        color = Color.White,
                        textAlign = TextAlign.Center,
                        fontWeight = FontWeight.Bold,
                        lineHeight = 28.sp
                    )

                    Spacer(modifier = Modifier.height(16.dp))

                    Text(
                        text = "File CSV telah berhasil diunggah dan sedang\ndiproses untuk analisis emisi karbon",
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        color = Color.White.copy(alpha = 0.8f),
                        textAlign = TextAlign.Center,
                        lineHeight = 20.sp
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    Text(
                        text = "Data akan muncul di dashboard dalam beberapa saat",
                        fontSize = 12.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color.White.copy(alpha = 0.8f),
                        textAlign = TextAlign.Center
                    )
                }
            }

            Column(
                horizontalAlignment = Alignment.Start,
                modifier = Modifier
                    .fillMaxWidth()
                    .align(Alignment.BottomCenter)
                    .padding(horizontal = 32.dp, vertical = 16.dp)
            ) {

                Text(
                    text = "Informasi: Dashboard akan diperbarui secara otomatis dengan data terbaru dari file CSV yang telah diunggah",
                    fontSize = 10.sp,
                    fontFamily = PoppinsFontFamily,
                    color = Color.White.copy(alpha = 0.7f),
                    textAlign = TextAlign.Left,
                    lineHeight = 14.sp,
                    modifier = Modifier.padding(bottom = 16.dp)
                )
                

                Button(
                    onClick = {
                        navController.navigate("dashboard") {
                            popUpTo("dashboard") { inclusive = true }
                            launchSingleTop = true
                        }
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(48.dp),
                    shape = RoundedCornerShape(10.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF151E11).copy(alpha = 0.8f)
                    )
                ) {
                    Text(
                        text = "Kembali ke Dashboard",
                        color = Color.White,
                        fontSize = 17.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold
                    )
                }
                
                Spacer(modifier = Modifier.height(8.dp))
            }
        }
    }
}

@Preview(showBackground = true, backgroundColor = 0xFF415A33)
@Composable
fun UploadSuccessScreenPreview() {
    UploadSuccessScreen(navController = rememberNavController())
}


================================================================================

FILE 69: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\upload\components\DocumentUploadItem.kt
Lines: 153 | Size: 6282 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.upload.components

import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Close
import androidx.compose.material.icons.filled.InsertDriveFile // Icon for selected file
import androidx.compose.material.icons.filled.UploadFile // Icon for upload action
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun DocumentUploadItem(
    modifier: Modifier = Modifier,
    label: String,
    placeholderText: String,
    selectedFileName: String?, // Null if no file selected, filename otherwise
    onSelectClick: () -> Unit, // Action to trigger file selection
    onRemoveClick: () -> Unit // Action to remove selected file
) {
    val shape = RoundedCornerShape(8.dp)
    val hasFileSelected = selectedFileName != null

    Column(modifier = modifier) {
        // Label Text (e.g., "Laporan CSR")
        Text(
            text = label,
            fontFamily = PoppinsFontFamily,
            style = MaterialTheme.typography.titleSmall,
            fontWeight = FontWeight.Medium,
            modifier = Modifier.padding(bottom = 6.dp)
        )

        // Clickable Upload Area Box
        Surface(
            modifier = Modifier
                .fillMaxWidth()
                .height(56.dp) // Fixed height for the box
                .clip(shape) // Apply clipping before border and clickable
                .border( // Apply border
                    width = 1.dp,
                    color = MaterialTheme.colorScheme.outline,
                    shape = shape
                )
                .clickable(
                    enabled = !hasFileSelected, // Only clickable if no file is selected
                    onClick = onSelectClick
                ),
            shape = shape,
            color = Color.Transparent // Make surface transparent, border provides outline
        ) {
            Row(
                modifier = Modifier
                    .padding(horizontal = 16.dp)
                    .fillMaxSize(), // Fill the Surface
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween // Space out content
            ) {
                if (hasFileSelected) {
                    // --- State when file IS selected ---
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier.weight(1f) // Allow text to take space and ellipsize
                    ) {
                        Icon(
                            imageVector = Icons.Filled.InsertDriveFile,
                            contentDescription = null,
                            tint = Color(0xFF686868),
                            modifier = Modifier.size(20.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = selectedFileName ?: "", // Should not be null here, but safe call
                            fontFamily = PoppinsFontFamily,
                            style = MaterialTheme.typography.bodyMedium,
                            maxLines = 1,
                            overflow = TextOverflow.Ellipsis
                        )
                    }
                    // Remove Button
                    IconButton(
                        onClick = onRemoveClick,
                        modifier = Modifier.size(24.dp) // Smaller touch target is okay here
                    ) {
                        Icon(
                            imageVector = Icons.Filled.Close,
                            contentDescription = "Remove File",
                            tint = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                } else {
                    // --- State when NO file is selected ---
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        Icon(
                            imageVector = Icons.Filled.UploadFile,
                            contentDescription = null,
                            tint = Color(0xFFB9B9B9), // Use primary color for icon
                            modifier = Modifier.size(20.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = placeholderText,
                            fontFamily = PoppinsFontFamily,
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.onSurfaceVariant // Dimmed placeholder color
                        )
                    }
                    // No remove button needed here
                }
            }
        }
    }
}

@Preview(showBackground = true, widthDp = 360)
@Composable
private fun DocumentUploadItemPreview_Empty() {
    Column(Modifier.padding(16.dp)) {
        DocumentUploadItem(
            label = "Laporan CSR",
            placeholderText = "Laporan",
            selectedFileName = null,
            onSelectClick = {},
            onRemoveClick = {}
        )
    }
}

@Preview(showBackground = true, widthDp = 360)
@Composable
private fun DocumentUploadItemPreview_Selected() {
    Column(Modifier.padding(16.dp)) {
        DocumentUploadItem(
            label = "Sertifikasi CSR",
            placeholderText = "Sertifikasi",
            selectedFileName = "Sertifikasi ISO 9001-2024 Rev B Long Name.pdf",
            onSelectClick = {},
            onRemoveClick = {}
        )
    }
}


================================================================================

FILE 70: app\src\main\java\com\example\tumbuhnyata\ui\dashboardkeuangan\DashboardComponents.kt
Lines: 93 | Size: 2630 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboardkeuangan

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*

import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.tooling.preview.Preview

@Composable
fun InfoBox(title: String, value: String, amount: String) {
    Column(
        modifier = Modifier
            .padding(8.dp)
            .background(Color.White, shape = RoundedCornerShape(12.dp))
            .padding(12.dp)
    ) {
        Text(text = title, fontSize = 14.sp)
        Text(text = value, fontSize = 20.sp, fontWeight = FontWeight.Bold)
        Text(text = amount, fontSize = 12.sp)
    }
}

@Composable
fun StatusBox(label: String, amount: String, bgColor: Color) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp)
            .background(bgColor.copy(alpha = 0.1f), shape = RoundedCornerShape(12.dp))
            .padding(12.dp)
    ) {
        Text(text = label, fontSize = 14.sp)
        Text(text = amount, fontSize = 18.sp, fontWeight = FontWeight.Bold)
    }
}

@Composable
fun PopupDownloadSuccess(onDismiss: () -> Unit) {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Black.copy(alpha = 0.5f)),
        contentAlignment = Alignment.Center
    ) {
        Column(
            modifier = Modifier
                .background(Color.White, shape = RoundedCornerShape(16.dp))
                .padding(24.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text("Berhasil Mengunduh\nLaporan Keuangan", fontSize = 16.sp)
            Spacer(modifier = Modifier.height(16.dp))
            Button(onClick = { onDismiss() }) {
                Text("Ok")
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewInfoBox() {
    InfoBox(
        title = "Total CSR",
        value = "Rp 3.187.450.725",
        amount = "2 Program CSR"
    )
}

@Preview(showBackground = true)
@Composable
fun PreviewStatusBox() {
    StatusBox(
        label = "Program Selesai",
        amount = "Rp 1.231.779.900",
        bgColor = Color(0xFF2196F3)
    )
}

@Preview(showBackground = true)
@Composable
fun PreviewPopupDownloadSuccess() {
    PopupDownloadSuccess(onDismiss = {})
}



================================================================================

FILE 71: app\src\main\java\com\example\tumbuhnyata\ui\dashboardkeuangan\DashboardKeuanganScreen.kt
Lines: 483 | Size: 19591 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboardkeuangan

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.DashboardKeuanganViewModel
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.ui.input.nestedscroll.nestedScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.ui.window.Dialog
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController

@Composable
fun DashboardKeuanganScreen(
    navController: NavController = rememberNavController(),
    viewModel: DashboardKeuanganViewModel = DashboardKeuanganViewModel()
) {
    val categories = viewModel.categories
    val total = viewModel.total
    var showPopup by remember { mutableStateOf(false) }
    val scrollState = rememberScrollState()

    Scaffold(
        contentWindowInsets = WindowInsets.safeDrawing
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .padding(innerPadding)
                .fillMaxSize()
                .background(Color.White)
                .verticalScroll(rememberScrollState())
                .padding(16.dp)
        ) {
            // Header with back button
            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Image(
                    painter = painterResource(id = R.drawable.btn_back),
                    contentDescription = "Kembali",
                    modifier = Modifier
                        .size(32.dp)
                        .clickable { navController.navigateUp() }
                )
                Spacer(modifier = Modifier.width(16.dp))
                Text(
                    text = "Dashboard Keuangan",
                    fontSize = 25.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.ExtraBold,
                    color = Color.Black
                )
            }
            
            Text(
                text = buildAnnotatedString {
                    append("Semua laporan keuangan pada dashboard ini merupakan pengeluaran program CSR anda pada Tumbuh Nyata ")
                    withStyle(style = SpanStyle(fontWeight = FontWeight.Bold)) {
                        append("(Anggaran + Biaya Jasa)")
                    }
                },
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.Black,
                modifier = Modifier.padding(top = 8.dp, bottom = 16.dp)
            )

            // Download Button
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(195.dp)
                    .padding(vertical = 16.dp),
                shape = RoundedCornerShape(12.dp),
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFF27361F)
                )
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Column(
                        modifier = Modifier.weight(1f)
                    ) {
                        Text(
                            text = "Unduh Laporan Keuangan",
                            fontSize = 14.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Bold,
                            color = Color.White
                        )
                        Text(
                            text = "CSR Anda Sekarang",
                            fontSize = 14.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Bold,
                            color = Color.White
                        )
                        Spacer(modifier = Modifier.height(4.dp))
                        Text(
                            text = "Pantau dan kelola lebih mudah",
                            fontSize = 12.sp,
                            fontFamily = PoppinsFontFamily,
                            color = Color.White,
                        )
                        Button(
                            onClick = { showPopup = true },
                            modifier = Modifier
                                .padding(top = 8.dp)
                                .height(32.dp),
                            shape = RoundedCornerShape(8.dp),
                            colors = ButtonDefaults.buttonColors(
                                containerColor = Color.White
                            )
                        ) {
                            Text(
                                text = "Download",
                                fontSize = 12.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Bold,
                                color = Color(0xFF27361F)
                            )
                        }
                    }
                    
                    Image(
                        painter = painterResource(id = R.drawable.ic_dbkeuangan_folder),
                        contentDescription = "Folder",
                        modifier = Modifier.width(87.dp).height(81.dp)
                    )
                }
            }

            // Total Section
            Text(
                text = "Total",
                fontSize = 25.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.ExtraBold ,
                color = Color(0xFF4B4B4B)
            )
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                shape = RoundedCornerShape(12.dp),
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFF27361F)
                )
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "Rp",
                        fontSize = 21.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.ExtraBold,
                        color = Color.White
                    )
                    Text(
                        text = String.format("%,.0f", total),
                        fontSize = 21.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.ExtraBold,
                        color = Color(0xFFEBFD6F)
                    )
                }
            }

            // Category Cards with border
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 16.dp),
                horizontalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                categories.forEach { category ->
                    Card(
                        modifier = Modifier.weight(1f),
                        shape = RoundedCornerShape(12.dp),
                        colors = CardDefaults.cardColors(containerColor = Color.White),
                        border = BorderStroke(1.dp, Color(0xFFB9B9B9))
                    ) {
                        Column(
                            modifier = Modifier.padding(16.dp)
                        ) {
                            Row(
                                verticalAlignment = Alignment.CenterVertically,
                                horizontalArrangement = Arrangement.spacedBy(4.dp)
                            ) {
                                Text(
                                    text = category.name,
                                    fontSize = 17.sp,
                                    fontFamily = PoppinsFontFamily,
                                    fontWeight = FontWeight.Bold,
                                    color = Color(0xFF686868)
                                )
                                Icon(
                                    painter = painterResource(
                                        id = if (category.name == "Sosial") R.drawable.ic_social
                                        else R.drawable.ic_environment
                                    ),
                                    contentDescription = category.name,
                                    modifier = Modifier.size(16.dp),
                                    tint = category.color
                                )
                            }
                            Text(
                                text = if (category.name == "Sosial") "12" else "9",
                                fontSize = 36.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Bold
                            )
                            Text(
                                text = "Rp ${String.format("%,.0f", category.amount)}",
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Bold,
                                color = Color.Black
                            )
                        }
                    }
                }
            }

            // Pie Chart Card with border
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                shape = RoundedCornerShape(12.dp),
                colors = CardDefaults.cardColors(containerColor = Color.White),
                border = BorderStroke(1.dp, Color(0xFFB9B9B9))
            ) {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp)
                ) {
                    DynamicPieChart(categories = categories)
                }
            }

            // Status Boxes with borders
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                // Selesai Box
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(12.dp),
                    border = BorderStroke(1.dp, Color(0xFFB9B9B9))
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(
                                brush = Brush.horizontalGradient(
                                    colors = listOf(
                                        Color(0xFFF8F8F8),
                                        Color(0xFF989898)
                                    )
                                )
                            )
                            .padding(16.dp)
                    ) {
                        Column {
                            Text(
                                text = "Selesai ✅",
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                color = Color.Black
                            )
                            Text(
                                text = "Rp 886.240.100",
                                fontSize = 18.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Bold,
                                color = Color.Black
                            )
                        }
                    }
                }

                // Progress Box
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(12.dp),
                    border = BorderStroke(1.dp, Color(0xFFB9B9B9))
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(
                                brush = Brush.horizontalGradient(
                                    colors = listOf(
                                        Color(0xFFF8F8F8),
                                        Color(0xFFFFD95D)
                                    )
                                )
                            )
                            .padding(16.dp)
                    ) {
                        Column {
                            Text(
                                text = "Progress ⏳",
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                color = Color.Black
                            )
                            Text(
                                text = "Rp 1.732.890.150",
                                fontSize = 18.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Bold,
                                color = Color.Black
                            )
                        }
                    }
                }

                // Mendatang Box
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(12.dp),
                    border = BorderStroke(1.dp, Color(0xFFB9B9B9))
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(
                                brush = Brush.horizontalGradient(
                                    colors = listOf(
                                        Color(0xFFF8F8F8),
                                        Color(0xFF9CDEFF)
                                    )
                                )
                            )
                            .padding(16.dp)
                    ) {
                        Column {
                            Text(
                                text = "Mendatang ⏱️",
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                color = Color.Black
                            )
                            Text(
                                text = "Rp 568.320.475",
                                fontSize = 18.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Bold,
                                color = Color.Black
                            )
                        }
                    }
                }
            }

            // Add some bottom padding
            Spacer(modifier = Modifier.height(16.dp))
        }
    }

    if (showPopup) {
        Dialog(
            onDismissRequest = { showPopup = false }
        ) {
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp),
                shape = RoundedCornerShape(16.dp),
                colors = CardDefaults.cardColors(
                    containerColor = Color.White
                )
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(24.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = "Download",
                        fontSize = 12.sp,
                        fontFamily = PoppinsFontFamily,
                        color = Color(0xFF27361F)
                    )
                    Spacer(modifier = Modifier.height(16.dp))
                    Image(
                        painter = painterResource(id = R.drawable.ic_db_download_success),
                        contentDescription = "Success",
                        modifier = Modifier.size(80.dp)
                    )
                    Spacer(modifier = Modifier.height(16.dp))
                    Text(
                        text = "Berhasil Mengunduh",
                        fontSize = 16.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color.Black
                    )
                    Text(
                        text = "Laporan Keuangan",
                        fontSize = 16.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color.Black
                    )
                    Spacer(modifier = Modifier.height(24.dp))
                    Button(
                        onClick = { showPopup = false },
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(48.dp),
                        shape = RoundedCornerShape(8.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFF27361F)
                        )
                    ) {
                        Text(
                            text = "Ok",
                            fontSize = 14.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Bold,
                            color = Color.White
                        )
                    }
                }
            }
        }
    }
}

@Preview(
    name = "Dashboard Keuangan Screen",
    showBackground = true,
    backgroundColor = 0xFFFFFFFF,
    showSystemUi = true
)
@Composable
fun PreviewDashboardKeuanganScreen() {
    MaterialTheme {
        DashboardKeuanganScreen()
    }
}


================================================================================

FILE 72: app\src\main\java\com\example\tumbuhnyata\ui\dashboardkeuangan\PieChart.kt
Lines: 129 | Size: 4458 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboardkeuangan

import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.Alignment
import androidx.compose.ui.geometry.Size
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.data.model.CsrCategory
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import kotlin.math.roundToInt
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.draw.clip

@Composable
fun DynamicPieChart(categories: List<CsrCategory>) {
    val total = categories.sumOf { it.amount.toDouble() }.toFloat()
    val angles = categories.map { (it.amount / total * 360f) }
    val percentages = categories.map { ((it.amount / total) * 100).roundToInt() }

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp)
    ) {
        // Legend at the top
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp),
            horizontalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            categories.forEach { category ->
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier.padding(vertical = 4.dp)
                ) {
                    Box(
                        modifier = Modifier
                            .size(10.dp)
                            .clip(RoundedCornerShape(2.dp))
                            .background(category.color)
                    )
                    Spacer(modifier = Modifier.width(6.dp))
                    Text(
                        text = category.name,
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        color = Color.Black
                    )
                }
            }
        }

        // Pie Chart with percentages
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(160.dp),
            contentAlignment = Alignment.Center
        ) {
            Canvas(
                modifier = Modifier
                    .size(140.dp)
            ) {
                val canvasSize = Size(size.width, size.height)
                var startAngle = -90f
                
                categories.forEachIndexed { index, category ->
                    drawArc(
                        color = category.color,
                        startAngle = startAngle,
                        sweepAngle = angles[index],
                        useCenter = true,
                        size = canvasSize
                    )
                    startAngle += angles[index]
                }
            }

            // Percentage texts
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.CenterStart
            ) {
                Text(
                    text = "${percentages[1]}%",
                    fontSize = 20.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    color = categories[1].color,
                    modifier = Modifier.padding(start = 24.dp)
                )
            }
            
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.CenterEnd
            ) {
                Text(
                    text = "${percentages[0]}%",
                    fontSize = 20.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    color = categories[0].color,
                    modifier = Modifier.padding(end = 24.dp)
                )
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewDynamicPieChart() {
    val previewCategories = listOf(
        CsrCategory("Sosial", 1955670784f, Color(0xFF4285F4)),
        CsrCategory("Lingkungan", 1231779840f, Color(0xFF8AB4F8))
    )
    DynamicPieChart(categories = previewCategories)
}



================================================================================

FILE 73: app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\CsrData.kt
Lines: 12 | Size: 281 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.eventcsr

data class CsrData(
    val programName: String,
    val category: String,
    val description: String,
    val startDate: String,
    val endDate: String,
    val location: String,
    val partnerName: String,
    val budget: String
) 

================================================================================

FILE 74: app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\CsrSubmissionScreen.kt
Lines: 803 | Size: 31129 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.eventcsr

import androidx.compose.animation.AnimatedContent
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import android.net.Uri
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.material3.DatePicker
import androidx.compose.material3.DatePickerDialog
import androidx.compose.ui.tooling.preview.Preview
import androidx.navigation.compose.rememberNavController
import java.text.SimpleDateFormat
import java.util.*
import com.google.gson.Gson
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.tumbuhnyata.viewmodel.CsrSubmissionViewModel

@Composable
fun CsrSubmissionScreen(navController: NavController) {
    val viewModel: CsrSubmissionViewModel = viewModel()
    var step by remember { mutableStateOf(1) }

    Scaffold()
    { innerPadding ->
        Column(
            modifier = Modifier
                .padding(innerPadding)
                .fillMaxSize()
                .background(Color.White),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // Header with back button and step indicator
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
            ) {
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // Back button
                    Image(
                        painter = painterResource(id = R.drawable.btn_back),
                        contentDescription = "Kembali",
                        modifier = Modifier
                            .size(32.dp)
                            .clickable { navController.navigateUp() }
                    )

                    Text(
                        text = "Ajukan CSR",
                        fontSize = 20.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color.Black
                    )

                    Text(
                        text = "Langkah $step/4",
                        fontSize = 16.sp,
                        fontFamily = PoppinsFontFamily,
                        color = Color.Gray
                    )
                }
            }

            // Content based on current step
            AnimatedContent(targetState = step, label = "CSR Steps") { currentStep ->
                when (currentStep) {
                    1 -> StepOne(
                        programName = viewModel.programName.value,
                        selectedCategory = viewModel.category.value,
                        description = viewModel.description.value,
                        onProgramNameChange = { viewModel.programName.value = it },
                        onCategoryChange = { viewModel.category.value = it },
                        onDescriptionChange = { viewModel.description.value = it },
                        onNext = { step++ }
                    )

                    2 -> StepTwo(
                        location = viewModel.location.value,
                        partnerName = viewModel.partnerName.value,
                        startDate = viewModel.startDate.value,
                        endDate = viewModel.endDate.value,
                        budget = viewModel.budget.value,
                        onLocationChange = { viewModel.location.value = it },
                        onPartnerNameChange = { viewModel.partnerName.value = it },
                        onStartDateChange = { viewModel.startDate.value = it },
                        onEndDateChange = { viewModel.endDate.value = it },
                        onBudgetChange = { viewModel.budget.value = it },
                        onNext = { step++ }
                    )

                    3 -> StepThree { step++ }
                    4 -> StepFour(navController = navController, viewModel = viewModel) { step++ }
                }
            }
        }
    }
}
    @Composable
    fun StepOne(
        programName: String,
        selectedCategory: String,
        description: String,
        onProgramNameChange: (String) -> Unit,
        onCategoryChange: (String) -> Unit,
        onDescriptionChange: (String) -> Unit,
        onNext: () -> Unit
    ) {
        var showCategoryDropdown by remember { mutableStateOf(false) }

        val categories =
            listOf("Lingkungan", " Pendidikan", "Kesehatan", "Ekonomi", "Sosial Budaya")
        val viewModel: CsrSubmissionViewModel = viewModel()
        val isFormValid = viewModel.isFormStepOneValid(description)

        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            // Program Name
            OutlinedTextField(
                value = programName,
                onValueChange = onProgramNameChange,
                label = { Text("Nama Program", fontFamily = PoppinsFontFamily) },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                shape = RoundedCornerShape(15.dp),
                colors = OutlinedTextFieldDefaults.colors(
                    unfocusedBorderColor = Color.Gray,
                    focusedBorderColor = Color(0xFF3A5A40)
                )
            )

            Text(
                text = "*Tuliskan nama kegiatan dengan pendek dan ringkas",
                fontSize = 12.sp,
                color = Color.Gray,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier.padding(bottom = 16.dp)
            )

            // Category Dropdown
            Box(modifier = Modifier.fillMaxWidth()) {
                OutlinedTextField(
                    value = selectedCategory,
                    onValueChange = { },
                    label = { Text("Kategori", fontFamily = PoppinsFontFamily) },
                    readOnly = true,
                    modifier = Modifier
                        .fillMaxWidth()
                        .clickable { showCategoryDropdown = true },
                    trailingIcon = {
                        IconButton(
                            onClick = { showCategoryDropdown = true }
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_dropdown),
                                contentDescription = "Dropdown",
                                modifier = Modifier.size(24.dp)
                            )
                        }
                    },
                    shape = RoundedCornerShape(15.dp),
                    colors = OutlinedTextFieldDefaults.colors(
                        unfocusedBorderColor = Color.Gray,
                        focusedBorderColor = Color(0xFF3A5A40)
                    )
                )

                DropdownMenu(
                    expanded = showCategoryDropdown,
                    onDismissRequest = { showCategoryDropdown = false }
                ) {
                    categories.forEach { category ->
                        DropdownMenuItem(
                            text = {
                                Text(
                                    text = category,
                                    fontFamily = PoppinsFontFamily,
                                    fontSize = 16.sp
                                )
                            },
                            onClick = {
                                onCategoryChange(category)
                                showCategoryDropdown = false
                            }
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Description
            OutlinedTextField(
                value = description,
                onValueChange = {
                    if (it.length <= 2000) {
                        onDescriptionChange(it)
                    }
                },
                label = { Text("Deskripsi", fontFamily = PoppinsFontFamily) },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(120.dp),
                shape = RoundedCornerShape(15.dp),
                colors = OutlinedTextFieldDefaults.colors(
                    unfocusedBorderColor = Color.Gray,
                    focusedBorderColor = Color(0xFF3A5A40)
                ),
                supportingText = {
                    Text(
                        text = "${description.length}/2000",
                        modifier = Modifier.fillMaxWidth(),
                        textAlign = TextAlign.End,
                        fontFamily = PoppinsFontFamily
                    )
                }
            )

            Text(
                text = "*Deskripsikan secara singkat program anda dengan menuliskan tujuan dan sasaran program secara singkat",
                fontSize = 12.sp,
                color = Color.Gray,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier.padding(bottom = 16.dp)
            )

            Spacer(modifier = Modifier.weight(1f))

            // Next Button
            Button(
                onClick = onNext,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (isFormValid) Color(0xFF27361F) else Color.Gray,
                    contentColor = Color.White
                ),
                enabled = isFormValid
            ) {
                Text(
                    text = "Selanjutnya",
                    fontSize = 17.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }

    @OptIn(ExperimentalMaterial3Api::class)
    @Composable
    fun StepTwo(
        location: String,
        partnerName: String,
        startDate: String,
        endDate: String,
        budget: String,
        onLocationChange: (String) -> Unit,
        onPartnerNameChange: (String) -> Unit,
        onStartDateChange: (String) -> Unit,
        onEndDateChange: (String) -> Unit,
        onBudgetChange: (String) -> Unit,
        onNext: () -> Unit
    ) {
        var showDatePicker by remember { mutableStateOf(false) }
        var isSelectingStartDate by remember { mutableStateOf(true) }

        val datePickerState = rememberDatePickerState()
        val viewModel: CsrSubmissionViewModel = viewModel()
        val isFormValid = viewModel.isFormStepTwoValid()

        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            // Location Search
            OutlinedTextField(
                value = location,
                onValueChange = onLocationChange,
                label = { Text("Lokasi Pelaksanaan", fontFamily = PoppinsFontFamily) },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                leadingIcon = {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_event_loc1),
                        contentDescription = "Location",
                        modifier = Modifier.size(24.dp)
                    )
                },
                shape = RoundedCornerShape(15.dp),
                colors = OutlinedTextFieldDefaults.colors(
                    unfocusedBorderColor = Color.Gray,
                    focusedBorderColor = Color(0xFF3A5A40)
                )
            )

            Spacer(modifier = Modifier.height(16.dp))

            // Partner Name
            OutlinedTextField(
                value = partnerName,
                onValueChange = onPartnerNameChange,
                label = { Text("Nama Mitra (Jika Ada)", fontFamily = PoppinsFontFamily) },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                shape = RoundedCornerShape(15.dp),
                colors = OutlinedTextFieldDefaults.colors(
                    unfocusedBorderColor = Color.Gray,
                    focusedBorderColor = Color(0xFF3A5A40)
                )
            )

            Text(
                text = "*Apabila nama mitra kosong, maka kami akan mencarikan mitra untuk program CSR anda",
                fontSize = 12.sp,
                color = Color.Gray,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier.padding(bottom = 16.dp)
            )

            // Program Period
            Text(
                text = "Periode Program",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Medium,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                // Start Date
                OutlinedTextField(
                    value = startDate,
                    onValueChange = { },
                    label = { Text("Mulai", fontFamily = PoppinsFontFamily) },
                    modifier = Modifier
                        .weight(1f)
                        .padding(end = 8.dp),
                    readOnly = true,
                    trailingIcon = {
                        IconButton(
                            onClick = {
                                isSelectingStartDate = true
                                showDatePicker = true
                            }
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_event_calendar1),
                                contentDescription = "Calendar",
                                modifier = Modifier.size(24.dp)
                            )
                        }
                    },
                    shape = RoundedCornerShape(15.dp),
                    colors = OutlinedTextFieldDefaults.colors(
                        unfocusedBorderColor = Color.Gray,
                        focusedBorderColor = Color(0xFF3A5A40)
                    )
                )

                // End Date
                OutlinedTextField(
                    value = endDate,
                    onValueChange = { },
                    label = { Text("Berakhir", fontFamily = PoppinsFontFamily) },
                    modifier = Modifier
                        .weight(1f)
                        .padding(start = 8.dp),
                    readOnly = true,
                    trailingIcon = {
                        IconButton(
                            onClick = {
                                isSelectingStartDate = false
                                showDatePicker = true
                            }
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_event_calendar1),
                                contentDescription = "Calendar",
                                modifier = Modifier.size(24.dp)
                            )
                        }
                    },
                    shape = RoundedCornerShape(15.dp),
                    colors = OutlinedTextFieldDefaults.colors(
                        unfocusedBorderColor = Color.Gray,
                        focusedBorderColor = Color(0xFF3A5A40)
                    )
                )
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Budget with number validation
            OutlinedTextField(
                value = budget,
                onValueChange = { newValue ->
                    if (newValue.all { it.isDigit() }) {
                        onBudgetChange(newValue)
                    }
                },
                label = { Text("Anggaran", fontFamily = PoppinsFontFamily) },
                modifier = Modifier.fillMaxWidth(),
                leadingIcon = {
                    Text(
                        text = "Rp",
                        modifier = Modifier.padding(start = 16.dp),
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Medium
                    )
                },
                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                shape = RoundedCornerShape(15.dp),
                colors = OutlinedTextFieldDefaults.colors(
                    unfocusedBorderColor = Color.Gray,
                    focusedBorderColor = Color(0xFF3A5A40)
                )
            )

            Spacer(modifier = Modifier.weight(1f))

            // Next Button
            Button(
                onClick = onNext,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (isFormValid) Color(0xFF27361F) else Color.Gray,
                    contentColor = Color.White
                ),
                enabled = isFormValid
            ) {
                Text(
                    text = "Selanjutnya",
                    fontSize = 17.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold
                )
            }
        }

        if (showDatePicker) {
            DatePickerDialog(
                onDismissRequest = { showDatePicker = false },
                confirmButton = {
                    TextButton(
                        onClick = {
                            datePickerState.selectedDateMillis?.let { millis ->
                                val formattedDate = SimpleDateFormat(
                                    "dd MMM yyyy",
                                    Locale.getDefault()
                                ).format(Date(millis))
                                if (isSelectingStartDate) {
                                    onStartDateChange(formattedDate)
                                } else {
                                    onEndDateChange(formattedDate)
                                }
                            }
                            showDatePicker = false
                        }
                    ) {
                        Text("OK")
                    }
                },
                dismissButton = {
                    TextButton(
                        onClick = { showDatePicker = false }
                    ) {
                        Text("Cancel")
                    }
                }
            ) {
                DatePicker(
                    state = datePickerState
                )
            }
        }
    }

    @Composable
    fun StepThree(onNext: () -> Unit) {
        var proposalFile by remember { mutableStateOf<String?>(null) }
        var legalityFile by remember { mutableStateOf<String?>(null) }

        val isFormValid = proposalFile != null && legalityFile != null

        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            Text(
                text = "Unggah Dokumen Pendukung",
                fontSize = 20.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            Text(
                text = "Unggah dokumen pendukung untuk melanjutkan pengajuan CSR perusahaan anda",
                fontSize = 14.sp,
                color = Color.Gray,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier.padding(bottom = 24.dp)
            )

            // Proposal Upload
            Text(
                text = "Proposal Rancangan",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Medium,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            OutlinedCard(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable(enabled = proposalFile == null) {
                        proposalFile = "Proposal Rancangan.pdf"
                    }
                    .padding(vertical = 8.dp),
                shape = RoundedCornerShape(15.dp),
                border = BorderStroke(1.dp, Color.Gray)
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(12.dp)
                    ) {
                        Icon(
                            painter = painterResource(
                                id = if (proposalFile == null) R.drawable.ic_upload
                                else R.drawable.ic_doc
                            ),
                            contentDescription = "Upload",
                            modifier = Modifier.size(24.dp),
                            tint = Color.Gray
                        )

                        Text(
                            text = proposalFile ?: "Proposal Rancangan",
                            fontSize = 14.sp,
                            color = Color.Gray,
                            fontFamily = PoppinsFontFamily,
                            maxLines = 1,
                            overflow = TextOverflow.Ellipsis
                        )
                    }

                    if (proposalFile != null) {
                        IconButton(
                            onClick = { proposalFile = null }
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_close),
                                contentDescription = "Delete",
                                tint = Color(0xFFE74C3C),
                                modifier = Modifier.size(20.dp)
                            )
                        }
                    }
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // Legality Upload
            Text(
                text = "Legalitas Izin",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Medium,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            OutlinedCard(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable(enabled = legalityFile == null) {
                        legalityFile = "Legalitas Izin.pdf"
                    }
                    .padding(vertical = 8.dp),
                shape = RoundedCornerShape(15.dp),
                border = BorderStroke(1.dp, Color.Gray)
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(12.dp)
                    ) {
                        Icon(
                            painter = painterResource(
                                id = if (legalityFile == null) R.drawable.ic_upload
                                else R.drawable.ic_doc
                            ),
                            contentDescription = "Upload",
                            modifier = Modifier.size(24.dp),
                            tint = Color.Gray
                        )

                        Text(
                            text = legalityFile ?: "Legalitas Izin",
                            fontSize = 14.sp,
                            color = Color.Gray,
                            fontFamily = PoppinsFontFamily,
                            maxLines = 1,
                            overflow = TextOverflow.Ellipsis
                        )
                    }

                    if (legalityFile != null) {
                        IconButton(
                            onClick = { legalityFile = null }
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_close),
                                contentDescription = "Delete",
                                tint = Color(0xFFE74C3C),
                                modifier = Modifier.size(20.dp)
                            )
                        }
                    }
                }
            }

            Spacer(modifier = Modifier.weight(1f))

            // Next Button
            Button(
                onClick = onNext,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (isFormValid) Color(0xFF27361F) else Color.Gray,
                    contentColor = Color.White
                ),
                enabled = isFormValid
            ) {
                Text(
                    text = "Selanjutnya",
                    fontSize = 17.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }

    @Composable
    fun StepFour(
        navController: NavController,
        viewModel: CsrSubmissionViewModel,
        onNext: () -> Unit
    ) {
        var isChecked by remember { mutableStateOf(false) }

        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            Text(
                text = "Pernyataan",
                fontSize = 20.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 16.dp)
            )

            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                shape = RoundedCornerShape(15.dp),
                colors = CardDefaults.cardColors(containerColor = Color(0xFFF5F5F5))
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp)
                ) {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Checkbox(
                            checked = isChecked,
                            onCheckedChange = { isChecked = it },
                            colors = CheckboxDefaults.colors(
                                checkedColor = Color(0xFF27361F),
                                uncheckedColor = Color.Gray
                            )
                        )

                        Text(
                            text = "Semua data dan dokumen yang anda kirim akan digunakan untuk analisis tim TUMBUH NYATA",
                            fontSize = 14.sp,
                            fontFamily = PoppinsFontFamily,
                            color = Color.Black,
                            modifier = Modifier.padding(start = 8.dp)
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.weight(1f))

            // Submit Button
            Button(
                onClick = {
                    // Buat ulang csrData dari ViewModel
                    val csrData = CsrData(
                        programName = viewModel.programName.value,
                        category = viewModel.category.value,
                        description = viewModel.description.value,
                        startDate = viewModel.startDate.value,
                        endDate = viewModel.endDate.value,
                        location = viewModel.location.value,
                        partnerName = viewModel.partnerName.value,
                        budget = viewModel.budget.value
                    )
                    val csrDataJson = Uri.encode(Gson().toJson(csrData))
                    navController.navigate("csr_verification/$csrDataJson")
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (isChecked) Color(0xFF27361F) else Color.Gray,
                    contentColor = Color.White
                ),
                enabled = isChecked
            ) {
                Text(
                    text = "Selanjutnya",
                    fontSize = 17.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }

@Preview
@Composable
fun PreviewCsrSubmissionScreen() {
    val navController = rememberNavController()
    CsrSubmissionScreen(navController = navController)
}


================================================================================

FILE 75: app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\CsrSuccessScreen.kt
Lines: 136 | Size: 4810 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.eventcsr

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun CsrSuccessScreen(navController: NavController) {

    Scaffold()
    { innerPadding ->
        Box(
            modifier = Modifier
                .padding(innerPadding)
                .fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            // Background
            Image(
                painter = painterResource(id = R.drawable.background_sc),
                contentDescription = "Background",
                modifier = Modifier.fillMaxSize(),
                contentScale = ContentScale.Crop
            )

            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center
            ) {
                Spacer(modifier = Modifier.weight(1f))

                // Success Icon
                Image(
                    painter = painterResource(id = R.drawable.ic_doc_success),
                    contentDescription = "Success Icon",
                    modifier = Modifier.size(120.dp)
                )

                Spacer(modifier = Modifier.height(24.dp))

                Text(
                    text = "Pengajuan CSR",
                    fontSize = 24.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    color = Color.White,
                    textAlign = TextAlign.Center
                )

                Text(
                    text = "Berhasil!",
                    fontSize = 24.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    color = Color.White,
                    textAlign = TextAlign.Center
                )

                Spacer(modifier = Modifier.weight(1f))

                // Action Buttons
                Button(
                    onClick = { navController.navigate("riwayat") },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(50.dp),
                    shape = RoundedCornerShape(10.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF151E11)
                    )
                ) {
                    Text(
                        text = "Lihat Detail",
                        fontSize = 17.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color.White
                    )
                }

                Spacer(modifier = Modifier.height(12.dp))

                Button(
                    onClick = {
                        // Navigate back to home and clear the back stack
                        navController.navigate("home") {
                            popUpTo("home") { inclusive = true }
                        }
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(50.dp),
                    shape = RoundedCornerShape(10.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color.White
                    )
                ) {
                    Text(
                        text = "Kembali ke Beranda",
                        fontSize = 17.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color.Black
                    )
                }

                Spacer(modifier = Modifier.height(32.dp))
            }
        }
    }
}
@Preview(showSystemUi = true)
@Composable
fun PreviewCsrSuccessScreen() {
    val navController = rememberNavController()
    CsrSuccessScreen(navController = navController)
} 

================================================================================

FILE 76: app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\CsrVerificationScreen.kt
Lines: 313 | Size: 11978 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.eventcsr

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.tumbuhnyata.viewmodel.CsrVerificationViewModel

@Preview
@Composable
fun CsrVerificationScreen(navController: NavController, csrData: CsrData) {
    val viewModel: CsrVerificationViewModel = viewModel()
    Scaffold()
    { innerPadding ->
    Column(
        modifier = Modifier
            .padding(innerPadding)
            .fillMaxSize()
            .background(Color(0xFFF5F5F5))
    ) {
        // Header
        Surface(
            modifier = Modifier.fillMaxWidth(),
            color = Color.White,
            shadowElevation = 4.dp
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 12.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                // Back button with circle background
                Box(
                    modifier = Modifier
                        .size(40.dp)
                        .clip(CircleShape)
                        .background(Color(0xFF27361F))
                        .clickable { navController.navigateUp() }
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_back),
                        contentDescription = "Back",
                        tint = Color.White,
                        modifier = Modifier
                            .size(24.dp)
                            .align(Alignment.Center)
                    )
                }

                Text(
                    text = "Ajukan CSR",
                    fontSize = 20.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(start = 16.dp)
                )

                Spacer(modifier = Modifier.weight(1f))

                Text(
                    text = "Verifikasi",
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Medium,
                    color = Color.Gray
                )
            }
        }

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp)
        ) {
            Text(
                text = "Ringkasan CSR",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 16.dp)
            )

            // Summary Card
            Card(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(15.dp),
                colors = CardDefaults.cardColors(containerColor = Color.White)
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp)
                ) {
                    // Category
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(bottom = 12.dp)
                    ) {
                        Text(
                            text = "Kategori : ",
                            fontSize = 14.sp,
                            fontFamily = PoppinsFontFamily,
                            color = Color.Gray
                        )
                        Text(
                            text = csrData.category,
                            fontSize = 14.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Medium
                        )
                    }

                    // Program Name
                    Text(
                        text = csrData.programName,
                        fontSize = 20.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.padding(bottom = 16.dp)
                    )

                    // Date
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            painter = painterResource(id = R.drawable.ic_event_calendar2),
                            contentDescription = "Date",
                            modifier = Modifier.size(24.dp)
                        )
                        Text(
                            text = "${csrData.startDate} - ${csrData.endDate}",
                            fontSize = 14.sp,
                            fontFamily = PoppinsFontFamily,
                            modifier = Modifier.padding(start = 12.dp)
                        )
                    }

                    // Location
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            painter = painterResource(id = R.drawable.ic_event_loc2),
                            contentDescription = "Location",
                            modifier = Modifier.size(24.dp)
                        )
                        Text(
                            text = csrData.location,
                            fontSize = 14.sp,
                            fontFamily = PoppinsFontFamily,
                            modifier = Modifier.padding(start = 12.dp)
                        )
                    }

                    // Partner
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            painter = painterResource(id = R.drawable.ic_event_office),
                            contentDescription = "Partner",
                            modifier = Modifier.size(24.dp)
                        )
                        Text(
                            text = csrData.partnerName,
                            fontSize = 14.sp,
                            fontFamily = PoppinsFontFamily,
                            modifier = Modifier.padding(start = 12.dp)
                        )
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    Text(
                        text = "Besar Anggaran",
                        fontSize = 16.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.padding(bottom = 8.dp)
                    )

                    // Budget
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            painter = painterResource(id = R.drawable.ic_event_money1),
                            contentDescription = "Budget",
                            modifier = Modifier.size(24.dp)
                        )
                        Text(
                            text = csrData.budget,
                            fontSize = 16.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Bold,
                            modifier = Modifier.padding(start = 12.dp)
                        )
                    }
                }
            }

            Text(
                text = "*Pastikan semua data yang anda masukkan benar dan siap untuk diverifikasi",
                fontSize = 12.sp,
                color = Color.Gray,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier.padding(top = 16.dp)
            )

            Spacer(modifier = Modifier.weight(1f))

            // Action Buttons
            Column(
                modifier = Modifier.fillMaxWidth()
            ) {
                if (viewModel.isSubmitting.value) {
                    CircularProgressIndicator(
                        modifier = Modifier
                            .align(Alignment.CenterHorizontally)
                            .padding(bottom = 16.dp),
                        color = Color(0xFF27361F)
                    )
                }

                Button(
                    onClick = {
                        viewModel.submitCsr(csrData) {
                            navController.navigate("csr_success")
                        }
                    },
                    enabled = !viewModel.isSubmitting.value,
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(50.dp),
                    shape = RoundedCornerShape(10.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF27361F),
                        disabledContainerColor = Color(0xFF27361F).copy(alpha = 0.5f)
                    )
                ) {
                    Text(
                        text = "Ajukan Sekarang",
                        fontSize = 17.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold
                    )
                }

                if (viewModel.errorMessage.value != null) {
                    Text(
                        text = viewModel.errorMessage.value ?: "",
                        color = Color.Red,
                        fontSize = 14.sp,
                        modifier = Modifier.padding(top = 8.dp)
                    )
                }

                Spacer(modifier = Modifier.height(8.dp))

                    Button(
                        onClick = { navController.navigate("csr_submission") },
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RoundedCornerShape(10.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFFE74C3C)
                        )
                    ) {
                        Text(
                            text = "Batalkan",
                            fontSize = 17.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Bold
                        )
                    }
                }
            }
        }
    }

}


================================================================================

FILE 77: app\src\main\java\com\example\tumbuhnyata\ui\home\HomeScreen.kt
Lines: 637 | Size: 21635 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.home

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.ui.components.BottomNavigationBar
import com.example.tumbuhnyata.viewmodel.Activity
import com.example.tumbuhnyata.viewmodel.HomeState
import com.example.tumbuhnyata.viewmodel.HomeViewModel

@Composable
fun HomeScreen(
    navController: NavController,
    viewModel: HomeViewModel = viewModel()
) {
    val homeState by viewModel.homeState.collectAsState()
    
    Scaffold(
        bottomBar = {
            BottomNavigationBar(navController = navController)
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .padding(innerPadding)
                .verticalScroll(rememberScrollState())
        ) {
            MainCard(navController, homeState)
            Text(
                text = "Kelola Program CSR Anda",
                fontSize = 21.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.ExtraBold,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 15.dp, vertical = 10.dp)
            )
            MenuButtons(navController)
            ActivitySection(navController, homeState.activities)
        }
    }
}

@Composable
fun MainCard(navController: NavController, homeState: HomeState) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(
                start = 16.dp,
                top = 16.dp,
                end = 16.dp
            ),
        shape = RoundedCornerShape(16.dp)
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(
                    Brush.verticalGradient(
                        colors = listOf(
                            Color(0xFF5A7C47),
                            Color(0xFF415A33),
                            Color(0xFF27361F)
                        )
                    )
                )
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                CompanyHeader(
                    hasNotifications = homeState.companyInfo.hasNotifications, 
                    navController,
                    companyName = homeState.companyInfo.name,
                    companyAddress = homeState.companyInfo.address
                )
                CSRStatusSection(
                    completed = homeState.csrStatus.completed,
                    inProgress = homeState.csrStatus.inProgress,
                    upcoming = homeState.csrStatus.upcoming
                )
                CSRFundSection(
                    amount = homeState.csrFund.amount,
                    note = homeState.csrFund.note
                )
                BadgesSection(
                    levelBadge = homeState.badgeInfo.levelBadge,
                    emissionReduction = homeState.badgeInfo.emissionReduction
                )
                Button(
                    onClick = { navController.navigate("dashboard") },
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(top = 16.dp),
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4A613C)),
                    shape = RoundedCornerShape(10.dp)
                ) {
                    Text(
                        "Detail Dashboard  >", 
                        color = Color.White,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.ExtraBold,
                        fontSize = 12.sp
                    )
                }
            }
        }
    }
}

@Composable
fun CompanyHeader(
    hasNotifications: Boolean, 
    navController: NavController,
    companyName: String,
    companyAddress: String
) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Row(verticalAlignment = Alignment.CenterVertically) {
            Image(
                painter = painterResource(id = R.drawable.pt_profile),
                contentDescription = "Company Logo",
                modifier = Modifier
                    .size(53.dp)
                    .clip(CircleShape)
            )
            Spacer(modifier = Modifier.width(12.dp))
            Column {
                Text(
                    companyName,
                    color = Color.White,
                    fontWeight = FontWeight.Bold,
                    fontSize = 18.sp,
                    fontFamily = PoppinsFontFamily
                )
                Text(
                    companyAddress,
                    color = Color.White,
                    fontSize = 12.sp,
                    fontFamily = PoppinsFontFamily
                )
            }
        }
        Button(
            onClick = { navController.navigate("notifikasi") },
            modifier = Modifier
                .width(38.dp)
                .height(38.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4A613C)),
            shape = RoundedCornerShape(10.dp),
            contentPadding = PaddingValues(0.dp)
        ) {
            Image(
                painter = painterResource(id = if (hasNotifications) R.drawable.ic_notif_ping else R.drawable.ic_notif),
                contentDescription = "Notifications",
                modifier = Modifier
                    .size(if (hasNotifications) 22.dp else 22.dp, if (hasNotifications) 26.dp else 24.dp)
            )
        }
    }
}

@Composable
fun CSRStatusSection(
    completed: Int,
    inProgress: Int,
    upcoming: Int
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(top = 21.dp, bottom = 8.dp),
        colors = CardDefaults.cardColors(containerColor = Color(0x331E1E1E))
    ) {
        Column(modifier = Modifier.padding(12.dp)) {
            Text(
                "Status CSR",
                color = Color.White,
                fontWeight = FontWeight.Bold,
                fontFamily = PoppinsFontFamily
            )
            Row(
                modifier = Modifier.padding(top = 4.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                StatusItem("Selesai ", completed.toString())
                StatusItem("    Progres ", inProgress.toString())
                StatusItem("    Mendatang ", upcoming.toString())
            }
        }
    }
}

@Composable
fun StatusItem(label: String, value: String) {
    Row {
        Text(
            "$label: ",
            color = Color.White,
            fontFamily = PoppinsFontFamily
        )
        Text(
            value,
            color = Color.White,
            fontWeight = FontWeight.Bold,
            fontFamily = PoppinsFontFamily
        )
    }
}

@Composable
fun CSRFundSection(
    amount: String,
    note: String
) {
    Column(modifier = Modifier.padding(top = 8.dp, bottom = 20.dp, start = 14.dp, end = 14.dp)) {
        Text(
            "Riwayat Dana CSR",
            color = Color.White,
            fontWeight = FontWeight.Medium,
            fontSize = 12.sp,
            fontFamily = PoppinsFontFamily
        )
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier.padding(vertical = 4.dp)
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_money),
                contentDescription = "Money",
                modifier = Modifier.size(24.dp)
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text(
                amount,
                color = Color.White,
                fontWeight = FontWeight.ExtraBold,
                fontSize = 30.sp,
                fontFamily = PoppinsFontFamily
            )
        }
        Text(
            note,
            color = Color.White.copy(alpha = 0.7f),
            fontWeight = FontWeight.Normal,
            fontSize = 10.sp,
            fontFamily = PoppinsFontFamily
        )
    }
}

@Composable
fun BadgesSection(
    levelBadge: String,
    emissionReduction: String
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 4.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        // Level Badge
        Card(
            modifier = Modifier
                .width(148.dp)
                .height(153.dp),
            colors = CardDefaults.cardColors(containerColor = Color(0x331E1E1E))
        ) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(9.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.SpaceEvenly
            ) {
                Text(
                    "Level Badge", 
                    color = Color.White, 
                    fontSize = 14.sp, 
                    fontWeight = FontWeight.SemiBold,
                    fontFamily = PoppinsFontFamily
                )
                Box(
                    modifier = Modifier
                        .size(width = 115.dp, height = 70.dp)
                        .background(
                            color = Color(0x331E1E1E),
                            shape = RoundedCornerShape(10.dp)
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.superstar_badge),
                        contentDescription = "Badge",
                        modifier = Modifier
                            .width(82.dp)
                            .height(52.dp)
                    )
                }
                Text(
                    levelBadge, 
                    color = Color.White, 
                    fontSize = 14.sp, 
                    fontWeight = FontWeight.ExtraBold,
                    fontFamily = PoppinsFontFamily
                )
            }
        }
        
        Spacer(modifier = Modifier.width(8.dp))
        
        // Emisi Hilang
        Card(
            modifier = Modifier
                .width(148.dp)
                .height(153.dp),
            colors = CardDefaults.cardColors(containerColor = Color(0x331E1E1E))
        ) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(9.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.SpaceEvenly
            ) {
                Text(
                    "Emisi Hilang", 
                    color = Color.White, 
                    fontSize = 14.sp, 
                    fontWeight = FontWeight.SemiBold,
                    fontFamily = PoppinsFontFamily
                )
                Image(
                    painter = painterResource(id = R.drawable.ic_emission),
                    contentDescription = "Leaf",
                    modifier = Modifier.size(60.dp)
                )
                Text(
                    emissionReduction, 
                    color = Color.White, 
                    fontSize = 14.sp, 
                    fontWeight = FontWeight.ExtraBold,
                    fontFamily = PoppinsFontFamily
                )
            }
        }
    }
}

@Composable
fun MenuButtons(navController: NavController) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        MenuButton("Ajukan CSR", R.drawable.ic_ajukan) { navController.navigate("csr_submission") }
        MenuButton("Riwayat", R.drawable.ic_history) { navController.navigate("riwayat") }
        MenuButton("Keuangan", R.drawable.ic_finance) { navController.navigate("dashboardkeuangan") }
    }
}

@Composable
fun MenuButton(text: String, iconRes: Int, onClick: () -> Unit = {}) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Card(
            modifier = Modifier
                .width(110.dp)
                .height(92.dp),
            shape = RoundedCornerShape(12.dp),
        ) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(
                        Brush.verticalGradient(
                            colors = listOf(
                                Color(0xFF5A7C47),
                                Color(0xFF415A33),
                                Color(0xFF27361F)
                            )
                        )
                    )
                    .clickable(onClick = onClick),
                contentAlignment = Alignment.Center
            ) {
                Image(
                    painter = painterResource(id = iconRes),
                    contentDescription = text,
                    modifier = Modifier.size(60.dp)
                )
            }
        }
        Spacer(modifier = Modifier.height(8.dp))
        Text(
            text = text, 
            fontSize = 14.sp,
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.SemiBold
        )
    }
}

@Composable
fun ActivitySection(navController: NavController, activities: List<Activity>) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(start = 16.dp, end = 16.dp, top = 30.dp, bottom = 10.dp)
    ) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                "Aktivitas Terbaru",
                fontSize = 21.sp,
                fontWeight = FontWeight.ExtraBold,
                fontFamily = PoppinsFontFamily
            )
            TextButton(onClick = { navController.navigate("riwayat") }) {
                Text(
                    "Lihat Semua   >",
                    fontSize = 12.sp,
                    fontWeight = FontWeight.Normal,
                    color = Color(0xFF4C8C4A),
                    fontFamily = PoppinsFontFamily
                )
            }
        }
        
        LazyRow(
            horizontalArrangement = Arrangement.spacedBy(12.dp),
            contentPadding = PaddingValues(vertical = 0.dp)
        ) {
            items(activities.size) { index ->
                val activity = activities[index]
                ActivityItem(
                    title = activity.title,
                    community = activity.community,
                    status = activity.status,
                    kategori = activity.kategori,
                    lokasi = activity.lokasi,
                    periode = activity.periode,
                    statusType = activity.statusType,
                    navController = navController
                )
            }
        }
    }
}

enum class StatusType {
    COMPLETED,
    IN_PROGRESS,
    UPCOMING
}

@Composable
fun ActivityItem(
    title: String,
    community: String,
    status: String,
    kategori: String,
    lokasi: String,
    periode: String,
    statusType: StatusType,
    navController: NavController
) {
    Card(
        modifier = Modifier
            .width(280.dp)
            .padding(vertical = 0.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        shape = RoundedCornerShape(16.dp)
    ) {
        Box(modifier = Modifier.fillMaxWidth()) {
            // Status indicator on the left
            Box(
                modifier = Modifier
                    .width(4.dp)
                    .fillMaxHeight()
                    .background(
                        when (statusType) {
                            StatusType.COMPLETED -> Color(0xFF4C8C4A)
                            StatusType.IN_PROGRESS -> Color(0xFFFFC107)
                            StatusType.UPCOMING -> Color(0xFF2196F3)
                        }
                    )
            )
            
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    text = title,
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.SemiBold
                )
                Text(
                    text = community,
                    fontSize = 12.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                    color = Color.Gray
                )
                Row(
                    modifier = Modifier.padding(vertical = 4.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "Status : ",
                        fontSize = 10.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = status,
                        fontSize = 10.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color.Black
                    )
                    if (statusType == StatusType.COMPLETED) {
                        Image(
                            painter = painterResource(id = R.drawable.ic_check),
                            contentDescription = "Check",
                            modifier = Modifier
                                .padding(start = 4.dp)
                                .size(16.dp)
                        )
                    }
                }
                
                Divider(
                    modifier = Modifier.padding(vertical = 8.dp),
                    color = Color(0xFFEEEEEE)
                )
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Column {
                        Text(
                            text = "Kategori",
                            fontSize = 10.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.SemiBold,
                            color = Color.Black
                        )
                        Text(
                            text = kategori,
                            fontSize = 8.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Normal
                        )
                    }
                    Column {
                        Text(
                            text = "Lokasi",
                            fontSize = 10.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.SemiBold,
                            color = Color.Black
                        )
                        Text(
                            text = lokasi,
                            fontSize = 8.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Normal
                        )
                    }
                    Column {
                        Text(
                            text = "Periode",
                            fontSize = 10.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.SemiBold,
                            color = Color.Black
                        )
                        Text(
                            text = periode,
                            fontSize = 8.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Normal
                        )
                    }
                }
            }
        }
    }
}

@Preview
@Composable
fun PreviewHomeScreen() {
    val navController = rememberNavController()
    HomeScreen(navController = navController)
}



================================================================================

FILE 78: app\src\main\java\com\example\tumbuhnyata\ui\login\LoginScreen.kt
Lines: 321 | Size: 11773 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.login

import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import android.widget.Toast
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.data.model.LoginRequest
import com.example.tumbuhnyata.data.model.LoginResponse
import com.example.tumbuhnyata.data.network.RetrofitInstance
import com.example.tumbuhnyata.util.TokenManager
import org.json.JSONObject

@Composable
fun LoginScreen(navController: NavController) {
    val context = LocalContext.current
    var nib by remember { mutableStateOf("") }
    var isNibValid by remember { mutableStateOf(true) }
    var password by remember { mutableStateOf("") }
    var isPasswordValid by remember { mutableStateOf(true) }
    var passwordVisible by remember { mutableStateOf(false) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Spacer(modifier = Modifier.height(131.dp))

        Row {
            Text("Selamat Datang Kembali",
                fontSize = 17.sp,
                color = Color.Black,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold)
        }

        Spacer(modifier = Modifier.height(24.dp))

        // Logo
        Image(
            painter = painterResource(id = R.drawable.logo),
            modifier = Modifier.size(243.dp, 72.dp),
            contentDescription = "Logo"
        )

        Spacer(modifier = Modifier.height(66.dp))

        // NIB TextField (replacing Email TextField)
        OutlinedTextField(
            value = nib,
            onValueChange = {
                nib = it
                isNibValid = it.isNotBlank() && it.length <= 13
            },
            label = {
                Text(
                    "NIB (Nomor Induk Berusaha)",
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                )
            },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_doc),
                    modifier = Modifier.size(20.dp),
                    contentDescription = "NIB Icon"
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true,
        )

        // Menampilkan warning jika NIB tidak valid
        if (!isNibValid) {
            Text(
                text = "NIB tidak boleh kosong dan maksimal 13 karakter",
                color = Color.Red,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier
                    .padding(top = 4.dp)
                    .align(Alignment.Start)
            )
        }

        Spacer(modifier = Modifier.height(13.dp))

        // Password TextField
        OutlinedTextField(
            value = password,
            onValueChange = {
                password = it
                isPasswordValid = it.length >= 8
            },
            label = {
                Text(
                    "Kata Sandi",
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal
                )
            },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),
            visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_password),
                    modifier = Modifier.size(18.dp),
                    contentDescription = "Password Icon"
                )
            },
            trailingIcon = {
                IconButton(onClick = { passwordVisible = !passwordVisible }) {
                    Icon(
                        painter = painterResource(id = if (passwordVisible) R.drawable.ic_visibility else R.drawable.ic_visibility_off),
                        contentDescription = if (passwordVisible) "Hide password" else "Show password",
                        modifier = Modifier.size(20.dp)
                    )
                }
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true
        )

        // Menampilkan warning jika password kurang dari 8 karakter
        if (!isPasswordValid) {
            Text(
                text = "Minimal 8 karakter",
                color = Color.Red,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier
                    .padding(top = 4.dp)
                    .align(Alignment.Start)
            )
        }

        Spacer(modifier = Modifier.height(13.dp))

        // Forgot Password Text
        Text(
            "Lupa Sandi?",
            color = Color.Gray,
            fontSize = 14.sp, fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.align(Alignment.End),
            textDecoration = TextDecoration.Underline
        )

        Spacer(modifier = Modifier.height(34.dp))

        // Login Button
        Button(
            onClick = {
                val loginRequest = LoginRequest(NIB = nib, password = password)

                // In your LoginScreen.kt, modify the login success handler
                RetrofitInstance.api.login(loginRequest).enqueue(object : Callback<LoginResponse> {
                    override fun onResponse(call: Call<LoginResponse>, response: Response<LoginResponse>) {
                        if (response.isSuccessful) {
                            val token = response.body()?.token
                            Toast.makeText(context, "Login berhasil", Toast.LENGTH_SHORT).show()
                            // Navigate to home screen and clear the back stack
                            navController.navigate("home") {
                                popUpTo("login") { inclusive = true }
                                launchSingleTop = true
                            }
                            TokenManager.saveToken(context, token ?: "")
                        } else {
                            val errorBody = response.errorBody()?.string()
                            val errorMessage = try {
                                JSONObject(errorBody).getString("message")
                            } catch (e: Exception) {
                                "Login gagal: ${response.code()}"
                            }
                            Toast.makeText(context, errorMessage, Toast.LENGTH_LONG).show()
                        }
                    }

                    override fun onFailure(call: Call<LoginResponse>, t: Throwable) {
                        Toast.makeText(context, "Tidak dapat terhubung ke server: ${t.localizedMessage}", Toast.LENGTH_LONG).show()
                    }
                })
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(46.dp),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(
                if (nib.isNotBlank() && password.isNotBlank()) Color.Black else Color.Gray)
        ) {
            Text(
                "Masuk",
                color = Color.White,
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }

        Spacer(modifier = Modifier.height(30.dp))

        // Divider
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier.fillMaxWidth()
        ) {
            HorizontalDivider(
                modifier = Modifier.weight(1f),
                color = Color.Gray
            )
            Text(
                "  Atau dengan  ",
                color = Color.Gray
            )
            HorizontalDivider(
                modifier = Modifier.weight(1f),
                color = Color.Gray
            )
        }

        Spacer(modifier = Modifier.height(18.dp))

        // Google Sign-In Button
        Button(
            onClick = { /* Handle Google Sign-In */ },
            modifier = Modifier
                .fillMaxWidth()
                .border(1.dp, Color.Black, RoundedCornerShape(10.dp))
                .height(50.dp),
            shape = RoundedCornerShape(50.dp),
            colors = ButtonDefaults.buttonColors(Color.White)
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_google),
                contentDescription = "Google Icon",
                modifier = Modifier.size(20.dp)
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text(
                "Masuk dengan Google",
                color = Color.Black,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }

        Spacer(modifier = Modifier.height(73.dp))

        // Sign Up Text
        Row {
            Text(
                "Belum punya akun? ",
                color = Color.Black,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Normal
            )
            Text(
                "Daftar",
                color = Color.Black,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                textDecoration = TextDecoration.Underline,
                modifier = Modifier.clickable {
                    navController.navigate("register")
                }
            )
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewLoginScreen() {
    val navController = rememberNavController()
    LoginScreen(navController = navController)
}


================================================================================

FILE 79: app\src\main\java\com\example\tumbuhnyata\ui\notification\NotificationScreen.kt
Lines: 236 | Size: 7599 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.notification

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material3.*
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.tumbuhnyata.data.model.Notification
import com.example.tumbuhnyata.viewmodel.NotificationViewModel
import java.text.SimpleDateFormat
import java.util.*
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NotificationScreen(
    userId: String,
    onBackClick: () -> Unit = {}
) {
    // Menggunakan viewModel dengan factory
    val viewModel: NotificationViewModel = viewModel(
        factory = NotificationViewModel.Factory()
    )
    
    // Menggunakan collectAsState untuk mengamati StateFlow dari ViewModel
    val notifications by viewModel.notifications.collectAsState()
    val errorMessage by viewModel.error.collectAsState()
    
    // Effect untuk mengambil notifikasi saat tampilan dibuat
    LaunchedEffect(key1 = userId) {
        viewModel.getNotifications(userId)
    }
    
    Scaffold(
        topBar = {
            CenterAlignedTopAppBar(
                title = { Text("Notifikasi", fontFamily = PoppinsFontFamily) },
                navigationIcon = {
                    IconButton(onClick = onBackClick) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "Kembali"
                        )
                    }
                }
            )
        }
    ) { paddingValues ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            if (notifications.isEmpty()) {
                EmptyNotifications(
                    modifier = Modifier.align(Alignment.Center)
                )
            } else {
                NotificationList(
                    notifications = notifications,
                    onNotificationClick = { notificationId ->
                        viewModel.markAsRead(notificationId)
                    },
                    onDeleteClick = { notificationId ->
                        viewModel.deleteNotification(notificationId)
                    }
                )
            }
            
            errorMessage?.let {
                ErrorMessage(
                    message = it,
                    modifier = Modifier.align(Alignment.Center)
                )
            }
        }
    }
}

@Composable
fun NotificationList(
    notifications: List<Notification>,
    onNotificationClick: (Int) -> Unit,
    onDeleteClick: (Int) -> Unit
) {
    LazyColumn(
        modifier = Modifier.fillMaxSize(),
        contentPadding = PaddingValues(16.dp),
        verticalArrangement = Arrangement.spacedBy(12.dp)
    ) {
        items(notifications) { notification ->
            NotificationItem(
                notification = notification,
                onClick = { onNotificationClick(notification.id) },
                onDeleteClick = { onDeleteClick(notification.id) }
            )
        }
    }
}

@Composable
fun NotificationItem(
    notification: Notification,
    onClick: () -> Unit,
    onDeleteClick: () -> Unit
) {
    val backgroundColor = if (notification.isReadBool()) {
        Color(0xFFEEEEEE)
    } else {
        Color(0xFFE1F5FE)
    }
    
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable(onClick = onClick),
        shape = RoundedCornerShape(8.dp),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
        colors = CardDefaults.cardColors(containerColor = backgroundColor)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = notification.title,
                    fontWeight = FontWeight.Bold,
                    fontSize = 16.sp,
                    color = Color(0xFF263238),
                    fontFamily = PoppinsFontFamily
                )
                
                IconButton(
                    onClick = onDeleteClick,
                    modifier = Modifier.size(24.dp)
                ) {
                    Icon(
                        imageVector = Icons.Default.Delete,
                        contentDescription = "Hapus notifikasi",
                        tint = Color(0xFFE57373)
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(8.dp))
            
            Text(
                text = notification.message,
                fontSize = 14.sp,
                color = Color(0xFF37474F),
                maxLines = 3,
                overflow = TextOverflow.Ellipsis,
                fontFamily = PoppinsFontFamily
            )
            
            Spacer(modifier = Modifier.height(8.dp))
            
            Text(
                text = formatDate(notification.createdAt),
                fontSize = 12.sp,
                color = Color(0xFF78909C),
                fontFamily = PoppinsFontFamily
            )
        }
    }
}

@Composable
fun EmptyNotifications(modifier: Modifier = Modifier) {
    Column(
        modifier = modifier,
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = "Tidak ada notifikasi",
            fontSize = 16.sp,
            color = Color(0xFF78909C),
            fontFamily = PoppinsFontFamily
        )
    }
}

@Composable
fun ErrorMessage(message: String, modifier: Modifier = Modifier) {
    Column(
        modifier = modifier
            .fillMaxWidth()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = message,
            color = MaterialTheme.colorScheme.error,
            style = MaterialTheme.typography.bodyLarge,
            fontFamily = PoppinsFontFamily
        )
    }
}

fun formatDate(dateString: String): String {
    return try {
        val inputFormat = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault())
        inputFormat.timeZone = TimeZone.getTimeZone("UTC")
        val date = inputFormat.parse(dateString)
        
        val outputFormat = SimpleDateFormat("dd MMM yyyy, HH:mm", Locale("id"))
        outputFormat.format(date ?: Date())
    } catch (e: Exception) {
        dateString
    }
} 



================================================================================

FILE 80: app\src\main\java\com\example\tumbuhnyata\ui\notification\NotifikasiDetailScreen.kt
Lines: 257 | Size: 9690 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.notification

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun NotifikasiDetailScreen(
    navController: NavController,
    onBackClick: () -> Unit = { navController.popBackStack() }
) {
    Surface(
        modifier = Modifier.fillMaxSize(),
        color = Color.White
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(horizontal = 16.dp)
        ) {
            // Header with Back Button
            Spacer(modifier = Modifier.height(24.dp))
            
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 12.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                // Back button
                Box(
                    modifier = Modifier
                        .size(40.dp)
                        .clip(CircleShape)
                        .background(Color(0xFF094F2E))
                        .clickable { navController.popBackStack() },
                    contentAlignment = Alignment.Center
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.arrow_left),
                        contentDescription = "Kembali",
                        modifier = Modifier.size(24.dp)
                    )
                }
                
                Spacer(modifier = Modifier.width(12.dp))
                
                Text(
                    text = "Detail Notifikasi",
                    fontSize = 20.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.SemiBold
                )
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Invoice Information
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color(0xFFF5F5F5), RoundedCornerShape(8.dp))
                    .padding(16.dp)
            ) {
                // No. Invoice
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "No. Invoice",
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Normal,
                        color = Color.Black
                    )
                    
                    Text(
                        text = "VRTX - 71A - 420374 - 2024",
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.SemiBold,
                        color = Color.Black
                    )
                }
                
                Spacer(modifier = Modifier.height(8.dp))
                
                // Tanggal
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "Tanggal",
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Normal,
                        color = Color.Black
                    )
                    
                    Text(
                        text = "05 Maret 2025",
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.SemiBold,
                        color = Color.Black
                    )
                }
                
                Spacer(modifier = Modifier.height(8.dp))
                
                // Status
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "Status",
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Normal,
                        color = Color.Black
                    )
                    
                    Text(
                        text = "Memerlukan Pembayaran",
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.SemiBold,
                        color = Color.Black
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Invoice Image
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f)
                    .background(Color(0xFFF5F5F5), RoundedCornerShape(8.dp))
                    .padding(16.dp),
                contentAlignment = Alignment.Center
            ) {
                // Gunakan gambar placeholder untuk invoice
                // Dalam produksi, ini bisa diganti dengan gambar yang diambil dari server
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(400.dp)
                        .background(Color.White, RoundedCornerShape(8.dp)),
                    contentAlignment = Alignment.Center
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.ic_doc),
                        contentDescription = "Invoice Preview",
                        modifier = Modifier.size(100.dp),
                        contentScale = ContentScale.Fit
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Download Button
            Button(
                onClick = { /* TODO: Handle download */ },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(56.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF094F2E)
                ),
                shape = RoundedCornerShape(8.dp)
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.Center
                ) {
                    // Gunakan ikon yang tepat untuk download
                    Box(
                        modifier = Modifier
                            .size(24.dp),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = "↓",
                            fontSize = 18.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Bold,
                            color = Color.White
                        )
                    }
                    
                    Spacer(modifier = Modifier.width(8.dp))
                    
                    Text(
                        text = "Download Invoice",
                        fontSize = 16.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Medium,
                        color = Color.White
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(24.dp))
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewNotifikasiDetailScreen() {
    val navController = rememberNavController()
    NotifikasiDetailScreen(
        navController = navController
    )
}



================================================================================

FILE 81: app\src\main\java\com\example\tumbuhnyata\ui\profile\AboutScreen.kt
Lines: 119 | Size: 4907 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.profile

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun AboutScreen(navController: NavController) {
    Box(
        contentAlignment = Alignment.Center
    ) {
        Image (
            painter = painterResource(id = R.drawable.bg_onboarding),
            contentDescription = "Background Onboarding",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(start = 15.dp, end =15.dp, top = 60.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier
                    .fillMaxWidth()
            ) {
                IconButton(onClick = { navController.popBackStack() }) {
                    Image(
                        painter = painterResource(id = R.drawable.btn_back_white),
                        contentDescription = "Back",
                        modifier = Modifier.size(32.dp)
                    )
                }
                Spacer(modifier = Modifier.width(10.dp))
                Text(
                    text = "Tentang Aplikasi",
                    fontSize = 24.sp,
                    fontFamily = PoppinsFontFamily,
                    color = Color.White,
                    fontWeight = FontWeight.Bold
                )
            }

            Spacer(modifier = Modifier.height(60.dp))

            Image(
                painter = painterResource(id = R.drawable.logo_splash),
                contentDescription = "Logo TumbuhNyata",
                modifier = Modifier
                    .width(218.dp)
                    .align(alignment = Alignment.CenterHorizontally)
            )

            Spacer(modifier = Modifier.height(50.dp))

            Text(
                text = "Tumbuh Nyata adalah platform digital yang dirancang untuk membantu perusahaan dalam mengelola program Corporate Social Responsibility (CSR) secara lebih transparan, efektif, dan berdampak nyata. Dengan berbagai fitur inovatif, aplikasi ini memudahkan perusahaan dalam merancang, mengajukan, memantau, serta mengevaluas pelaksanaan CSR agar selaras dengan visi keberlanjutan dan tanggung jawab sosial.",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Justify,
                modifier = Modifier.fillMaxWidth()
            )

            Spacer(modifier = Modifier.height(20.dp))

            Text(
                text = "Melalui kolaborasi dengan lembaga kredensial dan mitra CSR, Tumbuh Nyata memastikan bahwa setiap program yang dijalankan memiliki standar tinggi serta dapat diukur dampaknya. Dengan sistem yang terintegrasi, perusahaan dapat mengoptimalkan kontribusi sosial mereka, meningkatkan kredibilitas, dan memperkuat hubungan dengan pemangku kepentingan demi masa depan yang lebih baik",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Justify,
                modifier = Modifier.fillMaxWidth()
            )

            Spacer(modifier = Modifier.height(90.dp))

            Text(
                text = buildAnnotatedString {
                    append("Versi Aplikasi: ")
                    withStyle(style = SpanStyle(fontWeight = FontWeight.Medium)) {
                        append("Tumbuh Nyata 1.0.0")
                    }
                },
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Center,
                modifier = Modifier.fillMaxWidth()
            )
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewAboutScreen() {
    AboutScreen(navController = rememberNavController())
}

================================================================================

FILE 82: app\src\main\java\com\example\tumbuhnyata\ui\profile\ChangePassword.kt
Lines: 211 | Size: 7276 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.profile

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.material3.OutlinedTextField
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun ChangePassword(navController: NavController) {
    var newPassword by remember { mutableStateOf("") }
    var oldPassword by remember { mutableStateOf("") }
    var isPasswordValid by remember { mutableStateOf(true) }
    var confirmPassword by remember { mutableStateOf("") }
    var passwordVisible by remember { mutableStateOf(false) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
            .padding(horizontal = 24.dp, vertical = 16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // Tombol kembali
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier.fillMaxWidth()
                .padding(top = 40.dp)
        ) {
            TopBarProfile(
                title = "",
                step = "",
                iconResId = R.drawable.btn_back,
                onBackClick = { navController.popBackStack() }
            )
        }

        Spacer(modifier = Modifier.height(35.dp))

        // Ilustrasi
        Image(
            painter = painterResource(id = R.drawable.img_change_password),
            contentDescription = "Reset Illustration",
            modifier = Modifier
                .fillMaxWidth()
                .height(231.dp)
                .width(353.dp)
                .clip(RoundedCornerShape(20.dp))
        )

        Spacer(modifier = Modifier.height(35.dp))

        // Judul
        Text(
            text = "Atur Ulang Kata Sandi",
            fontSize = 30.sp,
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.Bold,
            color = Color(0xFF27361F)
        )

        Spacer(modifier = Modifier.height(46.dp))

        PasswordTextField(
            value = oldPassword,
            onValueChange = {
                oldPassword = it
                isPasswordValid = it.length >= 8
            },
            label = "Kata Sandi Lama",
            isPasswordVisible = passwordVisible,
            onVisibilityToggle = { passwordVisible = !passwordVisible },
            isError = !isPasswordValid
        )

        Spacer(modifier = Modifier.height(13.dp))

        PasswordTextField(
            value = newPassword,
            onValueChange = {
                newPassword = it
                isPasswordValid = it.length >= 8
            },
            label = "Kata Sandi Baru",
            isPasswordVisible = passwordVisible,
            onVisibilityToggle = { passwordVisible = !passwordVisible },
            isError = !isPasswordValid
        )

        Spacer(modifier = Modifier.height(13.dp))

        PasswordTextField(
            value = confirmPassword,
            onValueChange = {
                confirmPassword = it
                isPasswordValid = it.length >= 8
            },
            label = "Konfirmasi Kata Sandi",
            isPasswordVisible = passwordVisible,
            onVisibilityToggle = { passwordVisible = !passwordVisible },
            isError = !isPasswordValid
        )

        Spacer(modifier = Modifier.height(47.dp))

        // Tombol Ubah Kata Sandi
        Button(
            onClick = { navController.navigate("change_password_success") },
            enabled = oldPassword.isNotEmpty() && newPassword.isNotEmpty() && confirmPassword.isNotEmpty(),
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            colors = ButtonDefaults.buttonColors(
                containerColor = if (oldPassword.isNotEmpty() && newPassword.isNotEmpty() && confirmPassword.isNotEmpty())
                    Color(0xFF27361F) else Color(0xFF989898)
            ),
            shape = RoundedCornerShape(10.dp)
        ) {
            Text(
                text = "Ubah Kata Sandi",
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color.White,
                textAlign = TextAlign.Center
            )
        }
    }
}

@Composable
fun PasswordTextField(
    value: String,
    onValueChange: (String) -> Unit,
    label: String,
    isPasswordVisible: Boolean,
    onVisibilityToggle: () -> Unit,
    isError: Boolean = false
) {
    OutlinedTextField(
        value = value,
        onValueChange = onValueChange,
        label = {
            Text(
                label,
                color = Color(0xFF686868),
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Normal
            )
        },
        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),
        visualTransformation = if (isPasswordVisible) VisualTransformation.None else PasswordVisualTransformation(),
        leadingIcon = {
            Icon(
                painter = painterResource(id = R.drawable.ic_password),
                contentDescription = "Password Icon",
                modifier = Modifier
                    .size(18.dp)
            )
        },
        trailingIcon = {
            IconButton(onClick = onVisibilityToggle) {
                Icon(
                    painter = painterResource(
                        id = if (isPasswordVisible) R.drawable.ic_visibility else R.drawable.ic_visibility_off
                    ),
                    contentDescription = if (isPasswordVisible) "Hide password" else "Show password",
                    modifier = Modifier.size(18.dp)
                )
            }
        },
        modifier = Modifier
            .fillMaxWidth()
            .height(60.dp),
        shape = RoundedCornerShape(15.dp),
        singleLine = true,
        isError = isError
    )
}

@Preview
@Composable
fun PreviewChangePassword() {
    ChangePassword(navController = rememberNavController())
}

================================================================================

FILE 83: app\src\main\java\com\example\tumbuhnyata\ui\profile\ChangePasswordSuccess.kt
Lines: 104 | Size: 3706 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.profile

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import androidx.compose.ui.layout.ContentScale
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun ChangePasswordSuccess(navController: NavController) {
    Box(
        modifier = Modifier
            .fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        Image(
            painter = painterResource(id = R.drawable.background_sc),
            contentDescription = "Background",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.height(220.dp))

            Image(
                painter = painterResource(id = R.drawable.img_change_password_success),
                contentDescription = "Change Password Success",
                modifier = Modifier
                    .width(122.dp)
                    .height(190.dp)
            )

            Spacer(modifier = Modifier.height(34.dp))

            Text(
                text = "Berhasil Merubah Kata Sandi",
                fontSize = 25.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.ExtraBold,
                modifier = Modifier
                    .width(292.dp)
                    .height(76.dp)
            )

            Spacer(modifier = Modifier.height(178.dp))

            Button(
                onClick = { navController.navigate("profile") },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp)
                    .align(alignment = Alignment.CenterHorizontally),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF151E11))
            ) {
                Text(
                    text = "Kembali ke Profil",
                    color = Color.White,
                    fontSize = 17.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    textAlign = TextAlign.Center
                )
            }
        }
    }
}


@Preview
@Composable
fun PreviewChangePasswordSuccess() {
    ChangePasswordSuccess(navController = rememberNavController())
}

================================================================================

FILE 84: app\src\main\java\com\example\tumbuhnyata\ui\profile\ProfileScreen.kt
Lines: 246 | Size: 9769 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.profile

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.BottomNavigationBar
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.ProfileViewModel

@Composable
fun ProfileScreen(
    navController: NavController,
    viewModel: ProfileViewModel = viewModel()
) {
    val profileState by viewModel.profileState.collectAsState()
    
    Scaffold(
        bottomBar = {
            BottomNavigationBar(navController = navController)
        }
    ) { paddingValues ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(Color(0xFFF8F8F8))
                .padding(bottom = paddingValues.calculateBottomPadding())
        ) {
            Image(
                painter = painterResource(id = R.drawable.bg_circle_top),
                contentDescription = "background",
                modifier = Modifier
                    .size(300.dp)
                    .align(Alignment.TopStart)
                    .offset(x = (-30).dp, y = (-10).dp)
            )
            Image(
                painter = painterResource(id = R.drawable.bg_circle_bottom),
                contentDescription = "background",
                modifier = Modifier
                    .size(310.dp)
                    .align(Alignment.BottomEnd)
                    .offset(x = (40).dp, y = (0).dp)
            )
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(horizontal = 20.dp)
            ){
                Spacer(modifier = Modifier.height(20.dp))

                if (profileState.isLoading) {
                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                        CircularProgressIndicator(color = Color(0xFF27361F))
                    }
                } else if (profileState.error != null) {
                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                        Text(
                            text = profileState.error ?: "Terjadi kesalahan",
                            color = Color.Red,
                            fontFamily = PoppinsFontFamily,
                            fontSize = 16.sp
                        )
                    }
                } else {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(top = 95.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Image(
                            painter = painterResource(id = R.drawable.img_profile),
                            contentDescription = "Profile Picture",
                            modifier = Modifier
                                .size(60.dp)
                                .clip(CircleShape)
                                .border(3.dp, Color(0xFF4B4B4B), CircleShape)
                        )
                        Spacer(modifier = Modifier.width(20.dp))
                        Column(
                            modifier = Modifier
                                .wrapContentWidth()
                                .padding(end = 35.dp),
                        ) {
                            Text(
                                text = profileState.companyName,
                                fontSize = 26.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Bold
                            )
                            Text(
                                text = profileState.companyAddress,
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Normal,
                                color = Color(0xFF4B4B4B)
                            )
                        }

                    }
                }
                Spacer(modifier = Modifier.height(60.dp))
                ProfileOption("Verifikasi Akun", R.drawable.ic_verification_account, R.drawable.arrow_option, onClick = { navController.navigate("verification_one") })
                ProfileOption("Ganti Password", R.drawable.ic_change_password, R.drawable.arrow_option, onClick = {navController.navigate("change_password")})
                ProfileOption("Ganti Profile", R.drawable.ic_person, R.drawable.arrow_option, onClick = {navController.navigate("update_profile")})
                ProfileOption("Bantuan dan Dukungan", R.drawable.ic_help_support, R.drawable.arrow_option, onClick ={})
                ProfileOption("Bahasa", R.drawable.ic_langauge, R.drawable.arrow_option, onClick = {})
                ProfileOption("Tentang Aplikasi", R.drawable.ic_about, R.drawable.arrow_option, onClick = { navController.navigate("about") })

                Spacer(modifier = Modifier.height(20.dp))

                LogoutButton(
                    navController = navController,
                    onLogout = { viewModel.logout() }
                )
            }
        }
    }
}

@Composable
fun ProfileOption(title: String, iconStart: Int, iconEnd: Int, onClick: () -> Unit) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(bottom = 12.dp)
            .height(60.dp)
            .border(0.5.dp, Color(0xFFB0B0B0), RoundedCornerShape(10.dp))
            .clickable (onClick = onClick),
        colors = CardDefaults.cardColors(containerColor = Color(0xFFF8F8F8)),
        elevation = CardDefaults.elevatedCardElevation(2.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(10.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Image(
                painter = painterResource(id = iconStart),
                contentDescription = "Icon Option",
                modifier = Modifier.size(36.dp)
            )
            Spacer(modifier = Modifier.width(13.dp))
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(end = 10.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ){
                Text(
                    text = title,
                    fontSize = 18.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Medium,
                    lineHeight = 14.sp,
                    letterSpacing = 0.sp,
                    modifier = Modifier.width(243.dp)
                )
                Image(
                    painter = painterResource(id = iconEnd),
                    contentDescription = "Icon Arrow",
                    modifier = Modifier
                        .size(16.dp)
                        .align(alignment = Alignment.CenterVertically)
                )
            }
        }
    }
}

@Composable
fun LogoutButton(
    navController: NavController,
    onLogout: () -> Unit
) {
    Button(
        onClick = { 
            onLogout()
            navController.navigate("option") 
        },
        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF27361F)),
        shape = RoundedCornerShape(10.dp),
        modifier = Modifier
            .fillMaxWidth()
            .height(60.dp)
    ) {
        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_logout),
                contentDescription = "Icon Logout",
                modifier = Modifier
                    .size(32.dp)
            )
            Spacer(modifier = Modifier.width(20.dp))
            Text(
                text = "Logout",
                color = Color(0xFFF8F8F8),
                fontSize = 18.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.weight(1f)
            )
            Image(
                painter = painterResource(id = R.drawable.arrow_option),
                contentDescription = "Icon Arrow",
                modifier = Modifier.size(16.dp)
            )
        }
    }
}

@Preview
@Composable
fun PreviewProfileScreen() {
    ProfileScreen(navController = rememberNavController())
}

================================================================================

FILE 85: app\src\main\java\com\example\tumbuhnyata\ui\profile\UpdateProfile.kt
Lines: 156 | Size: 5366 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.profile

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Divider
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun UpdateProfile(navController: NavController) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
            .padding(horizontal = 24.dp, vertical = 70.dp)
    ) {
        Column(
            modifier = Modifier
                .padding(20.dp)
        ) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                Image(
                    painter = painterResource(id = R.drawable.img_profile), // Ganti dengan resource logo kamu
                    contentDescription = "Company Logo",
                    modifier = Modifier
                        .size(50.dp)
                        .clip(CircleShape)
                        .border(3.dp, Color(0xFF4B4B4B), CircleShape)
                )

                Spacer(modifier = Modifier.width(20.dp))

                Column {
                    Text(
                        text = "Nama Perusahaan",
                        fontSize = 12.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Normal,
                        color = Color(0xFF4B4B4B),
                        modifier = Modifier
                            .padding(bottom = 5.dp)
                    )
                    Text(
                        text = "PT Paragon Corp",
                        fontSize = 17.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF4B4B4B)
                    )
                    Divider()
                }
            }

            Text(
                text = "Ganti Foto",
                fontSize = 12.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Normal,
                color = Color(0xFF4B4B4B),
                modifier = Modifier
                    .padding(top = 9.dp)
                    .clickable { /* TODO: Open image picker */ }
            )

            Spacer(modifier = Modifier.height(46.dp))

            // Email
            Text(
                text = "Email*",
                fontSize = 12.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Normal,
                color = Color(0xFF4B4B4B)
            )
            Text(
                text = "csr@paragon.co.id",
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF989898),
                modifier = Modifier.padding(top = 5.dp)
            )
            Divider()

            Spacer(modifier = Modifier.height(35.dp))

            // Nomor Telepon
            Text(
                text = "Nomor Telepon*",
                fontSize = 12.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Normal,
                color = Color(0xFF4B4B4B)
            )
            Text(
                text = "2345 88907",
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF4B4B4B),
                modifier = Modifier.padding(top = 5.dp)
            )
            Divider()
        }

        Spacer(modifier = Modifier.weight(1f))

        // Tombol Simpan
        Button(
            onClick = { navController.navigate("profile") },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp)
                .padding(start = 1.dp),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(
                containerColor = Color(0xFF27361F)
            )
        ) {
            Text(
                text = "Simpan",
                color = Color.White,
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                textAlign = TextAlign.Center
            )
        }
    }
}
@Preview
@Composable
fun PreviewUpdateProfile() {
    UpdateProfile(navController = rememberNavController())
}

================================================================================

FILE 86: app\src\main\java\com\example\tumbuhnyata\ui\profile\VerificationOne.kt
Lines: 195 | Size: 7186 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.profile

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.VerificationOneViewModel

@Composable
fun VerificationOne(
    navController: NavController,
    viewModel: VerificationOneViewModel = viewModel()
) {
    val verificationState by viewModel.verificationState.collectAsState()

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF8F8F8))
    ) {
        Image(
            painter = painterResource(id = R.drawable.bg_circle_top),
            contentDescription = "background",
            modifier = Modifier
                .size(300.dp)
                .align(Alignment.TopStart)
                .offset(x = (-30).dp, y = (-10).dp)
        )
        Image(
            painter = painterResource(id = R.drawable.bg_circle_bottom),
            contentDescription = "background",
            modifier = Modifier
                .size(310.dp)
                .align(Alignment.BottomEnd)
                .offset(x = (40).dp, y = (0).dp)
        )
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(start = 20.dp, top = 80.dp, end = 20.dp)
        ) {
            TopBarProfile(
                title = "Verifikasi",
                step = "Langkah 1/2",
                iconResId = R.drawable.btn_back,
                onBackClick = { navController.popBackStack() }
            )

            Spacer(modifier = Modifier.height(50.dp))
            Text(
                text = "Unggah Dokumen Pendukung",
                fontSize = 22.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(start = 2.dp)
            )
            Text(
                text = "Unggah dokumen pendukung untuk melakukan verifikasi akun perusahaan anda",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF4B4B4B),
                modifier = Modifier.padding(start = 2.dp, top = 10.dp, end = 5.dp)
            )

            UploadField(
                label = "Akta Pendirian Perusahaan",
                fileName = verificationState.aktaFile,
                placeholder = "Akta Pendirian",
                onUploadClick = { viewModel.uploadAktaFile("SK Kemenkumham Paragon.pdf") },
                onDelete = { viewModel.deleteAktaFile() },
                modifier = Modifier.padding(top=40.dp)
            )

            UploadField(
                label = "Surat Keterangan Domisili Perusahaan",
                fileName = verificationState.skdpFile,
                placeholder = "SKDP",
                onUploadClick = { viewModel.uploadSkdpFile("Paragon-SKDP.pdf") },
                onDelete = { viewModel.deleteSkdpFile() },
                modifier = Modifier.padding(top=20.dp)
            )

            Spacer(modifier = Modifier.height(228.dp))

            Button(
                onClick = { navController.navigate("verification_two")},
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp)
                    .padding(start = 1.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(
                    if (verificationState.isBothFilesUploaded) Color(0xFF27361F) else Color(0xFF989898)
                ),
                enabled = verificationState.isBothFilesUploaded
            ) {
                Text(
                    text = "Selanjutnya",
                    color = Color.White,
                    fontSize = 20.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    textAlign = TextAlign.Center
                )
            }
        }
    }
}

@Composable
fun UploadField(
    label: String,
    fileName: String?,
    placeholder: String,
    onUploadClick: () -> Unit,
    onDelete: () -> Unit,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier
            .fillMaxWidth()
    ) {
        Text(text = label, fontSize = 18.sp, fontFamily = PoppinsFontFamily, fontWeight = FontWeight.Bold)
        Spacer(modifier = Modifier.height(10.dp))

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp)
                .border(2.dp, Color(0xFFB9B9B9), shape = RoundedCornerShape(10.dp))
                .padding(horizontal = 16.dp)
                .clickable { onUploadClick() },
            contentAlignment = Alignment.CenterStart
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.fillMaxWidth()
            ) {
                Image(
                    painter = painterResource(id = if (fileName != null) R.drawable.ic_doc else R.drawable.ic_upload),
                    contentDescription = "Icon",
                    modifier = Modifier.size(24.dp)
                )
                Spacer(modifier = Modifier.width(12.dp))

                Text(
                    text = fileName ?: placeholder,
                    fontSize = 16.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = if (fileName != null) FontWeight.SemiBold else FontWeight.Normal,
                    color = if (fileName != null) Color(0xFF686868) else Color(0xFFB8B8B8),
                    modifier = Modifier.weight(1f)
                )

                if (fileName != null) {
                    Image(
                        painter = painterResource(id = R.drawable.ic_cancel),
                        contentDescription = "Delete",
                        modifier = Modifier
                            .size(20.dp)
                            .clickable { onDelete() }
                    )
                }
            }
        }
    }
}

@Preview
@Composable
fun PreviewVerificationOne() {
    VerificationOne(navController = rememberNavController())
}

================================================================================

FILE 87: app\src\main\java\com\example\tumbuhnyata\ui\profile\VerificationSuccess.kt
Lines: 116 | Size: 4026 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.profile

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import androidx.compose.ui.layout.ContentScale
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.data.model.Notification
import com.example.tumbuhnyata.viewmodel.NotificationViewModel
import java.text.SimpleDateFormat
import java.util.*

@Composable
fun VerificationSuccess(navController: NavController) {

    Box(
        modifier = Modifier
            .fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        Image(
            painter = painterResource(id = R.drawable.background_sc),
            contentDescription = "Background",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.height(300.dp))

            Image(
                painter = painterResource(id = R.drawable.ic_verification_success),
                contentDescription = "Verification Success",
                modifier = Modifier
                    .width(136.dp)
                    .height(131.dp)
            )

            Spacer(modifier = Modifier.height(34.dp))

            Text(
                text = "Pengajuan Verifikasi Berhasil Dilakukan",
                fontSize = 24.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.ExtraBold,
                modifier = Modifier
                    .width(322.dp)
                    .height(76.dp)
            )

            Spacer(modifier = Modifier.height(14.dp))

            Text(
                text = "Aktivasi akun anda diterima paling lama 24 jam setelah pengajuan",
                fontSize = 18.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.Normal,
                modifier = Modifier
                    .width(353.dp)
            )

            Spacer(modifier = Modifier.height(100.dp))

            Button(
                onClick = { navController.navigate("profile") },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp)
                    .align(alignment = Alignment.CenterHorizontally),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF151E11))
            ) {
                Text(
                    text = "Kembali ke Beranda",
                    color = Color.White,
                    fontSize = 20.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }
}


@Preview
@Composable
fun PreviewVerificationSuccess() {
    VerificationSuccess(navController = rememberNavController())
}

================================================================================

FILE 88: app\src\main\java\com\example\tumbuhnyata\ui\profile\VerificationTwo.kt
Lines: 192 | Size: 6977 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.profile

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.VerificationTwoViewModel

@Composable
fun VerificationTwo(
    navController: NavController,
    viewModel: VerificationTwoViewModel = viewModel()
) {
    val verificationState by viewModel.verificationState.collectAsState()
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF8F8F8))
    ) {
        Image(
            painter = painterResource(id = R.drawable.bg_circle_top),
            contentDescription = "background",
            modifier = Modifier
                .size(300.dp)
                .align(Alignment.TopStart)
                .offset(x = (-30).dp, y = (-10).dp)
        )
        Image(
            painter = painterResource(id = R.drawable.bg_circle_bottom),
            contentDescription = "background",
            modifier = Modifier
                .size(310.dp)
                .align(Alignment.BottomEnd)
                .offset(x = (40).dp, y = (0).dp)
        )
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(start = 20.dp, top = 80.dp, end = 20.dp)
        ) {
            TopBarProfile(
                title = "Verifikasi",
                step = "Langkah 2/2",
                iconResId = R.drawable.btn_back,
                onBackClick = { navController.popBackStack() }
            )

            Spacer(modifier = Modifier.height(50.dp))

            Text(
                text = "Unggah Data Diri PIC",
                fontSize = 23.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(start = 2.dp)
            )
            Text(
                text = "Lakukan unggah scan kartu identitas PIC atau penanggungjawab perusahaan (KTP/Paspor)",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF4B4B4B),
                modifier = Modifier.padding(start = 2.dp, top = 10.dp, end = 5.dp)
            )

            Spacer(modifier = Modifier.height(30.dp))

            UploadBox(
                fileName = verificationState.picFile,
                onUploadClick = { viewModel.uploadPicFile("KTP_Virna.jpg") },
                onCancelClick = { viewModel.deletePicFile() }
            )

            Spacer(modifier = Modifier.height(256.dp))

            Button(
                onClick = {navController.navigate("verification_success")},
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(10.dp),
                enabled = verificationState.isFileUploaded,
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (verificationState.isFileUploaded) Color(0xFF27361F) else Color(0xFF989898)
                )
            ) {
                Text(
                    text = "Selanjutnya",
                    color = Color.White,
                    fontSize = 20.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    textAlign = TextAlign.Center
                )
            }
        }
    }
}

@Composable
fun UploadBox(
    fileName: String?,
    onUploadClick: () -> Unit,
    onCancelClick: () -> Unit
) {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .height(170.dp)
            .border(2.dp, Color(0xFFB9B9B9), shape = RoundedCornerShape(10.dp))
            .background(Color(0xFFFFFFFF), shape = RoundedCornerShape(10.dp))
            .clickable { if (fileName == null) onUploadClick() },
        contentAlignment = Alignment.Center
    ) {
        if (fileName != null) {
            Column(
                modifier = Modifier.align(Alignment.Center),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Image(
                    painter = painterResource(id = R.drawable.ic_doc),
                    contentDescription = "Uploaded File Icon",
                    modifier = Modifier.size(28.dp)
                )
                Spacer(modifier = Modifier.height(18.dp))
                Text(
                    text = fileName,
                    fontSize = 16.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Medium,
                    color = Color(0Xff686868),
                    textAlign = TextAlign.Center
                )
            }

            Image(
                painter = painterResource(id = R.drawable.ic_cancel),
                contentDescription = "Cancel Upload",
                modifier = Modifier
                    .size(50.dp)
                    .align(Alignment.TopEnd)
                    .padding(12.dp)
                    .clickable { onCancelClick() }
            )
        } else {
            Column(
                modifier = Modifier.align(Alignment.Center),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Image(
                    painter = painterResource(id = R.drawable.ic_upload_file),
                    contentDescription = "Upload Icon",
                    modifier = Modifier.size(28.dp)
                )
                Spacer(modifier = Modifier.height(18.dp))
                Text(
                    text = "Pilih file JPG, JPEG, PNG, dan PDF",
                    fontSize = 16.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Medium,
                    color = Color(0xFFB9B9B9),
                    textAlign = TextAlign.Center
                )
            }
        }
    }
}

@Preview
@Composable
fun PreviewVerificationTwo() {
    VerificationTwo(navController = rememberNavController())
}

================================================================================

FILE 89: app\src\main\java\com\example\tumbuhnyata\ui\register\AkunBerhasil.kt
Lines: 106 | Size: 3629 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.register

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun AkunBerhasil(navController: NavController) {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        // Background
        Image(
            painter = painterResource(id = R.drawable.bg_sukses),
            contentDescription = "Background",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.height(300.dp))

            Image(
                painter = painterResource(id = R.drawable.ic_check),
                contentDescription = "Berhasil Buat Akun",
                modifier = Modifier.size(117.dp)
            )

            Spacer(modifier = Modifier.height(29.dp))

            Text(
                text = "Berhasil",
                fontSize = 30.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.ExtraBold
            )

            Text(
                text = "Membuat Akun",
                fontSize = 30.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.ExtraBold
            )

            Spacer(modifier = Modifier.height(226.dp))

            Button(
                onClick = { navController.navigate("home") },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF151E11))
            ) {
                Text(
                    text = "Mulai",
                    color = Color.White,
                    fontSize = 17.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }
}

@Preview
@Composable
fun PreviewAkunBerhasil() {
    AkunBerhasil(navController = rememberNavController())
}

================================================================================

FILE 90: app\src\main\java\com\example\tumbuhnyata\ui\register\OtpScreen.kt
Lines: 208 | Size: 7309 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.register

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.key.*
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlinx.coroutines.delay
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun OtpScreen(navController: NavController) {
    var otpCode by remember { mutableStateOf(List(4) { TextFieldValue("") }) }
    var isTimerRunning by remember { mutableStateOf(true) }
    var timer by remember { mutableStateOf(30) }
    val focusRequesters = List(4) { FocusRequester() }

    val isOtpFilled = otpCode.all { it.text.isNotEmpty() } // Cek apakah OTP sudah terisi penuh

    // Countdown timer coroutine
    LaunchedEffect(isTimerRunning) {
        while (timer > 0 && isTimerRunning) {
            delay(1000L)
            timer--
        }
        isTimerRunning = false
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
            .padding(20.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Spacer(modifier = Modifier.height(24.dp))

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 8.dp, top = 8.dp),
            contentAlignment = Alignment.TopStart
        ) {
            Image(
                painter = painterResource(id = R.drawable.btn_back),
                contentDescription = "Kembali",
                modifier = Modifier
                    .size(32.dp)
                    .clickable { navController.navigate("verifikasi") }
            )
        }

        Spacer(modifier = Modifier.height(35.dp))

        Image(
            painter = painterResource(id = R.drawable.illustration2),
            contentDescription = "Illustration 2",
            modifier = Modifier
                .fillMaxWidth()
                .height(264.dp)
        )

        Spacer(modifier = Modifier.height(50.dp))

        Text(
            text = "Masukkan Kode OTP",
            fontSize = 30.sp,
            fontFamily = PoppinsFontFamily,
            textAlign = TextAlign.Center,
            fontWeight = FontWeight.Bold,
            color = Color(0xFF27361F)
        )

        Spacer(modifier = Modifier.height(13.dp))

        Text(
            text = "Kode OTP sudah dikirimkan melalui email Anda",
            fontSize = 17.sp,
            fontFamily = PoppinsFontFamily,
            textAlign = TextAlign.Center,
            color = Color(0xFF27361F)
        )

        Spacer(modifier = Modifier.height(32.dp))

        // Kotak OTP berbentuk bulat
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceEvenly
        ) {
            otpCode.forEachIndexed { index, textValue ->
                OutlinedTextField(
                    value = textValue,
                    onValueChange = {
                        if (it.text.length <= 1 && it.text.all { char -> char.isDigit() }) {
                            val newOtp = otpCode.toMutableList()
                            newOtp[index] = it
                            otpCode = newOtp

                            if (it.text.isNotEmpty() && index < 3) {
                                focusRequesters[index + 1].requestFocus()
                            }
                        }
                    },
                    shape = CircleShape,
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                    singleLine = true,
                    modifier = Modifier
                        .size(60.dp)
                        .focusRequester(focusRequesters[index])
                        .onPreviewKeyEvent { event ->
                            if (event.type == KeyEventType.KeyDown && event.key == Key.Backspace) {
                                if (otpCode[index].text.isEmpty() && index > 0) {
                                    focusRequesters[index - 1].requestFocus()
                                }
                            }
                            false
                        },
                    textStyle = LocalTextStyle.current.copy(
                        fontSize = 25.sp,
                        fontWeight = FontWeight.Bold,
                        textAlign = TextAlign.Center
                    )
                )
            }
        }

        Spacer(modifier = Modifier.height(62.dp))

        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = "Tidak menerima kode?",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.Black
            )
            Spacer(modifier = Modifier.width(4.dp))
            Text(
                text = "Kirim ulang",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = if (isTimerRunning) Color.Gray else Color.Black,
                modifier = Modifier
                    .clickable(enabled = !isTimerRunning) {
                        if (!isTimerRunning) {
                            timer = 30
                            isTimerRunning = true
                        }
                    }
            )
        }

        Spacer(modifier = Modifier.height(19.dp))

        // Timer
        Text(
            text = "0:${if (timer < 10) "0$timer" else timer}",
            fontSize = 20.sp,
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.Bold,
            color = Color.Black
        )

        Spacer(modifier = Modifier.height(50.dp))

        Button(
            onClick = { navController.navigate("akunberhasil") },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(
                containerColor = if (isOtpFilled) Color(0xFF27361F) else Color.Gray
            ),
            enabled = isOtpFilled
        ) {
            Text(
                text = "Verifikasi",
                color = Color.White,
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }
    }
}


================================================================================

FILE 91: app\src\main\java\com\example\tumbuhnyata\ui\register\RegisterScreen.kt
Lines: 766 | Size: 26519 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.register

import androidx.compose.animation.AnimatedContent
import androidx.compose.animation.ExperimentalAnimationApi
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Checkbox
import androidx.compose.material3.Divider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.RegisterViewModel
import kotlinx.coroutines.launch

@OptIn(ExperimentalAnimationApi::class)
@Composable
fun RegisterScreen(
    navController: NavController,
    viewModel: RegisterViewModel = viewModel()
) {
    val currentStep by viewModel.currentStep.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()
    val errorMessage by viewModel.errorMessage.collectAsState()
    val registerSuccess by viewModel.registerSuccess.collectAsState()
    val context = LocalContext.current
    val scope = rememberCoroutineScope()
    val snackbarHostState = remember { SnackbarHostState() }
    
    LaunchedEffect(errorMessage) {
        errorMessage?.let {
            scope.launch {
                snackbarHostState.showSnackbar(it)
                viewModel.clearError()
            }
        }
    }
    
    LaunchedEffect(registerSuccess) {
        if (registerSuccess) {
            navController.navigate("verifikasi")
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
    ) {
        Column(
            modifier = Modifier.fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            HeaderSection()

            Spacer(modifier = Modifier.height(20.dp))

            StepIndicator(currentStep = currentStep)

            AnimatedContent(targetState = currentStep, label = "Register Steps") { step ->
                when (step) {
                    1 -> StepOne(viewModel = viewModel, onNext = { viewModel.nextStep() })
                    2 -> StepTwo(viewModel = viewModel, onNext = { viewModel.nextStep() })
                    3 -> StepThree(viewModel = viewModel, navController = navController)
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Sign Up Text
            Row {
                Text(
                    "Sudah mempunyai akun? ",
                    color = Color.Black,
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal
                )
                Text(
                    "Masuk",
                    color = Color.Black,
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    textDecoration = TextDecoration.Underline,
                    modifier = Modifier.clickable {
                        navController.navigate("login")
                    }
                )
            }
        }
        
        SnackbarHost(
            hostState = snackbarHostState,
            modifier = Modifier.align(Alignment.BottomCenter)
        )
        
        if (isLoading) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(Color.Black.copy(alpha = 0.5f)),
                contentAlignment = Alignment.Center
            ) {
                CircularProgressIndicator(color = Color(0xFFA5C295))
            }
        }
    }
}

@Composable
fun HeaderSection() {
    Image(
        painter = painterResource(id = R.drawable.register_header),
        contentDescription = "Header",
        modifier = Modifier
            .fillMaxWidth()
            .height(270.dp),
        contentScale = ContentScale.Crop
    )
}

@Composable
fun StepIndicator(currentStep: Int) {
    val stepCount = 3
    val activeColor = Color(0xFFA5C295)
    val idleColor = Color.White
    val inactiveColor = Color.LightGray.copy(alpha = 0.5f)
    val lineColor = Color.Black
    val lineInactiveColor = Color.LightGray.copy(alpha = 0.5f)

    Row(
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.Center,
        modifier = Modifier.width(IntrinsicSize.Min)
    ) {
        for (i in 1..stepCount) {
            if (i > 1) {
                val lineBetweenColor = if (i - 2 < currentStep) lineColor else lineInactiveColor

                Spacer(modifier = Modifier.width(4.dp))
                Box(
                    modifier = Modifier
                        .height(2.dp)
                        .width(79.dp)
                        .background(lineBetweenColor)
                )
                Spacer(modifier = Modifier.width(4.dp))
            }

            val indicatorColor = when {
                i < currentStep -> activeColor
                i == currentStep -> activeColor
                i == currentStep + 1 -> idleColor
                else -> inactiveColor
            }

            Box(
                contentAlignment = Alignment.Center,
                modifier = Modifier
                    .size(27.dp)
                    .clip(CircleShape)
                    .background(if (indicatorColor == activeColor) activeColor else Color.White)
                    .border(2.dp, if (indicatorColor == inactiveColor) inactiveColor else Color.Black, CircleShape)
            ) {
                Text(
                    text = i.toString(),
                    color = if (indicatorColor == inactiveColor) inactiveColor else Color.Black,
                    fontFamily = PoppinsFontFamily,
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Medium,
                )
            }
        }
    }
}

@Composable
fun StepOne(viewModel: RegisterViewModel, onNext: () -> Unit) {
    val companyName by viewModel.companyName.collectAsState()
    val email by viewModel.email.collectAsState()
    val phoneNumber by viewModel.phoneNumber.collectAsState()
    val nib by viewModel.nib.collectAsState()
    
    var isEmailValid by remember { mutableStateOf(true) }
    var isPhoneValid by remember { mutableStateOf(true) }
    var isNIBValid by remember { mutableStateOf(true) }
    
    val isNextAvailable = companyName.isNotBlank() &&
                           email.isNotBlank() && isEmailValid &&
                           phoneNumber.isNotBlank() && isPhoneValid &&
                           nib.isNotBlank() && isNIBValid

    Column(modifier = Modifier.padding(16.dp)) {

        Spacer(modifier = Modifier.height(4.dp))

        // nama perusahaan
        OutlinedTextField(
            value = companyName,
            onValueChange = { viewModel.updateCompanyName(it) },
            label = {
                Text(
                    "Nama Perusahaan",
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                    fontSize = 14.sp,
                ) },
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_office),
                    modifier = Modifier.size(18.dp),
                    contentDescription = "Office Icon"
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(55.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true
        )

        Spacer(modifier = Modifier.height(13.dp))

        // email perusahaan
        OutlinedTextField(
            value = email,
            onValueChange = {
                viewModel.updateEmail(it)
                isEmailValid = it.contains("@")
            },
            label = {
                Text(
                    "Email Perusahaan",
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                )
            },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_email),
                    modifier = Modifier.size(20.dp),
                    contentDescription = "Email Icon"
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true,
        )

        // Menampilkan warning jika email tidak valid
        if (!isEmailValid) {
            Text(
                text = "Email harus mengandung '@'",
                color = Color.Red,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier
                    .padding(top = 4.dp)
                    .align(Alignment.Start)
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        // no telp perusahaan
        OutlinedTextField(
            value = phoneNumber,
            onValueChange = { newValue ->
                if (newValue.all { it.isDigit() } && newValue.length <= 13) {
                    viewModel.updatePhoneNumber(newValue)
                    isPhoneValid = newValue.length >= 10
                }
            },
            label = {
                Text(
                    "Nomor Telepon Kantor" ,
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                    fontSize = 14.sp,
                ) },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_phone),
                    modifier = Modifier.size(18.dp),
                    contentDescription = "Phone Icon"
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(55.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true
        )

        // Menampilkan warning jika nomor telepon tidak valid
        if (!isPhoneValid && phoneNumber.isNotBlank()) {
            Text(
                text = "Nomor telepon harus terdiri dari 10 hingga 13 digit",
                color = Color.Red,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier
                    .padding(top = 4.dp)
                    .align(Alignment.Start)
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        // nib perusahaan
        OutlinedTextField(
            value = nib,
            onValueChange = { newValue ->
                if (newValue.all { it.isDigit() } && newValue.length <= 12) {
                    viewModel.updateNIB(newValue)
                    isNIBValid = newValue.length == 12
                }
            },
            label = {
                Text(
                    "NIB (Nomor Induk Berusaha)" ,
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                    fontSize = 14.sp,
                ) },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_doc),
                    modifier = Modifier.size(18.dp),
                    contentDescription = "Document Icon"
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(55.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true
        )

        // Menampilkan warning jika NIB tidak valid
        if (!isNIBValid && nib.isNotBlank()) {
            Text(
                text = "NIB harus terdiri dari 12 digit",
                color = Color.Red,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier
                    .padding(top = 4.dp)
                    .align(Alignment.Start)
            )
        }

        Spacer(modifier = Modifier.height(33.dp))

        Button(
            onClick = onNext,
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(
                if (isNextAvailable) Color(0xFF27361F) else Color(0xFF989898)
            ),
            enabled = isNextAvailable
        ) {
            Text(
                text = "Selanjutnya",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                fontSize = 17.sp,
                color = Color.White)
        }

        Spacer(modifier = Modifier.height(16.dp))

        // Google Sign-Up Button
        Button(
            onClick = { /* Handle Google Sign-Up */ },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp)
                .border(1.dp, Color.Black, RoundedCornerShape(10.dp)),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(Color.White)
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_google),
                contentDescription = "Google Icon",
                modifier = Modifier.size(20.dp)
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text(
                "Masuk dengan Google",
                color = Color.Black,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }
    }
}

@Composable
fun StepTwo(viewModel: RegisterViewModel, onNext: () -> Unit) {
    val address by viewModel.address.collectAsState()
    
    Column(
        modifier = Modifier.padding(16.dp)
    ){
        Spacer(modifier = Modifier.height(4.dp))

        Text(
            "Lokasi Kantor",
            color = Color.Black,
            fontSize = 25.sp,
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.Bold,
            textAlign = TextAlign.Center,
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(33.dp))

        // Alamat Perusahaan input field
        OutlinedTextField(
            value = address,
            onValueChange = { viewModel.updateAddress(it) },
            label = { Text(
                "Alamat Perusahaan",
                color = Color(0xFF686868),
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Normal,
                fontSize = 14.sp
            ) },
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_office),
                    contentDescription = "Office Icon",
                    modifier = Modifier.size(18.dp)
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(55.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true
        )

        Spacer(modifier = Modifier.height(170.dp))

        Button(
            onClick = onNext,
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(Color(0xFF27361F))
        ) {
            Text(
                text = "Selanjutnya",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                fontSize = 17.sp,
                color = Color.White)
        }

        Spacer(modifier = Modifier.height(16.dp))

        Button(
            onClick = { /* Handle Google Sign-Up */ },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp)
                .border(1.dp, Color.Black, RoundedCornerShape(10.dp)),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(Color.White)
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_google),
                contentDescription = "Google Icon",
                modifier = Modifier.size(20.dp)
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text(
                "Masuk dengan Google",
                color = Color.Black,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                fontSize = 14.sp
            )
        }
    }
}

@Composable
fun StepThree(viewModel: RegisterViewModel, navController: NavController) {
    val companyEmail by viewModel.email.collectAsState()
    val password by viewModel.password.collectAsState()
    
    var picName by remember { mutableStateOf("") }
    var picEmail by remember { mutableStateOf("") }
    var isPicEmailValid by remember { mutableStateOf(true) }
    var isPasswordValid by remember { mutableStateOf(true) }
    var passwordVisible by remember { mutableStateOf(false) }
    var isChecked by remember { mutableStateOf(false) }
    
    LaunchedEffect(password) {
        isPasswordValid = password.length >= 8
    }
    
    val annotatedString = buildAnnotatedString {
        append("Dengan melakukan login atau registrasi, Anda menyetujui ")

        withStyle(style = SpanStyle(fontWeight = FontWeight.Bold, fontFamily = PoppinsFontFamily)) {
            append("Syarat & Ketentuan")
        }

        append(" serta ")

        withStyle(style = SpanStyle(fontWeight = FontWeight.Bold, fontFamily = PoppinsFontFamily)) {
            append("Kebijakan Privasi")
        }
    }
    val isFormValid = picName.isNotBlank() && password.isNotBlank() && isPasswordValid && isChecked

    Column(modifier = Modifier.padding(16.dp)) {
        Text(
            "Penanggung Jawab Akun",
            color = Color.Black,
            fontSize = 25.sp,
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.Bold,
            textAlign = TextAlign.Center,
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(15.dp))

        // nama pic
        OutlinedTextField(
            value = picName,
            onValueChange = { picName = it },
            label = {
                Text(
                    "Nama PIC CSR",
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                    fontSize = 14.sp,
                ) },
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_person),
                    modifier = Modifier.size(20.dp),
                    contentDescription = "PIC Name Icon"
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(55.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true
        )

        Spacer(modifier = Modifier.height(16.dp))

        // email pic (using same as company email)
        OutlinedTextField(
            value = companyEmail,
            onValueChange = {
                // Using company email, so not editable here
            },
            enabled = false,
            label = {
                Text(
                    "Email Perusahaan",
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                )
            },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_email),
                    modifier = Modifier.size(20.dp),
                    contentDescription = "Email Icon"
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true,
        )

        Spacer(modifier = Modifier.height(16.dp))

        // password pic
        OutlinedTextField(
            value = password,
            onValueChange = {
                viewModel.updatePassword(it)
            },
            label = {
                Text(
                    "Kata Sandi",
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal
                )
            },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),
            visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_password),
                    modifier = Modifier.size(18.dp),
                    contentDescription = "Password Icon"
                )
            },
            trailingIcon = {
                IconButton(onClick = { passwordVisible = !passwordVisible }) {
                    Icon(
                        painter = painterResource(id = if (passwordVisible) R.drawable.ic_visibility else R.drawable.ic_visibility_off),
                        contentDescription = if (passwordVisible) "Hide password" else "Show password",
                        modifier = Modifier.size(20.dp)
                    )
                }
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true
        )

        // Menampilkan warning jika password kurang dari 8 karakter
        if (!isPasswordValid) {
            Text(
                text = "Minimal 8 karakter",
                color = Color.Red,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier
                    .padding(top = 4.dp)
                    .align(Alignment.Start)
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        Row(verticalAlignment = Alignment.CenterVertically) {
            Checkbox(
                checked = isChecked,
                onCheckedChange = { isChecked = it }
            )
            Text(
                text = annotatedString,
                fontSize = 12.sp,
                color = Color.Black,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Normal
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        Button(
            onClick = { viewModel.register() },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(
                if (isFormValid) Color(0xFF27361F) else Color(0xFF989898)
            ),
            enabled = isFormValid
        ) {
            Text(
                text = "Daftar",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                fontSize = 17.sp,
                color = Color.White,
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        Button(
            onClick = { /* Handle Google Sign-Up */ },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp)
                .border(1.dp, Color.Black, RoundedCornerShape(10.dp)),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(Color.White)
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_google),
                contentDescription = "Google Icon",
                modifier = Modifier.size(20.dp)
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text(
                "Masuk dengan Google",
                color = Color.Black,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }
    }
}

@Preview
@Composable
fun PreviewRegisterScreen() {
    val navController = rememberNavController()
    RegisterScreen(navController = navController)
}


================================================================================

FILE 92: app\src\main\java\com\example\tumbuhnyata\ui\register\VerifikasiScreen.kt
Lines: 131 | Size: 4323 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.register

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.InputField
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun VerifikasiScreen(navController: NavController) {
    var email by remember { mutableStateOf("") }
    var isEmailValid by remember { mutableStateOf(true) }

    val isFormFilled = email.isNotEmpty() && email.contains("@")

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
            .padding(20.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Spacer(modifier = Modifier.height(40.dp))

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 8.dp, top = 8.dp),
            contentAlignment = Alignment.TopStart
        ) {
            Image(
                painter = painterResource(id = R.drawable.btn_back),
                contentDescription = "Kembali",
                modifier = Modifier
                    .size(32.dp) // Ukuran tombol back
                    .clickable { navController.navigate("login") } // Navigasi kembali ke halaman option
            )
        }

        Spacer(modifier = Modifier.height(35.dp))

        Image(
            painter = painterResource(id = R.drawable.illustration),
            contentDescription = "Illustration",
            modifier = Modifier
                .fillMaxWidth()
                .height(264.dp)
        )

        Spacer(modifier = Modifier.height(50.dp))

        Text(
            text = "Masuk",
            fontSize = 30.sp,
            fontFamily = PoppinsFontFamily,
            modifier = Modifier.align(Alignment.Start),
            fontWeight = FontWeight.Bold,
            color = Color(0xFF27361F)
        )

        Spacer(modifier = Modifier.height(13.dp))

        Text(
            text = "Masukkan email anda untuk mendapatkan kode OTP",
            fontSize = 17.sp,
            fontFamily = PoppinsFontFamily,
            textAlign = TextAlign.Justify,
            color = Color(0xFF27361F)
        )

        Spacer(modifier = Modifier.height(28.dp))

        InputField(
            value = email,
            onValueChange = {
                email = it
                isEmailValid = it.contains("@") // Validasi email harus mengandung "@"
            },
            iconRes = R.drawable.ic_email,
            label = "Email Perusahaan"
        )
        if (!isEmailValid) {
            Text(
                text = "Email harus mengandung '@'",
                color = Color.Red,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier.align(Alignment.Start)
            )
        }

        Spacer(modifier = Modifier.height(19.dp))

        Button(
            onClick = { navController.navigate("otp") },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(
                containerColor = if (isFormFilled) Color(0xFF27361F) else Color.Gray
            )
        ) {
            Text(
                text = "Kirim Kode OTP",
                color = Color.White,
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }
    }
}


================================================================================

FILE 93: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\DetailRiwayatScreen.kt
Lines: 284 | Size: 11222 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.detail

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.data.model.CsrItem
import com.example.tumbuhnyata.data.model.SubStatus
import com.example.tumbuhnyata.data.model.dummyCsrList
import com.example.tumbuhnyata.data.model.getSubStatusEmoji
import com.example.tumbuhnyata.ui.component.poppins
import com.example.tumbuhnyata.ui.riwayat.TimelineStep
import com.example.tumbuhnyata.ui.riwayat.VerticalTimeline
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.component.CsrCard
import com.example.tumbuhnyata.ui.component.SuccessDialog
import com.example.tumbuhnyata.ui.riwayat.MendatangDetailScreen
import com.example.tumbuhnyata.ui.riwayat.ProgressDetailScreen
import com.example.tumbuhnyata.ui.riwayat.SelesaiDetailScreen

@Composable
fun CsrDetailScreen(
    csr: CsrItem,
    onBack: () -> Unit,
    onNavigateToInvoice: () -> Unit,
    onNavigateToUploadRevisi: () -> Unit
) {
    when (csr.subStatus) {
        SubStatus.MENDATANG -> MendatangDetailScreen(csr = csr, onBack = onBack)
        SubStatus.PROGRESS -> ProgressDetailScreen(csr = csr, onBack = onBack)
        SubStatus.SELESAI -> SelesaiDetailScreen(csr = csr, onBack = onBack)
        else -> ReviewDetailScreen(
            csr = csr,
            onBack = onBack,
            onNavigateToInvoice = onNavigateToInvoice,
            onNavigateToUploadRevisi = onNavigateToUploadRevisi
        )
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun ReviewDetailScreen(
    csr: CsrItem,
    onBack: () -> Unit,
    onNavigateToInvoice: () -> Unit,
    onNavigateToUploadRevisi: () -> Unit
) {
    var showProposalSuccessDialog by remember { mutableStateOf(false) }
    var showRevisionSuccessDialog by remember { mutableStateOf(false) }

    Scaffold(

        topBar = {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White)
                    .padding(start = 16.dp, top = 24.dp, bottom = 16.dp, end = 16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(32.dp)
                        .clip(CircleShape)
                        .background(Color(0xFF2C3E1F))
                        .clickable { onBack() },
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.ArrowBack,
                        contentDescription = "Back",
                        tint = Color.White
                    )
                }
                Spacer(modifier = Modifier.width(16.dp))
                Text(
                    "Status Riwayat CSR",
                    fontSize = 25.sp,
                    fontWeight = FontWeight.Bold,
                    fontFamily = poppins
                )
            }
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .padding(innerPadding)

                .fillMaxSize()
                .background(Color(0xFFF7F7F7))
                .padding(16.dp)
                .verticalScroll(rememberScrollState())
        ) {
            // CSR Card with elevation
            Card(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
            ) {
                CsrCard(item = csr)
            }
            
            Spacer(modifier = Modifier.height(16.dp))

            // Download Proposal Button
            Button(
                onClick = { showProposalSuccessDialog = true },
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF2C3E1F)
                )
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.Center
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_download),
                        contentDescription = "Download",
                        modifier = Modifier.size(20.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        "Download Proposal Rancangan",
                        fontFamily = poppins,
                        fontWeight = FontWeight.SemiBold
                    )
                }
            }

            // Additional button for MEMERLUKAN_REVISI status
            if (csr.subStatus == SubStatus.MEMERLUKAN_REVISI) {
                Spacer(modifier = Modifier.height(8.dp))
                Button(
                    onClick = { showRevisionSuccessDialog = true },
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(8.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF2C3E1F)
                    )
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.Center
                    ) {
                        Icon(
                            painter = painterResource(id = R.drawable.ic_download),
                            contentDescription = "Download",
                            modifier = Modifier.size(20.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            "Lihat Panduan Revisi",
                            fontFamily = poppins,
                            fontWeight = FontWeight.SemiBold
                        )
                    }
                }
            }

            // Additional button for MENUNGGU_PEMBAYARAN status
            if (csr.subStatus == SubStatus.MENUNGGU_PEMBAYARAN) {
                Spacer(modifier = Modifier.height(8.dp))
                Button(
                    onClick = onNavigateToInvoice,
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(8.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF2C3E1F)
                    )
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.Center
                    ) {
                        Icon(
                            painter = painterResource(id = R.drawable.ic_invoice),
                            contentDescription = "Invoice",
                            modifier = Modifier.size(20.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            "Detail Invoice",
                            fontFamily = poppins,
                            fontWeight = FontWeight.SemiBold
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Timeline
            val timelineSteps = when (csr.subStatus) {
                SubStatus.MENUNGGU_PEMBAYARAN -> listOf(
                    TimelineStep("Pengajuan Dikirim", "10/05/2024 - 09:41 WIB", isCompleted = true),
                    TimelineStep("Review & Evaluasi", "10/05/2024 - 09:50 WIB", isCompleted = true),
                    TimelineStep("Pembayaran", "10/05/2024 - 10:00 WIB", isInProgress = true),
                    TimelineStep("Implementasi Program")
                )
                else -> listOf(
                    TimelineStep("Pengajuan Dikirim", "10/05/2024 - 09:41 WIB", isCompleted = true),
                    TimelineStep(
                        title = when (csr.subStatus) {
                            SubStatus.MEMERLUKAN_REVISI -> "Review & Evaluasi - Revisi Diperlukan"
                            else -> "Review & Evaluasi"
                        },
                        date = "10/05/2024 - 09:50 WIB",
                        isInProgress = true
                    ),
                    TimelineStep("Pembayaran", "10/05/2024 - 10:00 WIB"),
                    TimelineStep("Implementasi Program")
                )
            }
            VerticalTimeline(steps = timelineSteps)
        }

        // Sticky Upload Revisi button at the bottom for MEMERLUKAN_REVISI
        if (csr.subStatus == SubStatus.MEMERLUKAN_REVISI) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
            ) {
                Button(
                    onClick = onNavigateToUploadRevisi,
                    modifier = Modifier
                        .align(Alignment.BottomCenter)
                        .fillMaxWidth()
                        .padding(16.dp, 16.dp, 30.dp, 16.dp),
                    shape = RoundedCornerShape(8.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF2C3E1F)
                    )
                ) {
                    Text(
                        "Upload Revisi",
                        fontFamily = poppins,
                        fontWeight = FontWeight.SemiBold
                    )
                }
            }
        }

        // Success Dialogs
        if (showProposalSuccessDialog) {
            SuccessDialog(
                message = "Berhasil mengunduh proposal rancangan",
                onDismiss = { showProposalSuccessDialog = false }
            )
        }

        if (showRevisionSuccessDialog) {
            SuccessDialog(
                message = "Berhasil mengunduh panduan revisi",
                onDismiss = { showRevisionSuccessDialog = false }
            )
        }
    }
}

@Preview(showBackground = true, showSystemUi = true)
@Composable
fun PreviewCsrDetailScreen() {
    CsrDetailScreen(csr = dummyCsrList[0], onBack = {}, onNavigateToInvoice = {}, onNavigateToUploadRevisi = {})
}

================================================================================

FILE 94: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\DiterimaScreen.kt
Lines: 102 | Size: 3317 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.tumbuhnyata.data.model.CsrItem
import com.example.tumbuhnyata.data.model.dummyCsrList
import com.example.tumbuhnyata.ui.component.CsrCard
import com.example.tumbuhnyata.ui.component.poppins
import com.example.tumbuhnyata.viewmodel.RiwayatViewModel

@Composable
fun DiterimaScreen(
    riwayatViewModel: RiwayatViewModel = viewModel(),
    onBack: () -> Unit,
    onCsrCardClick: (CsrItem) -> Unit
) {
    val diterimaList by riwayatViewModel.diterimaItems.collectAsState()


    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF7F7F7))
    ) {
        // Header
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .background(Color.White)
                .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 16.dp)
        ) {
            Box(
                modifier = Modifier
                    .size(32.dp)
                    .clip(CircleShape)
                    .background(Color(0xFF2C3E1F)) // hijau tua
                    .clickable(onClick = onBack),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    imageVector = Icons.Default.ArrowBack,
                    contentDescription = "Back",
                    tint = Color.White
                )
            }
            Spacer(modifier = Modifier.width(16.dp))
            Text(
                "Diterima",
                fontSize = 25.sp,
                fontWeight = FontWeight.Bold,
                fontFamily = poppins
            )
        }

        // List Riwayat History
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(bottom = 16.dp)
        ) {
            items(diterimaList) { item ->
                CsrCard(item = item) {
                    onCsrCardClick(item)
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun DiterimaScreenPreview() {
    val dummyViewModel = remember {
        object : RiwayatViewModel(dummyList = dummyCsrList) {} // Anonymous object for preview
    }
    DiterimaScreen(
        riwayatViewModel = dummyViewModel,
        onBack = {},
        onCsrCardClick = {}
    )
}

================================================================================

FILE 95: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\InvoiceScreen.kt
Lines: 151 | Size: 5422 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.component.poppins
import com.example.tumbuhnyata.ui.component.SuccessDialog

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun InvoiceScreen(
    onBack: () -> Unit
) {
    var showInvoiceDialog by remember { mutableStateOf(false) }
    var showSuccessDialog by remember { mutableStateOf(false) }

    Scaffold(
        topBar = {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White)
                    .padding(16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(40.dp)
                        .clip(CircleShape)
                        .background(Color(0xFF2C3E1F))
                        .clickable { onBack() },
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.ArrowBack,
                        contentDescription = "Back",
                        tint = Color.White
                    )
                }
                Spacer(modifier = Modifier.width(16.dp))
                Text(
                    "Invoice",
                    fontSize = 25.sp,
                    fontWeight = FontWeight.Bold,
                    fontFamily = poppins
                )
            }
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .fillMaxSize()
                .background(Color(0xFFF7F7F7))
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // Invoice Card
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { showInvoiceDialog = true },
                shape = RoundedCornerShape(8.dp),
                colors = CardDefaults.cardColors(containerColor = Color.White)
            ) {
                Image(
                    painter = painterResource(id = R.drawable.invoice_example),
                    contentDescription = "Invoice",
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(500.dp),
                    contentScale = ContentScale.Fit
                )
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Download Button
            Button(
                onClick = { showSuccessDialog = true },
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF2C3E1F)
                )
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.Center
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_download),
                        contentDescription = "Download",
                        modifier = Modifier.size(20.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        "Download Invoice",
                        fontFamily = poppins,
                        fontWeight = FontWeight.SemiBold
                    )
                }
            }
        }

        // Invoice Dialog
        if (showInvoiceDialog) {
            Dialog(onDismissRequest = { showInvoiceDialog = false }) {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(600.dp),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.invoice_example),
                        contentDescription = "Invoice Full",
                        modifier = Modifier.fillMaxSize(),
                        contentScale = ContentScale.Fit
                    )
                }
            }
        }

        // Success Dialog
        if (showSuccessDialog) {
            SuccessDialog(
                message = "Berhasil mengunduh invoice",
                onDismiss = { showSuccessDialog = false }
            )
        }
    }
} 

================================================================================

FILE 96: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\MendatangDetailScreen.kt
Lines: 215 | Size: 7778 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.model.CsrItem
import com.example.tumbuhnyata.data.model.dummyCsrList
import com.example.tumbuhnyata.ui.component.CsrCard
import com.example.tumbuhnyata.ui.component.poppins
import com.example.tumbuhnyata.ui.component.SuccessDialog
import com.example.tumbuhnyata.ui.detail.CsrDetailScreen

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MendatangDetailScreen(
    csr: CsrItem,
    onBack: () -> Unit
) {
    var showBlueprintSuccessDialog by remember { mutableStateOf(false) }

    Scaffold(
        topBar = {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White)
                    .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(32.dp)
                        .clip(CircleShape)
                        .background(Color(0xFF2C3E1F))
                        .clickable { onBack() },
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.ArrowBack,
                        contentDescription = "Back",
                        tint = Color.White
                    )
                }
                Spacer(modifier = Modifier.width(16.dp))
                Text(
                    "Status Riwayat CSR",
                    fontSize = 25.sp,
                    fontWeight = FontWeight.Bold,
                    fontFamily = poppins
                )
            }
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .fillMaxSize()
                .background(Color(0xFFF7F7F7))
                .padding(16.dp)
                .verticalScroll(rememberScrollState())
        ) {
            // CSR Card with elevation
            CsrCard(item = csr)

            
            Spacer(modifier = Modifier.height(16.dp))

            // Status Section
            Text(
                text = "Status : Mendatang",
                modifier = Modifier.padding(start = 4.dp),
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                fontFamily = poppins
            )

            Spacer(modifier = Modifier.height(8.dp))

            // Event Info
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(4.dp)
            ) {
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_event_calendar2),
                        contentDescription = "Date",
                        tint = Color.Gray,
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = csr.period,
                        fontSize = 14.sp,
                        fontFamily = poppins
                    )
                }
                
                Spacer(modifier = Modifier.height(8.dp))
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_event_loc2),
                        contentDescription = "Location",
                        tint = Color.Gray,
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = csr.location,
                        fontSize = 14.sp,
                        fontFamily = poppins
                    )
                }
                
                Spacer(modifier = Modifier.height(8.dp))
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_event_office),
                        contentDescription = "Organization",
                        tint = Color.Gray,
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = csr.organization,
                        fontSize = 14.sp,
                        fontFamily = poppins
                    )
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // Blueprint Section
            Text(
                text = "id433. Paragon - ${csr.title} - LANGKAH NYATA.pdf",
                fontSize = 12.sp,
                fontFamily = poppins,
                color = Color.Gray
            )
            Text(
                text = "189 halaman - 14.3 MB - PDF",
                fontSize = 12.sp,
                fontFamily = poppins,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(8.dp))

            Button(
                onClick = { showBlueprintSuccessDialog = true },
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF2C3E1F)
                )
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.Center
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_download),
                        contentDescription = "Download",
                        modifier = Modifier.size(20.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        "Download Blueprint",
                        fontFamily = poppins,
                        fontWeight = FontWeight.SemiBold
                    )
                }
            }
        }

        // Success Dialog
        if (showBlueprintSuccessDialog) {
            SuccessDialog(
                message = "Berhasil mengunduh blueprint",
                onDismiss = { showBlueprintSuccessDialog = false }
            )
        }
    }
}


================================================================================

FILE 97: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\PerluTindakanScreen.kt
Lines: 102 | Size: 3409 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.tumbuhnyata.data.model.CsrItem
import com.example.tumbuhnyata.data.model.dummyCsrList
import com.example.tumbuhnyata.ui.component.CsrCard
import com.example.tumbuhnyata.ui.component.poppins
import com.example.tumbuhnyata.viewmodel.RiwayatViewModel

@Composable
fun PerluTindakanScreen(
    riwayatViewModel: RiwayatViewModel = viewModel(),
    onBack: () -> Unit,
    onCsrCardClick: (CsrItem) -> Unit
) {
    val menungguAksiList by riwayatViewModel.perluTindakanItems.collectAsState()

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF7F7F7))
    ) {
        // Header
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .background(Color.White)
                .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(
                modifier = Modifier
                    .size(32.dp)
                    .clip(CircleShape)
                    .background(Color(0xFF2C3E1F)) // hijau tua
                    .clickable(onClick = onBack),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    imageVector = Icons.Default.ArrowBack,
                    contentDescription = "Back",
                    tint = Color.White
                )
            }
            Spacer(modifier = Modifier.width(16.dp))
            Text(
                "Perlu Tindakan",
                fontSize = 25.sp,
                fontWeight = FontWeight.Bold,
                fontFamily = poppins
            )
        }

        // List Perlu Tindakan
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(bottom = 16.dp)
        ) {
            items(menungguAksiList) { item ->
                CsrCard(item = item) {
                    onCsrCardClick(item)
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PerluTindakanScreenPreview() {
    val dummyViewModel = remember {
        object : RiwayatViewModel(dummyList = dummyCsrList) {} // Anonymous object for preview
    }
    PerluTindakanScreen(
        riwayatViewModel = dummyViewModel,
        onBack = {},
        onCsrCardClick = {}
    )
}

================================================================================

FILE 98: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\ProgressDetailScreen.kt
Lines: 206 | Size: 7507 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.model.CsrItem
import com.example.tumbuhnyata.ui.component.CsrCard
import com.example.tumbuhnyata.ui.component.poppins
import com.example.tumbuhnyata.ui.component.SuccessDialog

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ProgressDetailScreen(
    csr: CsrItem,
    onBack: () -> Unit
) {
    var showBlueprintSuccessDialog by remember { mutableStateOf(false) }

    Scaffold(
        topBar = {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White)
                    .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(32.dp)
                        .clip(CircleShape)
                        .background(Color(0xFF2C3E1F))
                        .clickable { onBack() },
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.ArrowBack,
                        contentDescription = "Back",
                        tint = Color.White
                    )
                }
                Spacer(modifier = Modifier.width(16.dp))
                Text(
                    "Status Riwayat CSR",
                    fontSize = 25.sp,
                    fontWeight = FontWeight.Bold,
                    fontFamily = poppins
                )
            }
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .fillMaxSize()
                .background(Color(0xFFF7F7F7))
                .padding(16.dp)
                .verticalScroll(rememberScrollState())
        ) {
            // CSR Card with elevation
            Card(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
            ) {
                CsrCard(item = csr)
            }
            
            Spacer(modifier = Modifier.height(16.dp))

            // Event Info
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(4.dp)
            ) {
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_event_calendar2),
                        contentDescription = "Date",
                        tint = Color.Gray,
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = csr.period,
                        fontSize = 14.sp,
                        fontFamily = poppins
                    )
                }
                
                Spacer(modifier = Modifier.height(8.dp))
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_event_loc2),
                        contentDescription = "Location",
                        tint = Color.Gray,
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = csr.location,
                        fontSize = 14.sp,
                        fontFamily = poppins
                    )
                }
                
                Spacer(modifier = Modifier.height(8.dp))
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_event_office),
                        contentDescription = "Organization",
                        tint = Color.Gray,
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = csr.organization,
                        fontSize = 14.sp,
                        fontFamily = poppins
                    )
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // Blueprint Section
            Text(
                text = "id434. Paragon - ${csr.title} - LANGKAH NYATA.pdf",
                fontSize = 12.sp,
                fontFamily = poppins,
                color = Color.Gray
            )
            Text(
                text = "189 halaman - 14.3 MB - PDF",
                fontSize = 12.sp,
                fontFamily = poppins,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(8.dp))

            Button(
                onClick = { showBlueprintSuccessDialog = true },
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF2C3E1F)
                )
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.Center
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_download),
                        contentDescription = "Download",
                        modifier = Modifier.size(20.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        "Download Blueprint",
                        fontFamily = poppins,
                        fontWeight = FontWeight.SemiBold
                    )
                }
            }
        }

        // Success Dialog
        if (showBlueprintSuccessDialog) {
            SuccessDialog(
                message = "Berhasil mengunduh blueprint",
                onDismiss = { showBlueprintSuccessDialog = false }
            )
        }
    }
} 

================================================================================

FILE 99: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\RevisiSuccessScreen.kt
Lines: 136 | Size: 4817 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun RevisiSuccessScreen(navController: NavController) {

    Scaffold()
    { innerPadding ->
        Box(
            modifier = Modifier
                .padding(innerPadding)
                .fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            // Background
            Image(
                painter = painterResource(id = R.drawable.background_sc),
                contentDescription = "Background",
                modifier = Modifier.fillMaxSize(),
                contentScale = ContentScale.Crop
            )

            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center
            ) {
                Spacer(modifier = Modifier.weight(1f))

                // Success Icon
                Image(
                    painter = painterResource(id = R.drawable.ic_doc_success),
                    contentDescription = "Success Icon",
                    modifier = Modifier.size(120.dp)
                )

                Spacer(modifier = Modifier.height(24.dp))

                Text(
                    text = "Upload Revisi",
                    fontSize = 24.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    color = Color.White,
                    textAlign = TextAlign.Center
                )

                Text(
                    text = "Berhasil!",
                    fontSize = 24.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    color = Color.White,
                    textAlign = TextAlign.Center
                )

                Spacer(modifier = Modifier.weight(1f))

                // Action Buttons
                Button(
                    onClick = { navController.navigate("riwayat") },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(50.dp),
                    shape = RoundedCornerShape(10.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF151E11)
                    )
                ) {
                    Text(
                        text = "Lihat Detail",
                        fontSize = 17.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color.White
                    )
                }

                Spacer(modifier = Modifier.height(12.dp))

                Button(
                    onClick = {
                        // Navigate back to home and clear the back stack
                        navController.navigate("home") {
                            popUpTo("home") { inclusive = true }
                        }
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(50.dp),
                    shape = RoundedCornerShape(10.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color.White
                    )
                ) {
                    Text(
                        text = "Kembali ke Beranda",
                        fontSize = 17.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color.Black
                    )
                }

                Spacer(modifier = Modifier.height(32.dp))
            }
        }
    }
}
@Preview(showSystemUi = true)
@Composable
fun PreviewRevisiSuccessScreen() {
    val navController = rememberNavController()
    RevisiSuccessScreen(navController = navController)
}

================================================================================

FILE 100: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\RiwayatScreen.kt
Lines: 166 | Size: 6046 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.KeyboardArrowDown
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.model.CsrItem
import com.example.tumbuhnyata.data.model.dummyCsrList
import com.example.tumbuhnyata.ui.component.CsrCard
import com.example.tumbuhnyata.ui.component.poppins
import com.example.tumbuhnyata.ui.components.SectionHeader
import com.example.tumbuhnyata.viewmodel.RiwayatViewModel

@Composable
fun RiwayatScreen(
    navController: NavController,
    riwayatViewModel: RiwayatViewModel = viewModel(),
    onCsrCardClick: (CsrItem) -> Unit,
    onLihatSemuaPerluTindakan: () -> Unit,
    onLihatSemuaDiterima: () -> Unit
) {
    val perluTindakanList by riwayatViewModel.perluTindakanItems.collectAsState()
    val diterimaList by riwayatViewModel.diterimaItems.collectAsState()
    var searchText by remember { mutableStateOf("") }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF7F7F7))
    ) {
        // Header
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .background(Color.White)
                .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(
                modifier = Modifier
                    .size(32.dp)
                    .clip(CircleShape)
                    .background(Color(0xFF2C3E1F))
                    .clickable { navController.popBackStack() }, // Navigasi ke Home
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    imageVector = Icons.Default.ArrowBack,
                    contentDescription = "Back",
                    tint = Color.White
                )
            }
            Spacer(modifier = Modifier.width(16.dp))
            Text(
                "Status Riwayat CSR",
                fontSize = 25.sp,
                fontWeight = FontWeight.Bold,
                fontFamily = poppins
            )
        }

        // Search Bar
        OutlinedTextField(
            value = searchText,
            onValueChange = { searchText = it },
            leadingIcon = {
                IconButton(onClick = { /* TODO: Implement filter functionality */ }) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_filter),
                        contentDescription = "Filter"
                    )
                }
            },
            trailingIcon = {
                IconButton(onClick = { /* TODO: Implement dropdown functionality */ }) {
                    Icon(Icons.Default.KeyboardArrowDown, contentDescription = "Dropdown")
                }
            },
            placeholder = { Text("Cari Riwayat") },
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp, vertical = 8.dp)
                .background(Color.White, RoundedCornerShape(8.dp)),
            shape = RoundedCornerShape(8.dp)
        )

        // Lazy Column
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(bottom = 16.dp)
        ) {
            // Section "Perlu Tindakan"
            item {
                SectionHeader(
                    title = "Perlu Tindakan",
                    onLihatSemua = onLihatSemuaPerluTindakan
                )
            }
            items(perluTindakanList.take(4)) { item ->
                CsrCard(item = item) {
                    onCsrCardClick(item)
                }
            }

            // Section "Diterima"
            item {
                SectionHeader(
                    title = "Diterima",
                    onLihatSemua = onLihatSemuaDiterima
                )
            }
            items(diterimaList.take(4)) { item ->
                CsrCard(item = item) {
                    onCsrCardClick(item)
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun RiwayatScreenPreview() {
    val navController = rememberNavController()
    val dummyViewModel = remember {
        RiwayatViewModel(dummyList = dummyCsrList)
    }
    RiwayatScreen(
        navController = navController,
        riwayatViewModel = dummyViewModel,
        onCsrCardClick = { Log.d("Preview", "Card Clicked: ${it.title}") },
        onLihatSemuaPerluTindakan = { Log.d("Preview", "Lihat Semua Perlu Tindakan") },
        onLihatSemuaDiterima = { Log.d("Preview", "Lihat Semua Diterima") }
    )
}

================================================================================

FILE 101: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\SelesaiDetailScreen.kt
Lines: 334 | Size: 12114 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.model.CsrItem
import com.example.tumbuhnyata.ui.component.CsrCard
import com.example.tumbuhnyata.ui.component.poppins
import com.example.tumbuhnyata.ui.component.SuccessDialog

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SelesaiDetailScreen(
    csr: CsrItem,
    onBack: () -> Unit
) {
    var showCertificateSuccessDialog by remember { mutableStateOf(false) }
    var showBlueprintSuccessDialog by remember { mutableStateOf(false) }
    var showReportSuccessDialog by remember { mutableStateOf(false) }

    Scaffold(
        topBar = {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White)
                    .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 16.dp),                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(32.dp)
                        .clip(CircleShape)
                        .background(Color(0xFF2C3E1F))
                        .clickable { onBack() },
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.ArrowBack,
                        contentDescription = "Back",
                        tint = Color.White
                    )
                }
                Spacer(modifier = Modifier.width(16.dp))
                Text(
                    "Status Riwayat CSR",
                    fontSize = 25.sp,
                    fontWeight = FontWeight.Bold,
                    fontFamily = poppins
                )
            }
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .fillMaxSize()
                .background(Color(0xFFF7F7F7))
                .padding(16.dp)
                .verticalScroll(rememberScrollState())
        ) {
            // CSR Card with elevation
            Card(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
            ) {
                CsrCard(item = csr)
            }
            
            Spacer(modifier = Modifier.height(16.dp))

            // Status Section
            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "Status : Program Selesai",
                    modifier = Modifier.padding(start = 4.dp),
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Medium,
                    fontFamily = poppins
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    text = "✅",
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Medium,
                    fontFamily = poppins
                )
            }

            Spacer(modifier = Modifier.height(8.dp))

            // Event Info
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(4.dp)
            ) {
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_event_calendar2),
                        contentDescription = "Date",
                        tint = Color.Gray,
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = csr.period,
                        fontSize = 14.sp,
                        fontFamily = poppins
                    )
                }
                
                Spacer(modifier = Modifier.height(8.dp))
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_event_loc2),
                        contentDescription = "Location",
                        tint = Color.Gray,
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = csr.location,
                        fontSize = 14.sp,
                        fontFamily = poppins
                    )
                }
                
                Spacer(modifier = Modifier.height(8.dp))
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_event_office),
                        contentDescription = "Organization",
                        tint = Color.Gray,
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = csr.organization,
                        fontSize = 14.sp,
                        fontFamily = poppins
                    )
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // Certificate Section
            Text(
                text = "Sertifikasi Kegiatan",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                fontFamily = poppins
            )
            
            Spacer(modifier = Modifier.height(8.dp))

            Button(
                onClick = { showCertificateSuccessDialog = true },
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF2C3E1F)
                )
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.Center
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_download),
                        contentDescription = "Download",
                        modifier = Modifier.size(20.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        "Download Sertifikat",
                        fontFamily = poppins,
                        fontWeight = FontWeight.SemiBold
                    )
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // Blueprint Section
            Text(
                text = "Blueprint dan Laporan Kegiatan",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                fontFamily = poppins
            )
            
            Spacer(modifier = Modifier.height(8.dp))

            Text(
                text = "id434. Paragon - ${csr.title} - LANGKAH NYATA.pdf",
                fontSize = 12.sp,
                fontFamily = poppins,
                color = Color.Gray
            )
            Text(
                text = "189 halaman - 14.3 MB - PDF",
                fontSize = 12.sp,
                fontFamily = poppins,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(8.dp))

            Button(
                onClick = { showBlueprintSuccessDialog = true },
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF2C3E1F)
                )
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.Center
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_download),
                        contentDescription = "Download",
                        modifier = Modifier.size(20.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        "Download Blueprint",
                        fontFamily = poppins,
                        fontWeight = FontWeight.SemiBold
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            Text(
                text = "id435. Report Paragon - ${csr.title} - LANGKAH NYATA.pdf",
                fontSize = 12.sp,
                fontFamily = poppins,
                color = Color.Gray
            )
            Text(
                text = "189 halaman - 14.3 MB - PDF",
                fontSize = 12.sp,
                fontFamily = poppins,
                color = Color.Gray
            )

            Spacer(modifier = Modifier.height(8.dp))

            Button(
                onClick = { showReportSuccessDialog = true },
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF2C3E1F)
                )
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.Center
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_download),
                        contentDescription = "Download",
                        modifier = Modifier.size(20.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        "Download Laporan Kegiatan",
                        fontFamily = poppins,
                        fontWeight = FontWeight.SemiBold
                    )
                }
            }
        }

        // Success Dialogs
        if (showCertificateSuccessDialog) {
            SuccessDialog(
                message = "Berhasil mengunduh sertifikat",
                onDismiss = { showCertificateSuccessDialog = false }
            )
        }

        if (showBlueprintSuccessDialog) {
            SuccessDialog(
                message = "Berhasil mengunduh blueprint",
                onDismiss = { showBlueprintSuccessDialog = false }
            )
        }

        if (showReportSuccessDialog) {
            SuccessDialog(
                message = "Berhasil mengunduh laporan kegiatan",
                onDismiss = { showReportSuccessDialog = false }
            )
        }
    }
} 

================================================================================

FILE 102: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\UploadRevisiScreen.kt
Lines: 192 | Size: 7605 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.component.poppins

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun UploadRevisiScreen(
    navController: NavController,
    onBack: () -> Unit,
    onUpload: (String) -> Unit
) {
    var fileName by remember { mutableStateOf("") }
    var isUploading by remember { mutableStateOf(false) }

    Scaffold(
        topBar = {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White)
                    .padding(start = 16.dp, top = 30.dp, bottom = 16.dp, end = 16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(32.dp)
                        .clip(CircleShape)
                        .background(Color(0xFF2C3E1F))
                        .clickable { onBack() },
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.ArrowBack,
                        contentDescription = "Back",
                        tint = Color.White
                    )
                }
                Spacer(modifier = Modifier.width(16.dp))
                Text(
                    "Upload Revisi",
                    fontSize = 25.sp,
                    fontWeight = FontWeight.Bold,
                    fontFamily = poppins
                )
            }
        }
    ) { innerPadding ->
        Box(
            modifier = Modifier
                .padding(innerPadding)
                .fillMaxSize()
                .background(Color(0xFFF7F7F7))
        ) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(start = 16.dp, end = 16.dp, top = 0.dp, bottom = 80.dp),
                horizontalAlignment = Alignment.Start
            ) {
                Text(
                    text = "Unggah Dokumen Rancangan",
                    fontSize = 21.sp,
                    fontWeight = FontWeight.Bold,
                    fontFamily = poppins
                )
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = "Unggah dokumen rancangan yang sudah direvisi untuk melanjutkan pengajuan CSR perusahaan anda",
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Medium,
                    fontFamily = poppins
                )
                Spacer(modifier = Modifier.height(24.dp))
                Text(
                    text = "Revisi Proposal Rancangan",
                    fontSize = 17.sp,
                    fontWeight = FontWeight.SemiBold,
                    fontFamily = poppins,
                    modifier = Modifier.align(Alignment.Start)
                )
                Spacer(modifier = Modifier.height(8.dp))
                OutlinedCard(
                    modifier = Modifier
                        .fillMaxWidth()
                        .clickable(enabled = fileName.isEmpty()) {
                            fileName = "Proposal Rancangan.pdf"
                        }
                        .padding(vertical = 4.dp),
                    shape = RoundedCornerShape(10.dp),
                    border = BorderStroke(1.dp, Color.Gray)
                ) {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        horizontalArrangement = Arrangement.Start,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            painter = painterResource(id = if (fileName.isEmpty()) R.drawable.ic_upload else R.drawable.ic_doc),
                            contentDescription = "Upload",
                            modifier = Modifier.size(20.dp),
                            tint = Color.Gray
                        )
                        Spacer(modifier = Modifier.width(10.dp))
                        Text(
                            text = if (fileName.isEmpty()) "Proposal Rancangan" else fileName,
                            color = if (fileName.isEmpty()) Color.Gray else Color.Black,
                            fontFamily = poppins,
                            maxLines = 1
                        )
                        if (fileName.isNotEmpty()) {
                            Spacer(modifier = Modifier.weight(1f))
                            IconButton(
                                onClick = { fileName = "" },
                                modifier = Modifier.size(20.dp)
                            ) {
                                Icon(
                                    painter = painterResource(id = R.drawable.ic_close),
                                    contentDescription = "Hapus File",
                                    tint = Color(0xFFE74C3C),
                                    modifier = Modifier.size(20.dp)
                                )
                            }
                        }
                    }
                }
            }
            // Tombol Upload Revisi sticky di bawah
            Box(
                modifier = Modifier
                    .align(Alignment.BottomCenter)
                    .fillMaxWidth()
                    .padding(16.dp)
            ) {
                Button(
                    onClick = {
                        isUploading = true
                        onUpload(fileName)
                        navController.navigate("revisi_success")
                    },
                    enabled = fileName.isNotEmpty() && !isUploading,
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(8.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF2C3E1F)
                    )
                ) {
                    Text(
                        "Upload Revisi",
                        fontSize = 25.sp,
                        fontWeight = FontWeight.ExtraBold,
                        fontFamily = poppins
                    )
                }
            }
        }
    }
}

@Preview(showBackground = true, showSystemUi = true)
@Composable
fun PreviewUploadRevisiScreen() {
    val navController = rememberNavController()
    UploadRevisiScreen(
        navController = navController,
        onBack = {},
        onUpload = {}
    )
}


================================================================================

FILE 103: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\verticalTimeline.kt
Lines: 107 | Size: 4045 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat


import androidx.compose.foundation.Canvas
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Icon
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Check
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.PaintingStyle
import androidx.compose.ui.graphics.StrokeCap
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.ui.component.poppins

@Composable
fun VerticalTimeline(
    steps: List<TimelineStep>
) {
    Column {
        steps.forEachIndexed { index, step ->
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.padding(vertical = 8.dp)
            ) {
                // Circle/Icon
                Box(
                    modifier = Modifier.size(24.dp),
                    contentAlignment = Alignment.Center
                ) {
                    if (step.isCompleted) {
                        Icon(
                            Icons.Filled.Check,
                            contentDescription = "Completed",
                            tint = Color(0xFF2C3E1F),
                            modifier = Modifier.size(16.dp)
                        )
                    } else if (step.isInProgress) {
                        Canvas(modifier = Modifier.size(16.dp)) {
                            drawCircle(color = Color(0xFF2C3E1F), radius = size.minDimension / 2)
                        }
                    } else {
                        Canvas(modifier = Modifier.size(16.dp)) {
                            drawCircle(
                                color = Color.LightGray,
                                style = Stroke(width = 2f)
                            )
                        }
                    }
                }
                Spacer(modifier = Modifier.width(16.dp))

                // Text and Date
                Column {
                    Text(step.title, fontWeight = androidx.compose.ui.text.font.FontWeight.SemiBold, fontFamily = poppins)
                    if (step.date.isNotEmpty()) {
                        Text(step.date, color = Color.Gray, fontSize = 12.sp, fontFamily = poppins)
                    }
                }

                // Vertical Line
                if (index < steps.size - 1) {
                    Spacer(modifier = Modifier.width(8.dp))
                    Canvas(
                        modifier = Modifier
                            .fillMaxHeight()
                            .width(2.dp)
                            .padding(start = 11.dp) // Sesuaikan posisi garis
                    ) {
                        drawLine(
                            color = Color.LightGray,
                            start = androidx.compose.ui.geometry.Offset(0f, 0f),
                            end = androidx.compose.ui.geometry.Offset(0f, size.height),
                            strokeWidth = 2f,
                            cap = StrokeCap.Round
                        )
                    }
                }
            }
        }
    }
}

data class TimelineStep(
    val title: String,
    val date: String = "",
    val isCompleted: Boolean = false,
    val isInProgress: Boolean = false
)

@Preview(showBackground = true)
@Composable
fun PreviewVerticalTimeline() {
    val timelineSteps = listOf(
        TimelineStep("Pengajuan Dikirim", "10/05/2024 - 09:41 WIB", isCompleted = true),
        TimelineStep("Review & Evaluasi", "10/05/2024 - 09:50 WIB", isInProgress = true),
        TimelineStep("Pembayaran", "10/05/2024 - 10:00 WIB"),
        TimelineStep("Implementasi Program")
    )
    VerticalTimeline(steps = timelineSteps)
}

================================================================================

FILE 104: app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\OnboardingScreen.kt
Lines: 127 | Size: 4788 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.splashscreen

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun OnboardingScreen1(navController: NavController) {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        // Background
        Image(
            painter = painterResource(id = R.drawable.bg_onboarding),
            contentDescription = "Background Onboarding",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        Column(
            modifier = Modifier.fillMaxSize(),
            verticalArrangement = Arrangement.SpaceBetween,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.height(50.dp))

            Box(
                modifier = Modifier.fillMaxWidth(),
                contentAlignment = Alignment.TopCenter
            ) {
                Image(
                    painter = painterResource(id = R.drawable.onboarding_1),
                    contentDescription = "Onboarding Image 1",
                    modifier = Modifier.size(198.54.dp, 294.93.dp)
                )
            }

            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = Modifier.padding(36.dp)
            ) {
                Text(
                    text = "Kelola Program CSR dengan Mudah",
                    fontSize = 25.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.ExtraBold,
                    textAlign = TextAlign.Center,
                    color = Color.White
                )
                Text(
                    text = "Rancang, kelola, dan pantau inisiatif CSR perusahaan Anda dalam satu platform terpadu",
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    color = Color.White,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.padding(top = 31.dp)
                )
            }

            // Navigation Controls
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(30.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "Lewati",
                    fontSize = 17.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.SemiBold,
                    color = Color.White,
                    modifier = Modifier.clickable { navController.navigate("option") }
                )

                Row {
                    Box(
                        modifier = Modifier
                            .width(29.dp)
                            .height(8.dp)
                            .background(Color(0xFFE6FD4B), shape = CircleShape)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Box(
                        modifier = Modifier
                            .size(8.dp)
                            .background(Color.White, shape = CircleShape)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Box(
                        modifier = Modifier
                            .size(8.dp)
                            .background(Color.White, shape = CircleShape)
                    )
                }

                Icon(
                    painter = painterResource(id = R.drawable.arrow_right),
                    contentDescription = "Next",
                    tint = Color.White,
                    modifier = Modifier
                        .size(33.61.dp, 21.dp)
                        .clickable { navController.navigate("onboarding2") }
                )
            }
        }
    }
}

================================================================================

FILE 105: app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\OnboardingScreen2.kt
Lines: 127 | Size: 4799 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.splashscreen

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun OnboardingScreen2(navController: NavController) {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        // Background
        Image(
            painter = painterResource(id = R.drawable.bg_onboarding),
            contentDescription = "Background Onboarding",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        Column(
            modifier = Modifier.fillMaxSize(),
            verticalArrangement = Arrangement.SpaceBetween,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.height(50.dp))

            Box(
                modifier = Modifier.fillMaxWidth(),
                contentAlignment = Alignment.TopCenter
            ) {
                Image(
                    painter = painterResource(id = R.drawable.onboarding_2),
                    contentDescription = "Onboarding Image 2",
                    modifier = Modifier.size(254.67.dp, 230.94.dp)
                )
            }

            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = Modifier.padding(36.dp)
            ) {
                Text(
                    text = "Transparansi dan Akuntabilitas",
                    fontSize = 25.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.ExtraBold,
                    textAlign = TextAlign.Center,
                    color = Color.White
                )
                Text(
                    text = "Lacak penggunaan dana, kelola mitra, dan akses laporan real-time untuk memastikan efektivitas CSR",
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    color = Color.White,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.padding(top = 31.dp)
                )
            }

            // Navigation Controls
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(30.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "Lewati",
                    fontSize = 17.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.SemiBold,
                    color = Color.White,
                    modifier = Modifier.clickable { navController.navigate("option") }
                )

                Row {
                    Box(
                        modifier = Modifier
                            .size(8.dp)
                            .background(Color.White, shape = CircleShape)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Box(
                        modifier = Modifier
                            .width(29.dp)
                            .height(8.dp)
                            .background(Color(0xFFE6FD4B), shape = CircleShape)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Box(
                        modifier = Modifier
                            .size(8.dp)
                            .background(Color.White, shape = CircleShape)
                    )
                }

                Icon(
                    painter = painterResource(id = R.drawable.arrow_right),
                    contentDescription = "Next",
                    tint = Color.White,
                    modifier = Modifier
                        .size(33.61.dp, 21.dp)
                        .clickable { navController.navigate("onboarding3") }
                )
            }
        }
    }
}

================================================================================

FILE 106: app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\OnboardingScreen3.kt
Lines: 132 | Size: 4937 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.splashscreen

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun OnboardingScreen3(navController: NavController) {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        // Background
        Image(
            painter = painterResource(id = R.drawable.bg_onboarding),
            contentDescription = "Background Onboarding",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        Column(
            modifier = Modifier.fillMaxSize(),
            verticalArrangement = Arrangement.SpaceBetween,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.height(50.dp))

            Box(
                modifier = Modifier.fillMaxWidth(),
                contentAlignment = Alignment.TopCenter
            ) {
                Image(
                    painter = painterResource(id = R.drawable.onboarding_3),
                    contentDescription = "Onboarding Image 3",
                    modifier = Modifier.size(254.67.dp, 230.94.dp)
                )
            }

            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = Modifier.padding(36.dp)
            ) {
                Text(
                    text = "Bangun Dampak yang Berkelanjutan",
                    fontSize = 25.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.ExtraBold,
                    textAlign = TextAlign.Center,
                    color = Color.White
                )
                Text(
                    text = "Hubungkan perusahaan Anda dengan komunitas yang tepat dan wujudkan perubahan positif yang nyata",
                    fontSize = 14.sp,
                    color = Color.White,
                    fontFamily = PoppinsFontFamily,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.padding(top = 31.dp)
                )
            }

            // Navigation Controls
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(30.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Icon(
                    painter = painterResource(id = R.drawable.arrow_left),
                    contentDescription = "Back",
                    tint = Color.White,
                    modifier = Modifier
                        .size(33.61.dp, 21.dp)
                        .clickable { navController.navigate("onboarding2") }
                )

                Row {
                    Box(
                        modifier = Modifier
                            .size(8.dp)
                            .background(Color.White, shape = CircleShape)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Box(
                        modifier = Modifier
                            .size(8.dp)
                            .background(Color.White, shape = CircleShape)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Box(
                        modifier = Modifier
                            .width(29.dp)
                            .height(8.dp)
                            .background(Color(0xFFE6FD4B), shape = CircleShape)
                    )
                }

                Icon(
                    painter = painterResource(id = R.drawable.arrow_right),
                    contentDescription = "Next",
                    tint = Color.White,
                    modifier = Modifier
                        .size(33.61.dp, 21.dp)
                        .clickable { navController.navigate("option") }
                )
//
//                Text(
//                    text = "     ",
//                    fontSize = 17.sp
//                )
            }
        }
    }
}

================================================================================

FILE 107: app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\OptionScreen.kt
Lines: 136 | Size: 4438 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.splashscreen

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun OptionScreen(navController: NavController) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(20.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Spacer(modifier = Modifier.height(50.dp))

        Image(
            painter = painterResource(id = R.drawable.illustration),
            contentDescription = "Illustration",
            modifier = Modifier
                .fillMaxWidth()
                .height(264.dp)
        )

        Spacer(modifier = Modifier.height(50.dp))

        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Image(
                painter = painterResource(id = R.drawable.logo_hitam),
                contentDescription = "Logo Hitam",
                modifier = Modifier.size(98.dp, 30.dp)
            )
        }

        Spacer(modifier = Modifier.height(30.dp))

        Text(
            text = "Selamat Datang di Tumbuh Nyata!",
            fontSize = 30.sp,
            fontFamily = PoppinsFontFamily,
            textAlign = TextAlign.Left,
            fontWeight = FontWeight.ExtraBold,
            color = Color(0xFF1E1E1E)
        )

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Masuk ke akun Anda dan kelola program CSR dengan mudah, transparan, dan terukur serta wujudkan dampak sosial yang nyata",
            fontSize = 14.sp,
            fontFamily = PoppinsFontFamily,
            textAlign = TextAlign.Justify,
            color = Color(0xFF4B4B4B)
        )

        Spacer(modifier = Modifier.height(32.dp))

        Button(
            onClick = { navController.navigate("login") },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF27361F))
        ) {
            Text(
                text = "Masuk",
                color = Color.White,
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        OutlinedButton(
            onClick = { navController.navigate("register") },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            shape = RoundedCornerShape(10.dp)
        ) {
            Text(
                text = "Daftar",
                color = Color.Black,
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }

        Spacer(modifier = Modifier.height(110.dp))

        Text(
            text = "Dengan melakukan login atau registrasi, Anda menyetujui ",
            fontSize = 12.sp,
            fontFamily = PoppinsFontFamily,
            textAlign = TextAlign.Justify,
            color = Color(0xFF4B4B4B)
        )
        Row {
            Text(
                text = "Syarat & Ketentuan",
                fontSize = 12.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF4B4B4B)
            )
            Text(text = " serta ", fontSize = 12.sp, fontFamily = PoppinsFontFamily, color = Color(0xFF4B4B4B))
            Text(
                text = "Kebijakan Privasi",
                fontSize = 12.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF4B4B4B)
            )
        }
    }
}


================================================================================

FILE 108: app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\SplashScreen.kt
Lines: 75 | Size: 2491 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.splashscreen

import androidx.compose.animation.core.*
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.runtime.*
import androidx.compose.ui.*
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.scale
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.util.TokenManager
import kotlinx.coroutines.delay
import androidx.compose.ui.platform.LocalContext

@Composable
fun SplashScreen(navController: NavController) {
    var isVisible by remember { mutableStateOf(false) }
    val context = LocalContext.current

    // Animasi scale in dari kecil ke besar
    val scale by animateFloatAsState(
        targetValue = if (isVisible) 1f else 0.5f,
        animationSpec = tween(durationMillis = 1200, easing = EaseOutCubic)
    )

    // Animasi fade in bersamaan dengan scale
    val alpha by animateFloatAsState(
        targetValue = if (isVisible) 1f else 0f,
        animationSpec = tween(durationMillis = 1000, easing = EaseInOutQuad)
    )

    // Menjalankan animasi saat pertama kali muncul
    LaunchedEffect(Unit) {
        isVisible = true
        delay(3000)
        val token = TokenManager.getToken(context)
        if (token.isNullOrEmpty()) {
            navController.navigate("login") {
                popUpTo("splash") { inclusive = true }
            }
        } else {
            navController.navigate("onboarding") {
                popUpTo("splash") { inclusive = true }
            }
        }
    }

    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        // Background
        Image(
            painter = painterResource(id = R.drawable.background_sc),
            contentDescription = "Background",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        // Logo dengan animasi dari dalam keluar
        Image(
            painter = painterResource(id = R.drawable.logo_splash),
            contentDescription = "Logo",
            modifier = Modifier
                .size(254.7184.dp, 79.dp)
                .scale(scale) // Efek dari dalam keluar
                .alpha(alpha), // Efek fade in
            contentScale = ContentScale.Fit
        )
    }
}

================================================================================

FILE 109: app\src\main\java\com\example\tumbuhnyata\ui\theme\Color.kt
Lines: 15 | Size: 416 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.theme

import androidx.compose.ui.graphics.Color

// Define your custom colors here
val FoundationWhite = Color(0xFFF8F8F8) // White-500

// You can add other theme colors below
val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260) 

================================================================================

FILE 110: app\src\main\java\com\example\tumbuhnyata\ui\theme\Theme.kt
Lines: 29 | Size: 820 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.theme

import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color

private val DarkColorScheme = darkColorScheme(
    primary = androidx.compose.ui.graphics.Color(0xFF6200EA),
    surface = Color.Black
)

private val LightColorScheme = lightColorScheme(
    primary = androidx.compose.ui.graphics.Color(0xFF6200EA),
    surface = FoundationWhite
)

@Composable
fun TumbuhNyataTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    content: @Composable () -> Unit
) {
    val colors = if (darkTheme) DarkColorScheme else LightColorScheme
    MaterialTheme(
        colorScheme = colors,
        typography = TumbuhNyataTypography,
        content = content
    )
}


================================================================================

FILE 111: app\src\main\java\com\example\tumbuhnyata\ui\theme\Typography.kt
Lines: 59 | Size: 2032 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.unit.sp
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontStyle
import androidx.compose.ui.text.font.FontWeight
import com.example.tumbuhnyata.R

val PoppinsFontFamily = FontFamily(
    Font(R.font.poppins_thin, FontWeight.Thin),
    Font(R.font.poppins_thinitalic, FontWeight.Thin, FontStyle.Italic),

    Font(R.font.poppins_extralight, FontWeight.ExtraLight),
    Font(R.font.poppins_extralightitalic, FontWeight.ExtraLight, FontStyle.Italic),

    Font(R.font.poppins_light, FontWeight.Light),
    Font(R.font.poppins_lightitalic, FontWeight.Light, FontStyle.Italic),

    Font(R.font.poppins_regular, FontWeight.Normal),
    Font(R.font.poppins_italic, FontWeight.Normal, FontStyle.Italic),

    Font(R.font.poppins_medium, FontWeight.Medium),
    Font(R.font.poppins_mediumitalic, FontWeight.Medium, FontStyle.Italic),

    Font(R.font.poppins_semibold, FontWeight.SemiBold),
    Font(R.font.poppins_semibolditalic, FontWeight.SemiBold, FontStyle.Italic),

    Font(R.font.poppins_bold, FontWeight.Bold),
    Font(R.font.poppins_bolditalic, FontWeight.Bold, FontStyle.Italic),

    Font(R.font.poppins_extrabold, FontWeight.ExtraBold),
    Font(R.font.poppins_extrabolditalic, FontWeight.ExtraBold, FontStyle.Italic),

    Font(R.font.poppins_black, FontWeight.Black),
    Font(R.font.poppins_blackitalic, FontWeight.Black, FontStyle.Italic)
)

val TumbuhNyataTypography = Typography(
    bodyLarge = TextStyle(
        fontSize = 16.sp
    ),
    titleLarge = TextStyle(
        fontSize = 22.sp
    ),
    titleMedium = TextStyle(
        fontFamily = PoppinsFontFamily,
        fontWeight = FontWeight.SemiBold,
        fontSize = 18.sp

    ),
    bodyMedium = TextStyle(
        fontFamily = PoppinsFontFamily,
        fontWeight = FontWeight.Normal,
        fontSize = 14.sp
    ),
)

================================================================================

FILE 112: app\src\main\java\com\example\tumbuhnyata\ui\workshop\DaftarWorkshop.kt
Lines: 254 | Size: 9201 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.workshop

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.ClickableText
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalUriHandler
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.di.NetworkModule
import com.example.tumbuhnyata.viewmodel.DaftarWorkshopViewModel
import com.example.tumbuhnyata.viewmodel.DaftarWorkshopUiState

@Composable
fun DaftarWorkshop(navController: NavController) {
    var fileSelected by remember { mutableStateOf(false) }
    var fileName by remember { mutableStateOf("") }
    val uriHandler = LocalUriHandler.current
    var workshopId by remember { mutableStateOf("1") }

    val viewModel = remember {
        DaftarWorkshopViewModel(
            workshopRepository = NetworkModule.workshopRepository,
            profileRepository = NetworkModule.profileRepository
        )
    }
    val uiState by viewModel.uiState.collectAsState()

    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .padding(16.dp)
    ) {
        Spacer(modifier = Modifier.height(24.dp))

        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Image(
                painter = painterResource(id = R.drawable.btn_back),
                contentDescription = "Kembali",
                modifier = Modifier
                    .size(32.dp)
                    .clickable { navController.popBackStack() }
            )

            Spacer(modifier = Modifier.width(16.dp))

            Text(
                text = "Daftar Workshop",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.ExtraBold,
                fontSize = 25.sp,
                color = Color(0xFF1E1E1E)
            )
        }

        Spacer(modifier = Modifier.height(31.dp))

        Text(
            text = "Unggah Dokumen Daftar Karyawan",
            fontFamily = PoppinsFontFamily,
            color = Color(0xFF1E1E1E),
            fontWeight = FontWeight.Bold,
            fontSize = 21.sp
        )

        Spacer(modifier = Modifier.height(6.dp))

        Text(
            text = "Lakukan unggah dokumen sheet berupa list daftar nama karyawan serta email mereka",
            fontSize = 14.sp,
            fontFamily = PoppinsFontFamily,
            color = Color(0xFF4B4B4B)
        )

        Spacer(modifier = Modifier.height(24.dp))

        // Upload Area
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(131.dp)
                .clip(RoundedCornerShape(14.dp))
                .border(1.dp, Color(0xFFB9B9B9), RoundedCornerShape(14.dp))
                .background(Color.White)
                .clickable {
                    fileSelected = true
                    fileName = "daftar karyawan.xlsx"
                },
            contentAlignment = Alignment.Center
        ) {
            if (!fileSelected) {
                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                    Image(
                        painter = painterResource(id = R.drawable.lg_upload),
                        contentDescription = "Upload File",
                        modifier = Modifier.size(23.dp, 26.dp)
                    )
                    Spacer(modifier = Modifier.height(12.dp))
                    Text(
                        text = "Pilih file .xlsx, .xls atau .csv",
                        color = Color(0xFF989898),
                        fontFamily = PoppinsFontFamily,
                        fontSize = 12.sp
                    )
                }
            } else {
                Box(modifier = Modifier.fillMaxSize()) {
                    Image(
                        painter = painterResource(id = R.drawable.lg_cancel),
                        contentDescription = "Batalkan File",
                        modifier = Modifier
                            .align(Alignment.TopEnd)
                            .padding(12.dp)
                            .size(16.dp)
                            .clickable {
                                fileSelected = false
                                fileName = ""
                            }
                    )

                    Column(
                        modifier = Modifier.align(Alignment.Center),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Image(
                            painter = painterResource(id = R.drawable.lg_file),
                            contentDescription = "File Terunggah",
                            modifier = Modifier.size(22.dp, 27.dp)
                        )
                        Spacer(modifier = Modifier.height(12.dp))
                        Text(
                            text = fileName,
                            fontSize = 14.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Medium
                        )
                    }
                }
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        // Link Template
        val annotatedLinkString = buildAnnotatedString {
            append("*Anda dapat mengunduh template dokumen ")

            pushStringAnnotation(
                tag = "URL",
                annotation = "https://docs.google.com/spreadsheets/d/1v97vIrtmJJw5nC7gj7djjOb0oEPIr63rehe53bBlTOg/edit?usp=sharing"
            )
            withStyle(
                style = SpanStyle(
                    fontWeight = FontWeight.Bold,
                    textDecoration = TextDecoration.Underline,
                    color = Color(0xFF4B4B4B)
                )
            ) {
                append("di sini")
            }
            pop()
        }

        ClickableText(
            text = annotatedLinkString,
            onClick = { offset ->
                annotatedLinkString.getStringAnnotations("URL", offset, offset)
                    .firstOrNull()?.let { annotation ->
                        uriHandler.openUri(annotation.item)
                    }
            },
            style = LocalTextStyle.current.copy(
                fontSize = 12.sp,
                color = Color(0xFF4B4B4B)
            )
        )

        Spacer(modifier = Modifier.height(16.dp))


        Spacer(modifier = Modifier.weight(1f))

        if (uiState is DaftarWorkshopUiState.Error) {
            Text(
                text = (uiState as DaftarWorkshopUiState.Error).message,
                color = Color.Red,
                fontSize = 14.sp,
                modifier = Modifier.padding(bottom = 8.dp)
            )
        }

        Button(
            onClick = {
                viewModel.registerWorkshop(workshopId)
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            colors = ButtonDefaults.buttonColors(
                containerColor = if (uiState !is DaftarWorkshopUiState.Loading && uiState is DaftarWorkshopUiState.Success) 
                    Color(0xFF27361F) else Color.Gray
            ),
            enabled = uiState !is DaftarWorkshopUiState.Loading && uiState is DaftarWorkshopUiState.Success,
            shape = RoundedCornerShape(10.dp)
        ) {
            Text(
                text = if (uiState is DaftarWorkshopUiState.Loading) "Loading..." else "Daftarkan Sekarang",
                color = Color.White,
                fontSize = 17.sp,
                fontWeight = FontWeight.ExtraBold
            )
        }

        LaunchedEffect(uiState) {
            if (uiState is DaftarWorkshopUiState.RegistrationSuccess) {
                navController.navigate("workshopberhasil")
            }
        }

        Spacer(modifier = Modifier.height(24.dp))
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewDaftarWorkshop() {
    DaftarWorkshop(navController = rememberNavController())
}


================================================================================

FILE 113: app\src\main\java\com\example\tumbuhnyata\ui\workshop\DeskripsiWorkshopScreen.kt
Lines: 72 | Size: 2513 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.workshop

import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.DeskripsiWorkshop
import com.example.tumbuhnyata.viewmodel.WorkshopDetailViewModel

@Composable
fun DeskripsiWorkshopScreen(
    navController: NavController,
    workshopId: String,
    viewModel: WorkshopDetailViewModel = viewModel()
) {
    LaunchedEffect(workshopId) {
        viewModel.loadWorkshopById(workshopId)
    }

    val workshop by viewModel.selectedWorkshop.collectAsState()

    if (workshop != null) {
        Column(
            modifier = Modifier.fillMaxSize()
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 8.dp)
            ) {
                Spacer(modifier = Modifier.height(24.dp))

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.btn_back),
                        contentDescription = "Kembali",
                        modifier = Modifier
                            .size(32.dp)
                            .clickable { navController.popBackStack() }
                    )

                    Spacer(modifier = Modifier.width(16.dp))

                    Text(
                        text = "Deskripsi Workshop",
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.ExtraBold,
                        fontSize = 25.sp,
                        color = Color(0xFF1E1E1E)
                    )
                }
            }

            DeskripsiWorkshop(navController = navController, workshop = workshop!!)
        }
    }
}

================================================================================

FILE 114: app\src\main\java\com\example\tumbuhnyata\ui\workshop\NewWorkshop.kt
Lines: 83 | Size: 3079 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.workshop

import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.model.recentWorkshops
import com.example.tumbuhnyata.ui.components.WorkshopListItem
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun NewWorkshop(navController: NavController) {
    Column(modifier = Modifier.fillMaxSize()) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 8.dp)
        ) {
            Spacer(modifier = Modifier.height(24.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Image(
                    painter = painterResource(id = R.drawable.btn_back),
                    contentDescription = "Kembali",
                    modifier = Modifier
                        .size(32.dp)
                        .clickable { navController.navigate("workshop") }
                )

                Spacer(modifier = Modifier.width(16.dp))

                Text(
                    text = "Workshop Terbaru",
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.ExtraBold,
                    fontSize = 25.sp,
                    color = Color(0xFF1E1E1E)
                )
            }

            Spacer(modifier = Modifier.height(12.dp))

        }

        Column(
            modifier = Modifier
                .verticalScroll(rememberScrollState())
                .padding(horizontal = 16.dp, vertical = 16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            recentWorkshops.forEach { workshop ->
                WorkshopListItem(
                    workshop = workshop,
                    onClick = { navController.navigate("deskripsiworkshop/${workshop.id}") }
                )
            }
        }
    }
}

================================================================================

FILE 115: app\src\main\java\com\example\tumbuhnyata\ui\workshop\RekomWorkshop.kt
Lines: 82 | Size: 2849 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.workshop

import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.model.recommendedWorkshops
import com.example.tumbuhnyata.ui.components.WorkshopListItem
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun RekomWorkshop(navController: NavController) {
    Column(modifier = Modifier.fillMaxSize()) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 8.dp)
        ) {
            Spacer(modifier = Modifier.height(24.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Image(
                    painter = painterResource(id = R.drawable.btn_back),
                    contentDescription = "Kembali",
                    modifier = Modifier
                        .size(32.dp)
                        .clickable { navController.navigate("workshop") }
                )

                Spacer(modifier = Modifier.width(16.dp))

                Text(
                    text = "Rekomendasi",
                    fontWeight = FontWeight.ExtraBold,
                    fontFamily = PoppinsFontFamily,
                    fontSize = 25.sp,
                    color = Color(0xFF1E1E1E)
                )
            }

            Spacer(modifier = Modifier.height(12.dp))

        }

        Column(
            modifier = Modifier
                .verticalScroll(rememberScrollState())
                .padding(horizontal = 16.dp, vertical = 16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            recommendedWorkshops.forEach { workshop ->
                WorkshopListItem(
                    workshop = workshop,
                    onClick = { navController.navigate("deskripsiworkshop/${workshop.id}") }
                )
            }
        }
    }
}

@Preview
@Composable
fun PreviewRekomWorkshop() {
    RekomWorkshop(navController = rememberNavController())
}

================================================================================

FILE 116: app\src\main\java\com\example\tumbuhnyata\ui\workshop\WorkshopBerhasil.kt
Lines: 109 | Size: 3876 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.workshop

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun WorkshopBerhasil(navController: NavController) {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        // Background
        Image(
            painter = painterResource(id = R.drawable.bg_sukses),
            contentDescription = "Background",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(horizontal = 16.dp, vertical = 24.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.weight(1f))

            Image(
                painter = painterResource(id = R.drawable.lg_check),
                contentDescription = "Berhasil Buat Akun",
                modifier = Modifier.size(100.dp)
            )

            Spacer(modifier = Modifier.height(32.dp))

            Text(
                text = "Pendaftaran Workshop Berhasil",
                fontSize = 24.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.ExtraBold
            )

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                text = "Informasi mengenai pembayaran dan event workshop akan dikirim melalui email",
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.Medium
            )

            Spacer(modifier = Modifier.weight(1f))

            Button(
                onClick = { navController.navigate("workshop") },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF151E11))
            ) {
                Text(
                    text = "Kembali ke Beranda",
                    fontFamily = PoppinsFontFamily,
                    color = Color.White,
                    fontSize = 17.sp,
                    fontWeight = FontWeight.ExtraBold
                )
            }
            Spacer(modifier = Modifier.height(32.dp))
        }
    }
}

@Preview
@Composable
fun PreviewWorkshopBerhasil() {
    WorkshopBerhasil(navController = rememberNavController())
}

================================================================================

FILE 117: app\src\main\java\com\example\tumbuhnyata\ui\workshop\WorkshopScreen.kt
Lines: 81 | Size: 2931 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.workshop

import androidx.compose.foundation.background
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.navigation.NavController
import com.example.tumbuhnyata.ui.components.BottomNavigationBar
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.navigation.compose.rememberNavController
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.tumbuhnyata.ui.components.SectionWithTitle
import com.example.tumbuhnyata.ui.components.WorkshopCard
import com.example.tumbuhnyata.ui.components.WorkshopListItem
import com.example.tumbuhnyata.viewmodel.WorkshopViewModel

@Composable
fun WorkshopScreen(
    navController: NavController,
    viewModel: WorkshopViewModel = viewModel()
) {
    val recommended by viewModel.recommended
    val recent by viewModel.recent

    Scaffold(
        bottomBar = { BottomNavigationBar(navController) }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .padding(innerPadding)
                .background(androidx.compose.ui.graphics.Color.White)
                .verticalScroll(rememberScrollState())
        ) {
            SectionWithTitle(
                title = "Rekomendasi",
                onSeeAllClick = { navController.navigate("rekomendasiworkshop") }
            )
            LazyRow(
                contentPadding = PaddingValues(horizontal = 16.dp),
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                items(recommended) { workshop ->
                    WorkshopCard(workshop = workshop) {
                        navController.navigate("deskripsiworkshop/${workshop.id}")
                    }
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            SectionWithTitle(
                title = "Terbaru",
                onSeeAllClick = { navController.navigate("workshopterbaru") }
            )
            Column(
                verticalArrangement = Arrangement.spacedBy(12.dp),
                modifier = Modifier.padding(horizontal = 16.dp)
            ) {
                recent.forEach { workshop ->
                    WorkshopListItem(
                        workshop = workshop,
                        onClick = { navController.navigate("deskripsiworkshop/${workshop.id}") }
                    )
                }
            }
        }
    }
}

@Preview
@Composable
fun PreviewWorkshopScreen() {
    WorkshopScreen(navController = rememberNavController())
}

================================================================================

FILE 118: app\src\main\java\com\example\tumbuhnyata\util\NetworkConnectivityUtil.kt
Lines: 33 | Size: 1496 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.util

import android.content.Context
import android.net.ConnectivityManager
import android.net.NetworkCapabilities
import android.os.Build

object NetworkConnectivityUtil {
    fun isOnline(context: Context): Boolean {
        val connectivityManager =
            context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
        
        // Untuk Android M ke atas (API 23+)
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            val network = connectivityManager.activeNetwork ?: return false
            val activeNetwork = connectivityManager.getNetworkCapabilities(network) ?: return false
            return when {
                activeNetwork.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) -> true
                activeNetwork.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) -> true
                activeNetwork.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET) -> true
                // Untuk VPN, dll. jika dianggap online
                // activeNetwork.hasTransport(NetworkCapabilities.TRANSPORT_VPN) -> true 
                else -> false
            }
        } else {
            // Untuk versi Android di bawah M (deprecated tapi sebagai fallback jika targetSdkVersion < 23)
            @Suppress("DEPRECATION")
            val networkInfo = connectivityManager.activeNetworkInfo ?: return false
            @Suppress("DEPRECATION")
            return networkInfo.isConnected
        }
    }
} 

================================================================================

FILE 119: app\src\main\java\com\example\tumbuhnyata\util\TokenManager.kt
Lines: 29 | Size: 836 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.util

import android.content.Context
import android.content.SharedPreferences

object TokenManager {
    private const val PREFS_NAME = "auth_prefs"
    private const val TOKEN_KEY = "auth_token"

    private fun getPreferences(context: Context): SharedPreferences {
        return context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
    }

    fun saveToken(context: Context, token: String) {
        val editor = getPreferences(context).edit()
        editor.putString(TOKEN_KEY, token)
        editor.apply()
    }

    fun getToken(context: Context): String? {
        return getPreferences(context).getString(TOKEN_KEY, null)
    }

    fun clearToken(context: Context) {
        val editor = getPreferences(context).edit()
        editor.remove(TOKEN_KEY)
        editor.apply()
    }
} 

================================================================================

FILE 120: app\src\main\java\com\example\tumbuhnyata\viewmodel\AjukanSertifikasiViewModel.kt
Lines: 83 | Size: 3183 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.Sertifikasi.AjukanSertifikasi
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

data class AjukanSertifikasiState(
    val isLoading: Boolean = false,
    val error: String? = null,
    val availableSertifikasiList: List<AjukanSertifikasi> = emptyList(),
    val selectedSertifikasi: AjukanSertifikasi? = null
)

class AjukanSertifikasiViewModel : ViewModel() {
    private val _state = MutableStateFlow(AjukanSertifikasiState())
    val state: StateFlow<AjukanSertifikasiState> = _state.asStateFlow()

    init {
        loadAvailableSertifikasi()
    }

    private fun loadAvailableSertifikasi() {
        viewModelScope.launch {
            try {
                _state.value = _state.value.copy(isLoading = true)
                // TODO: Implement API call to fetch available certifications
                // For now using dummy data
                val dummyData = listOf(
                    AjukanSertifikasi(
                        title = "Social Responsibility",
                        code = "ISO 26000",
                        deskripsi = "International Organization for Standardization (ISO)",
                        imageRes = R.drawable.iso_26000
                    ),
                    AjukanSertifikasi(
                        title = "PROPER",
                        code = "Program Penilaian Peringkat Kinerja Perusahaan dalam Pengelolaan Lingkungan",
                        deskripsi = "Kementerian Lingkungan Hidup dan Kehutanan (KLHK)",
                        imageRes = R.drawable.proper
                    ),
                    AjukanSertifikasi(
                        title = "Ecolabel Indonesia",
                        code = "Ecolabel",
                        deskripsi = "Kementerian Perindustrian RI",
                        imageRes = R.drawable.ecolabel
                    ),
                    AjukanSertifikasi(
                        title = "Social Accountability Certification",
                        code = "SA8000",
                        deskripsi = "Social Accountability International (SAI)",
                        imageRes = R.drawable.sai
                    )
                )
                _state.value = _state.value.copy(
                    isLoading = false,
                    availableSertifikasiList = dummyData
                )
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    error = e.message ?: "An error occurred"
                )
            }
        }
    }

    fun selectSertifikasi(sertifikasi: AjukanSertifikasi) {
        _state.value = _state.value.copy(selectedSertifikasi = sertifikasi)
    }

    fun clearSelection() {
        _state.value = _state.value.copy(selectedSertifikasi = null)
    }

    fun refreshAvailableSertifikasi() {
        loadAvailableSertifikasi()
    }
} 

================================================================================

FILE 121: app\src\main\java\com\example\tumbuhnyata\viewmodel\CsrSubmissionViewModel.kt
Lines: 138 | Size: 4332 chars
--------------------------------------------------------------------------------
// File: CsrSubmissionViewModel.kt
package com.example.tumbuhnyata.viewmodel

import androidx.compose.runtime.State
import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.model.Workshop
import com.example.tumbuhnyata.data.model.recentWorkshops
import com.example.tumbuhnyata.data.model.recommendedWorkshops
import kotlinx.coroutines.launch
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.http.Body
import retrofit2.http.POST

interface CsrApiService {
    @POST("/csr/ajukan")
    suspend fun submitCSR(
        @Body request: CsrSubmissionRequest
    ): retrofit2.Response<CsrSubmissionResponse>
}

data class CsrSubmissionRequest(
    val user_id: Int,
    val program_name: String,
    val category: String,
    val description: String,
    val location: String,
    val partner_name: String,
    val start_date: String,
    val end_date: String,
    val budget: String,
    val agreed: Boolean
)

data class CsrSubmissionResponse(
    val message: String,
    val data: CsrSubmissionData
)

data class CsrSubmissionData(
    val id: Int,
    val user_id: Int,
    val program_name: String,
    val category: String,
    val description: String,
    val location: String,
    val partner_name: String,
    val start_date: String,
    val end_date: String,
    val budget: String,
    val proposal_url: String?,
    val legality_url: String?,
    val agreed: Boolean,
    val status: String,
    val created_at: String,
    val updated_at: String
)

private val retrofit = Retrofit.Builder()
    .baseUrl("http://10.0.2.2:5000/")
    .addConverterFactory(GsonConverterFactory.create())
    .build()

private val apiService = retrofit.create(CsrApiService::class.java)

class CsrSubmissionViewModel : ViewModel() {
    var programName = mutableStateOf("")
    var category = mutableStateOf("")
    var description = mutableStateOf("")
    var startDate = mutableStateOf("")
    var endDate = mutableStateOf("")
    var location = mutableStateOf("")
    var partnerName = mutableStateOf("")
    var budget = mutableStateOf("")
    var agreed = mutableStateOf(false)

    var isLoading = mutableStateOf(false)
    var isSuccess = mutableStateOf(false)
    var errorMessage = mutableStateOf<String?>(null)

    fun isFormStepOneValid(description: String): Boolean {
        return programName.value.isNotBlank() && category.value.isNotBlank() && description.isNotBlank()
    }

    fun isFormStepTwoValid(): Boolean {
        return location.value.isNotBlank() && startDate.value.isNotBlank() && endDate.value.isNotBlank() && budget.value.isNotBlank()
    }

    fun submitForm(onSuccess: () -> Unit) {
        isLoading.value = true
        viewModelScope.launch {
            try {
                val request = CsrSubmissionRequest(
                    user_id = 1, // TODO: Replace with actual user ID
                    program_name = programName.value,
                    category = category.value,
                    description = description.value,
                    location = location.value,
                    partner_name = partnerName.value,
                    start_date = startDate.value,
                    end_date = endDate.value,
                    budget = budget.value,
                    agreed = agreed.value
                )
                val response = apiService.submitCSR(request)
                
                if (response.isSuccessful) {
                    isSuccess.value = true
                    onSuccess()
                } else {
                    errorMessage.value = response.message() ?: "Gagal membuat pengajuan CSR"
                }
            } catch (e: Exception) {
                errorMessage.value = e.message ?: "Terjadi kesalahan"
            } finally {
                isLoading.value = false
            }
        }
    }

    fun reset() {
        programName.value = ""
        category.value = ""
        description.value = ""
        startDate.value = ""
        endDate.value = ""
        location.value = ""
        partnerName.value = ""
        budget.value = ""
        agreed.value = false
        isLoading.value = false
        isSuccess.value = false
        errorMessage.value = null
    }
}



================================================================================

FILE 122: app\src\main\java\com\example\tumbuhnyata\viewmodel\CsrVerificationViewModel.kt
Lines: 75 | Size: 3045 chars
--------------------------------------------------------------------------------
// File: CsrVerificationViewModel.kt
package com.example.tumbuhnyata.viewmodel

import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.CsrApiService
import com.example.tumbuhnyata.ui.eventcsr.CsrData
import kotlinx.coroutines.launch
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

class CsrVerificationViewModel : ViewModel() {
    var isSubmitting = mutableStateOf(false)
    var submitSuccess = mutableStateOf(false)
    var errorMessage = mutableStateOf<String?>(null)

    private val apiService: CsrApiService = Retrofit.Builder()
        .baseUrl("http://10.0.2.2:5000/")
        .addConverterFactory(GsonConverterFactory.create())
        .build()
        .create(CsrApiService::class.java)

    fun convertDateToBackendFormat(date: String): String {
        // Handle "DD MMM YYYY" (e.g., "01 May 2025") to "YYYY-MM-DD"
        return try {
            val inputFormat = java.text.SimpleDateFormat("dd MMM yyyy", java.util.Locale.getDefault())
            val outputFormat = java.text.SimpleDateFormat("yyyy-MM-dd", java.util.Locale.getDefault())
            val parsedDate = inputFormat.parse(date)
            outputFormat.format(parsedDate!!)
        } catch (e: Exception) {
            date // fallback, return original if parsing fails
        }
    }

    fun submitCsr(csrData: CsrData, onSuccess: () -> Unit) {
        isSubmitting.value = true
        errorMessage.value = null

        viewModelScope.launch {
            try {
                val request = CsrSubmissionRequest(
                    user_id = 1,
                    program_name = csrData.programName,
                    category = csrData.category,
                    description = csrData.description,
                    location = csrData.location,
                    partner_name = csrData.partnerName,
                    start_date = convertDateToBackendFormat(csrData.startDate),
                    end_date = convertDateToBackendFormat(csrData.endDate),
                    budget = csrData.budget.replace(Regex("[^\\d]"), ""),
                    agreed = true
                )

                val response = apiService.submitCSR(request)

                if (response.isSuccessful) {
                    val responseBody = response.body()
                    if (responseBody?.message == "Pengajuan CSR berhasil dibuat") {
                        submitSuccess.value = true
                        onSuccess()
                    } else {
                        errorMessage.value = responseBody?.message ?: "Verifikasi CSR gagal"
                    }
                } else {
                    errorMessage.value = response.body()?.message ?: "Verifikasi CSR gagal"
                }
            } catch (e: Exception) {
                errorMessage.value = "Terjadi kesalahan: ${e.localizedMessage}"
            } finally {
                isSubmitting.value = false
            }
        }
    }
}


================================================================================

FILE 123: app\src\main\java\com\example\tumbuhnyata\viewmodel\DaftarWorkshopViewModel.kt
Lines: 76 | Size: 2891 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.repository.ProfileRepository
import com.example.tumbuhnyata.data.repository.WorkshopRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class DaftarWorkshopViewModel(
    private val workshopRepository: WorkshopRepository,
    private val profileRepository: ProfileRepository
) : ViewModel() {

    private val _uiState = MutableStateFlow<DaftarWorkshopUiState>(DaftarWorkshopUiState.Initial)
    val uiState: StateFlow<DaftarWorkshopUiState> = _uiState.asStateFlow()

    init {
        loadProfile()
    }

    private fun loadProfile() {
        viewModelScope.launch {
            _uiState.value = DaftarWorkshopUiState.Loading
            try {
                val profile = profileRepository.getUserProfile()
                if (profile != null) {
                    _uiState.value = DaftarWorkshopUiState.Success(
                        companyName = profile.companyName,
                        email = profile.email
                    )
                } else {
                    _uiState.value = DaftarWorkshopUiState.Error("Gagal mengambil data profil perusahaan.")
                }
            } catch (e: Exception) {
                _uiState.value = DaftarWorkshopUiState.Error("Terjadi kesalahan: ${e.message}")
            }
        }
    }

    fun registerWorkshop(workshopId: String) {
        viewModelScope.launch {
            _uiState.value = DaftarWorkshopUiState.Loading
            try {
                val currentState = _uiState.value
                if (currentState is DaftarWorkshopUiState.Success) {
                    val result = workshopRepository.registerWorkshop(
                        workshopId = workshopId,
                        companyName = currentState.companyName,
                        email = currentState.email
                    )
                    if (result) {
                        _uiState.value = DaftarWorkshopUiState.RegistrationSuccess
                    } else {
                        _uiState.value = DaftarWorkshopUiState.Error("Gagal daftar workshop")
                    }
                }
            } catch (e: Exception) {
                _uiState.value = DaftarWorkshopUiState.Error("Terjadi kesalahan: ${e.message}")
            }
        }
    }
}

sealed class DaftarWorkshopUiState {
    object Initial : DaftarWorkshopUiState()
    object Loading : DaftarWorkshopUiState()
    data class Success(
        val companyName: String,
        val email: String
    ) : DaftarWorkshopUiState()
    object RegistrationSuccess : DaftarWorkshopUiState()
    data class Error(val message: String) : DaftarWorkshopUiState()
} 

================================================================================

FILE 124: app\src\main\java\com\example\tumbuhnyata\viewmodel\DashboardKeuanganViewModel.kt
Lines: 14 | Size: 467 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.compose.ui.graphics.Color
import com.example.tumbuhnyata.data.model.CsrCategory

class DashboardKeuanganViewModel : ViewModel() {
    val categories = listOf(
        CsrCategory("Sosial", 1955670825f, Color(0xFF3F51B5)),
        CsrCategory("Lingkungan", 1231779900f, Color(0xFF2196F3))
    )

    val total: Float = categories.sumOf { it.amount.toDouble() }.toFloat()
}


================================================================================

FILE 125: app\src\main\java\com\example\tumbuhnyata\viewmodel\DashboardViewModel.kt
Lines: 103 | Size: 4286 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.api.DashboardApiService
import com.example.tumbuhnyata.data.local.AppDatabase
import com.example.tumbuhnyata.data.repository.DashboardRepository
import com.example.tumbuhnyata.data.repository.Resource
import com.example.tumbuhnyata.data.network.RetrofitInstance
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.launch

// Data class sesuai struktur KPIItem di DashboardScreen
data class KPIItemState(
    val title: String,
    val topIcon: Int,
    val statusText: String,
    val statusPercentageValue: String,
    val isUp: Boolean,
    val value: String,
    val unit: String,
    val targetValue: String,
    val onClickRoute: String
)

// DashboardState diupdate untuk menyertakan loading dan error state
data class DashboardState(
    val kpiItems: List<KPIItemState> = emptyList(),
    val isLoading: Boolean = false,
    val error: String? = null
)

// Gunakan AndroidViewModel jika Anda butuh Application context untuk Repository (misal untuk NetworkUtil atau Database)
// Jika tidak, cukup ViewModel dan pass Context secara manual jika Repository membutuhkannya.
class DashboardViewModel(application: Application) : AndroidViewModel(application) {

    private val _uiState = MutableStateFlow(DashboardState(isLoading = true)) // Mulai dengan isLoading = true
    val uiState: StateFlow<DashboardState> = _uiState.asStateFlow()

    // Manual DI untuk Repository (Idealnya gunakan Hilt atau Koin)
    private val dashboardRepository: DashboardRepository

    init {
        // Inisialisasi manual repository (sementara)
        val dashboardApi = RetrofitInstance.dashboardApi // Mengambil instance API dari RetrofitInstance
        val dashboardDao = AppDatabase.getDatabase(application).dashboardDao() // Mengambil DAO
        dashboardRepository = DashboardRepository(dashboardApi, dashboardDao, application.applicationContext)
        
        loadDashboardItems()
    }

    fun loadDashboardItems(companyId: Int? = null, year: Int? = null) { // Tambahkan parameter jika perlu
        viewModelScope.launch {
            // Set isLoading true di awal pemicuan, jika belum diset dari init _uiState
            // _uiState.value = _uiState.value.copy(isLoading = true, error = null)
            
            dashboardRepository.getDashboardKpiItems(companyId = companyId, year = year)
                .collect { resource ->
                    when (resource) {
                        is Resource.Loading -> {
                            _uiState.value = _uiState.value.copy(
                                isLoading = true,
                                // error = null // Opsional: reset error saat loading baru
                            )
                        }
                        is Resource.Success -> {
                            _uiState.value = DashboardState(
                                isLoading = false,
                                kpiItems = resource.data ?: emptyList(),
                                error = null
                            )
                        }
                        is Resource.Error -> {
                            _uiState.value = DashboardState(
                                isLoading = false,
                                // Tetap tampilkan data lama jika ada saat error, atau kosongkan
                                kpiItems = resource.data ?: _uiState.value.kpiItems, // Menampilkan data lama (dari cache) jika ada
                                error = resource.message
                            )
                        }
                    }
                }
        }
    }

    // Hapus blok init lama yang mengisi data dummy
    /* init {
        _uiState.value = DashboardState(
            kpiItems = listOf(
                KPIItemState(
                    title = "Carbon Footprint",
                    ...
                ),
            )
        )
    } */
} 

================================================================================

FILE 126: app\src\main\java\com\example\tumbuhnyata\viewmodel\HomeViewModel.kt
Lines: 140 | Size: 4229 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import com.example.tumbuhnyata.ui.home.StatusType
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow

data class CompanyInfo(
    val name: String = "PT Paragon Corp",
    val address: String = "Kampung Baru, No.1 Jakarta",
    val hasNotifications: Boolean = true
)

data class CSRStatus(
    val completed: Int = 12,
    val inProgress: Int = 4,
    val upcoming: Int = 7
)

data class CSRFund(
    val amount: String = "Rp 2.987.450.725",
    val note: String = "*terhitung dari dana CSR yang telah selesai"
)

data class BadgeInfo(
    val levelBadge: String = "Super Star",
    val emissionReduction: String = "4.250 kg CO₂e"
)

data class Activity(
    val title: String,
    val community: String,
    val status: String,
    val kategori: String,
    val lokasi: String,
    val periode: String,
    val statusType: StatusType
)

data class HomeState(
    val companyInfo: CompanyInfo = CompanyInfo(),
    val csrStatus: CSRStatus = CSRStatus(),
    val csrFund: CSRFund = CSRFund(),
    val badgeInfo: BadgeInfo = BadgeInfo(),
    val activities: List<Activity> = listOf(
        Activity(
            title = "Penanaman 1000 Pohon",
            community = "Komunitas Jaya Hijau",
            status = "Program Selesai",
            kategori = "Lingkungan",
            lokasi = "Jakarta Timur",
            periode = "12 Mar - 20 Jun 24",
            statusType = StatusType.COMPLETED
        ),
        Activity(
            title = "Penghijauan Hutan Kaltim",
            community = "PT Hijau Sejati",
            status = "Mendatang",
            kategori = "Lingkungan",
            lokasi = "Kalimantan",
            periode = "12 Mar - 20 Mar 25",
            statusType = StatusType.UPCOMING
        ),
        Activity(
            title = "Beasiswa Yatim Jabar",
            community = "Pemerintah Prov. Jabar",
            status = "Progress",
            kategori = "Sosial",
            lokasi = "Jawa Barat",
            periode = "6 Mar - 15 Jun 25",
            statusType = StatusType.IN_PROGRESS
        ),
        Activity(
            title = "Donor Darah Paragon 2025",
            community = "RS Bunda Mulia",
            status = "Progress",
            kategori = "Sosial",
            lokasi = "Jakarta Raya",
            periode = "12 Jan - 2 Apr 25",
            statusType = StatusType.IN_PROGRESS
        ),
        Activity(
            title = "Penanaman Mangrove",
            community = "Pemkot Kota Lombok",
            status = "Program Selesai",
            kategori = "Lingkungan",
            lokasi = "Pantai Barat, Lombok",
            periode = "12 Mar - 20 Jun 24",
            statusType = StatusType.COMPLETED
        )
    )
)

class HomeViewModel : ViewModel() {
    private val _homeState = MutableStateFlow(HomeState())
    val homeState: StateFlow<HomeState> = _homeState.asStateFlow()

    fun updateCompanyInfo(name: String, address: String) {
        _homeState.value = _homeState.value.copy(
            companyInfo = _homeState.value.companyInfo.copy(
                name = name,
                address = address
            )
        )
    }

    fun updateCSRStatus(completed: Int, inProgress: Int, upcoming: Int) {
        _homeState.value = _homeState.value.copy(
            csrStatus = CSRStatus(
                completed = completed,
                inProgress = inProgress,
                upcoming = upcoming
            )
        )
    }

    fun updateCSRFund(amount: String) {
        _homeState.value = _homeState.value.copy(
            csrFund = _homeState.value.csrFund.copy(
                amount = amount
            )
        )
    }

    fun updateBadgeInfo(levelBadge: String, emissionReduction: String) {
        _homeState.value = _homeState.value.copy(
            badgeInfo = BadgeInfo(
                levelBadge = levelBadge,
                emissionReduction = emissionReduction
            )
        )
    }

    fun updateActivities(activities: List<Activity>) {
        _homeState.value = _homeState.value.copy(
            activities = activities
        )
    }
} 

================================================================================

FILE 127: app\src\main\java\com\example\tumbuhnyata\viewmodel\NotificationViewModel.kt
Lines: 86 | Size: 3112 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.model.Notification
import com.example.tumbuhnyata.data.repository.NotificationRepository
import com.example.tumbuhnyata.di.NetworkModule
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class NotificationViewModel(
    private val repository: NotificationRepository
) : ViewModel() {

    private val _notifications = MutableStateFlow<List<Notification>>(emptyList())
    val notifications: StateFlow<List<Notification>> = _notifications

    private val _error = MutableStateFlow<String?>(null)
    val error: StateFlow<String?> = _error

    fun getNotifications(userId: String) {
        viewModelScope.launch {
            try {
                val result = repository.getNotifications(userId)
                _notifications.value = result
            } catch (e: Exception) {
                _error.value = "Gagal mengambil notifikasi: ${e.message}"
            }
        }
    }

    fun createNotification(notification: Notification) {
        viewModelScope.launch {
            try {
                repository.createNotification(notification)
                // Refresh notifications after creating new one
                getNotifications(notification.userId)
            } catch (e: Exception) {
                _error.value = "Gagal membuat notifikasi: ${e.message}"
            }
        }
    }

    fun markAsRead(id: Int) {
        viewModelScope.launch {
            try {
                val success = repository.markAsRead(id)
                if (success) {
                    // Update local state - mark notification as read
                    _notifications.value = _notifications.value.map { 
                        if (it.id == id) it.copy(isRead = 1) else it 
                    }
                }
            } catch (e: Exception) {
                _error.value = "Gagal menandai notifikasi: ${e.message}"
            }
        }
    }

    fun deleteNotification(id: Int) {
        viewModelScope.launch {
            try {
                val success = repository.deleteNotification(id)
                if (success) {
                    // Remove notification from local state
                    _notifications.value = _notifications.value.filter { it.id != id }
                }
            } catch (e: Exception) {
                _error.value = "Gagal menghapus notifikasi: ${e.message}"
            }
        }
    }
    
    // Factory pattern untuk membuat ViewModel
    class Factory : ViewModelProvider.Factory {
        @Suppress("UNCHECKED_CAST")
        override fun <T : ViewModel> create(modelClass: Class<T>): T {
            if (modelClass.isAssignableFrom(NotificationViewModel::class.java)) {
                return NotificationViewModel(NetworkModule.notificationRepository) as T
            }
            throw IllegalArgumentException("Unknown ViewModel class")
        }
    }
} 

================================================================================

FILE 128: app\src\main\java\com\example\tumbuhnyata\viewmodel\ProfileViewModel.kt
Lines: 106 | Size: 3971 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.di.NetworkModule
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

data class ProfileState(
    val companyName: String = "",
    val companyAddress: String = "",
    val email: String = "",
    val phoneNumber: String = "",
    val nib: String = "",
    val isLoggedIn: Boolean = true,
    val isLoading: Boolean = false,
    val error: String? = null
)

class ProfileViewModel : ViewModel() {
    private val repository = NetworkModule.profileRepository
    private val _profileState = MutableStateFlow(ProfileState(isLoading = true))
    val profileState: StateFlow<ProfileState> = _profileState.asStateFlow()

    init {
        loadUserProfile()
    }

    private fun loadUserProfile() {
        viewModelScope.launch {
            try {
                _profileState.value = _profileState.value.copy(isLoading = true, error = null)
                val profile = repository.getUserProfile()
                if (profile != null) {
                    _profileState.value = _profileState.value.copy(
                        companyName = profile.companyName,
                        companyAddress = profile.address,
                        email = profile.email,
                        phoneNumber = profile.phoneNumber,
                        nib = profile.nib,
                        isLoading = false
                    )
                } else {
                    _profileState.value = _profileState.value.copy(
                        isLoading = false,
                        error = "Gagal memuat profil"
                    )
                }
            } catch (e: Exception) {
                _profileState.value = _profileState.value.copy(
                    isLoading = false,
                    error = e.message ?: "Terjadi kesalahan saat memuat profil"
                )
            }
        }
    }

    fun logout() {
        _profileState.value = _profileState.value.copy(isLoggedIn = false)
    }

    fun updateProfile(companyName: String, email: String, phoneNumber: String, address: String) {
        viewModelScope.launch {
            try {
                _profileState.value = _profileState.value.copy(isLoading = true, error = null)
                val success = repository.updateProfile(companyName, email, phoneNumber, address)
                if (success) {
                    _profileState.value = _profileState.value.copy(
                        companyName = companyName,
                        companyAddress = address,
                        email = email,
                        phoneNumber = phoneNumber,
                        isLoading = false
                    )
                } else {
                    _profileState.value = _profileState.value.copy(
                        isLoading = false,
                        error = "Gagal memperbarui profil"
                    )
                }
            } catch (e: Exception) {
                _profileState.value = _profileState.value.copy(
                    isLoading = false,
                    error = e.message ?: "Terjadi kesalahan saat memperbarui profil"
                )
            }
        }
    }

    fun changePassword(currentPassword: String, newPassword: String, onSuccess: () -> Unit, onError: (String) -> Unit) {
        viewModelScope.launch {
            try {
                val success = repository.changePassword(currentPassword, newPassword)
                if (success) {
                    onSuccess()
                } else {
                    onError("Gagal mengubah password")
                }
            } catch (e: Exception) {
                onError(e.message ?: "Terjadi kesalahan saat mengubah password")
            }
        }
    }
}

================================================================================

FILE 129: app\src\main\java\com\example\tumbuhnyata\viewmodel\RegisterViewModel.kt
Lines: 138 | Size: 4219 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import com.example.tumbuhnyata.data.model.RegisterRequest
import com.example.tumbuhnyata.data.model.RegisterResponse
import com.example.tumbuhnyata.data.network.RetrofitInstance
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class RegisterViewModel : ViewModel() {
    
    // State for the registration form
    private val _companyName = MutableStateFlow("")
    val companyName: StateFlow<String> = _companyName
    
    private val _email = MutableStateFlow("")
    val email: StateFlow<String> = _email
    
    private val _phoneNumber = MutableStateFlow("")
    val phoneNumber: StateFlow<String> = _phoneNumber
    
    private val _nib = MutableStateFlow("")
    val nib: StateFlow<String> = _nib
    
    private val _address = MutableStateFlow("")
    val address: StateFlow<String> = _address
    
    private val _password = MutableStateFlow("")
    val password: StateFlow<String> = _password
    
    private val _currentStep = MutableStateFlow(1)
    val currentStep: StateFlow<Int> = _currentStep
    
    // UI states
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading
    
    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage
    
    private val _registerSuccess = MutableStateFlow(false)
    val registerSuccess: StateFlow<Boolean> = _registerSuccess
    
    // Update functions
    fun updateCompanyName(value: String) {
        _companyName.value = value
    }
    
    fun updateEmail(value: String) {
        _email.value = value
    }
    
    fun updatePhoneNumber(value: String) {
        _phoneNumber.value = value
    }
    
    fun updateNIB(value: String) {
        _nib.value = value
    }
    
    fun updateAddress(value: String) {
        _address.value = value
    }
    
    fun updatePassword(value: String) {
        _password.value = value
    }
    
    fun nextStep() {
        if (_currentStep.value < 3) {
            _currentStep.value += 1
        }
    }
    
    fun previousStep() {
        if (_currentStep.value > 1) {
            _currentStep.value -= 1
        }
    }
    
    fun register() {
        // Validation
        if (password.value.length < 8) {
            _errorMessage.value = "Kata sandi harus minimal 8 karakter"
            return
        }
        
        if (nib.value.isEmpty()) {
            _errorMessage.value = "NIB tidak boleh kosong"
            return
        }
        
        if (nib.value.length > 13) {
            _errorMessage.value = "NIB tidak boleh lebih dari 13 karakter"
            return
        }
        
        val registerRequest = RegisterRequest(
            companyName = companyName.value,
            email = email.value,
            password = password.value,
            phoneNumber = phoneNumber.value,
            NIB = nib.value,
            address = address.value
        )
        
        _isLoading.value = true
        _errorMessage.value = null
        
        RetrofitInstance.api.register(registerRequest).enqueue(object : Callback<RegisterResponse> {
            override fun onResponse(call: Call<RegisterResponse>, response: Response<RegisterResponse>) {
                _isLoading.value = false
                
                if (response.isSuccessful) {
                    _registerSuccess.value = true
                } else {
                    try {
                        _errorMessage.value = response.errorBody()?.string() ?: "Pendaftaran gagal"
                    } catch (e: Exception) {
                        _errorMessage.value = "Pendaftaran gagal: ${response.code()}"
                    }
                }
            }
            
            override fun onFailure(call: Call<RegisterResponse>, t: Throwable) {
                _isLoading.value = false
                _errorMessage.value = "Tidak dapat terhubung ke server: ${t.localizedMessage}"
            }
        })
    }
    
    fun clearError() {
        _errorMessage.value = null
    }
} 

================================================================================

FILE 130: app\src\main\java\com\example\tumbuhnyata\viewmodel\RiwayatPengajuanViewModel.kt
Lines: 71 | Size: 2240 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.R
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

data class RiwayatPengajuan(
    val id: String,
    val title: String,
    val status: String,
    val tanggal: String,
    val imageRes: Int
)

data class RiwayatPengajuanState(
    val isLoading: Boolean = false,
    val error: String? = null,
    val riwayatList: List<RiwayatPengajuan> = emptyList()
)

class RiwayatPengajuanViewModel : ViewModel() {
    private val _state = MutableStateFlow(RiwayatPengajuanState())
    val state: StateFlow<RiwayatPengajuanState> = _state.asStateFlow()

    init {
        loadRiwayatPengajuan()
    }

    private fun loadRiwayatPengajuan() {
        viewModelScope.launch {
            try {
                _state.value = _state.value.copy(isLoading = true)
                // TODO: Implement API call to fetch application history
                // For now using dummy data
                val dummyData = listOf(
                    RiwayatPengajuan(
                        id = "1",
                        title = "ISO 14001",
                        status = "Dalam Proses",
                        tanggal = "20 Mar 2024",
                        imageRes = R.drawable.iso_14001
                    ),
                    RiwayatPengajuan(
                        id = "2",
                        title = "ISO 26000",
                        status = "Selesai",
                        tanggal = "15 Feb 2024",
                        imageRes = R.drawable.iso_26000
                    )
                )
                _state.value = _state.value.copy(
                    isLoading = false,
                    riwayatList = dummyData
                )
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    error = e.message ?: "An error occurred"
                )
            }
        }
    }

    fun refreshRiwayatPengajuan() {
        loadRiwayatPengajuan()
    }
} 

================================================================================

FILE 131: app\src\main\java\com\example\tumbuhnyata\viewmodel\RiwayatViewModel.kt
Lines: 23 | Size: 967 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import com.example.tumbuhnyata.data.model.CsrItem
import com.example.tumbuhnyata.data.model.SubStatus
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow

open class RiwayatViewModel(dummyList: List<CsrItem>) : ViewModel() {
    private val _perluTindakanItems = MutableStateFlow(dummyList.filter {
        it.subStatus == SubStatus.MENUNGGU_PEMBAYARAN ||
                it.subStatus == SubStatus.MEMERLUKAN_REVISI ||
                it.subStatus == SubStatus.PROSES_REVIEW
    })
    val perluTindakanItems: StateFlow<List<CsrItem>> = _perluTindakanItems

    private val _diterimaItems = MutableStateFlow(dummyList.filter {
        it.subStatus == SubStatus.MENDATANG ||
                it.subStatus == SubStatus.PROGRESS ||
                it.subStatus == SubStatus.SELESAI
    })
    val diterimaItems: StateFlow<List<CsrItem>> = _diterimaItems
}

================================================================================

FILE 132: app\src\main\java\com\example\tumbuhnyata\viewmodel\SertifikasiViewModel.kt
Lines: 64 | Size: 2236 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.Sertifikasi.Sertifikasi
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

data class SertifikasiState(
    val isLoading: Boolean = false,
    val error: String? = null,
    val sertifikasiList: List<Sertifikasi> = emptyList()
)

class SertifikasiViewModel : ViewModel() {
    private val _state = MutableStateFlow(SertifikasiState())
    val state: StateFlow<SertifikasiState> = _state.asStateFlow()

    init {
        loadSertifikasi()
    }

    private fun loadSertifikasi() {
        viewModelScope.launch {
            try {
                _state.value = _state.value.copy(isLoading = true)
                // TODO: Implement API call to fetch certifications
                // For now using dummy data
                val dummyData = listOf(
                    Sertifikasi(
                        title = "Environmental Management System",
                        code = "ISO 14001",
                        issued = "Issued Jun 2024 - Expires Jun 2027",
                        credentialId = "Credential ID ABC123XYZ",
                        imageRes = R.drawable.iso_14001
                    ),
                    Sertifikasi(
                        title = "Social Responsibility",
                        code = "ISO 26000",
                        issued = "Issued Feb 2023 - Expires Feb 2026",
                        credentialId = "Credential ID DEF456LMN",
                        imageRes = R.drawable.iso_26000
                    )
                )
                _state.value = _state.value.copy(
                    isLoading = false,
                    sertifikasiList = dummyData
                )
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    error = e.message ?: "An error occurred"
                )
            }
        }
    }

    fun refreshSertifikasi() {
        loadSertifikasi()
    }
}

================================================================================

FILE 133: app\src\main\java\com\example\tumbuhnyata\viewmodel\SplashViewModel.kt
Lines: 24 | Size: 766 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class SplashViewModel : ViewModel() {
    private val _splashState = MutableStateFlow(0) // 0: Background, 1: Logo, 2: Glow Effect
    val splashState = _splashState.asStateFlow()

    init {
        viewModelScope.launch {
            delay(1000) // Tahap 1: Background
            _splashState.value = 1
            delay(1000) // Tahap 2: Logo muncul
            _splashState.value = 2
            delay(1000) // Tahap 3: Glow effect
            _splashState.value = 3
        }
    }
}

================================================================================

FILE 134: app\src\main\java\com\example\tumbuhnyata\viewmodel\UploadViewModel.kt
Lines: 96 | Size: 2883 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import android.app.Application
import android.net.Uri
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.model.UploadResponse
import com.example.tumbuhnyata.data.repository.UploadRepository
import com.example.tumbuhnyata.data.util.Resource
import com.example.tumbuhnyata.data.network.RetrofitInstance
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

data class UploadState(
    val isLoading: Boolean = false,
    val selectedFileUri: Uri? = null,
    val selectedFileName: String? = null,
    val uploadResult: Resource<UploadResponse>? = null,
    val isUploadEnabled: Boolean = false
)

class UploadViewModel(application: Application) : AndroidViewModel(application) {

    private val _uploadState = MutableStateFlow(UploadState())
    val uploadState: StateFlow<UploadState> = _uploadState.asStateFlow()

    // Manual DI for Repository
    private val uploadRepository: UploadRepository

    init {
        val dashboardApi = RetrofitInstance.dashboardApi
        uploadRepository = UploadRepository(dashboardApi, application.applicationContext)
    }

    /**
     * Sets the selected file for upload
     */
    fun selectFile(uri: Uri, fileName: String) {
        _uploadState.value = _uploadState.value.copy(
            selectedFileUri = uri,
            selectedFileName = fileName,
            isUploadEnabled = true,
            uploadResult = null // Clear previous results
        )
    }

    /**
     * Clears the selected file
     */
    fun clearSelectedFile() {
        _uploadState.value = _uploadState.value.copy(
            selectedFileUri = null,
            selectedFileName = null,
            isUploadEnabled = false,
            uploadResult = null
        )
    }

    /**
     * Uploads the selected file
     */
    fun uploadFile() {
        val fileUri = _uploadState.value.selectedFileUri
        if (fileUri == null) {
            _uploadState.value = _uploadState.value.copy(
                uploadResult = Resource.Error("No file selected")
            )
            return
        }

        viewModelScope.launch {
            _uploadState.value = _uploadState.value.copy(
                isLoading = true,
                uploadResult = null
            )

            val result = uploadRepository.uploadCsvFile(fileUri)
            
            _uploadState.value = _uploadState.value.copy(
                isLoading = false,
                uploadResult = result
            )
        }
    }

    /**
     * Clears the upload result (for dismissing error messages)
     */
    fun clearUploadResult() {
        _uploadState.value = _uploadState.value.copy(
            uploadResult = null
        )
    }
} 

================================================================================

FILE 135: app\src\main\java\com\example\tumbuhnyata\viewmodel\VerificationOneViewModel.kt
Lines: 45 | Size: 1410 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow

data class VerificationOneState(
    val aktaFile: String? = null,
    val skdpFile: String? = null,
    val isBothFilesUploaded: Boolean = false
)

class VerificationOneViewModel : ViewModel() {
    private val _verificationState = MutableStateFlow(VerificationOneState())
    val verificationState: StateFlow<VerificationOneState> = _verificationState.asStateFlow()

    fun uploadAktaFile(fileName: String) {
        _verificationState.value = _verificationState.value.copy(
            aktaFile = fileName,
            isBothFilesUploaded = _verificationState.value.skdpFile != null
        )
    }

    fun uploadSkdpFile(fileName: String) {
        _verificationState.value = _verificationState.value.copy(
            skdpFile = fileName,
            isBothFilesUploaded = _verificationState.value.aktaFile != null
        )
    }

    fun deleteAktaFile() {
        _verificationState.value = _verificationState.value.copy(
            aktaFile = null,
            isBothFilesUploaded = false
        )
    }

    fun deleteSkdpFile() {
        _verificationState.value = _verificationState.value.copy(
            skdpFile = null,
            isBothFilesUploaded = false
        )
    }
} 

================================================================================

FILE 136: app\src\main\java\com\example\tumbuhnyata\viewmodel\VerificationTwoViewModel.kt
Lines: 30 | Size: 905 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow

data class VerificationTwoState(
    val picFile: String? = null,
    val isFileUploaded: Boolean = false
)

class VerificationTwoViewModel : ViewModel() {
    private val _verificationState = MutableStateFlow(VerificationTwoState())
    val verificationState: StateFlow<VerificationTwoState> = _verificationState.asStateFlow()

    fun uploadPicFile(fileName: String) {
        _verificationState.value = _verificationState.value.copy(
            picFile = fileName,
            isFileUploaded = true
        )
    }

    fun deletePicFile() {
        _verificationState.value = _verificationState.value.copy(
            picFile = null,
            isFileUploaded = false
        )
    }
} 

================================================================================

FILE 137: app\src\main\java\com\example\tumbuhnyata\viewmodel\WorkshopDetailViewModel.kt
Lines: 24 | Size: 855 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.model.Workshop
import com.example.tumbuhnyata.data.model.recommendedWorkshops
import com.example.tumbuhnyata.data.model.recentWorkshops
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class WorkshopDetailViewModel : ViewModel() {

    private val _selectedWorkshop = MutableStateFlow<Workshop?>(null)
    val selectedWorkshop: StateFlow<Workshop?> = _selectedWorkshop

    fun loadWorkshopById(id: String) {
        viewModelScope.launch {
            val found = recommendedWorkshops.find { it.id == id }
                ?: recentWorkshops.find { it.id == id }
            _selectedWorkshop.value = found
        }
    }
}


================================================================================

FILE 138: app\src\main\java\com\example\tumbuhnyata\viewmodel\WorkshopViewModel.kt
Lines: 22 | Size: 755 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.State
import com.example.tumbuhnyata.data.model.recommendedWorkshops
import com.example.tumbuhnyata.data.model.recentWorkshops
import com.example.tumbuhnyata.data.model.Workshop

class WorkshopViewModel : ViewModel() {

    private val _recommended = mutableStateOf<List<Workshop>>(emptyList())
    val recommended: State<List<Workshop>> = _recommended

    private val _recent = mutableStateOf<List<Workshop>>(emptyList())
    val recent: State<List<Workshop>> = _recent

    init {
        _recommended.value = recommendedWorkshops.take(4)
        _recent.value = recentWorkshops.take(4)
    }
}

================================================================================

FILE 139: app\src\main\res\drawable\angle_double_small_down.xml
Lines: 5 | Size: 592 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="512dp" android:viewportHeight="24" android:viewportWidth="24" android:width="512dp">
      
    <path android:fillColor="#FF000000" android:pathData="M12,13.033c-0.445,0 -0.864,-0.173 -1.178,-0.488L4.951,6.674l2.121,-2.121 4.928,4.928 4.928,-4.928 2.121,2.121 -5.87,5.871c-0.315,0.315 -0.733,0.488 -1.179,0.488ZM13.725,19.311l5.345,-5.344 -2.121,-2.121 -4.991,4.991 -4.896,-4.896 -2.121,2.121 5.25,5.25c0.472,0.472 1.1,0.732 1.768,0.732s1.296,-0.26 1.768,-0.732Z"/>
    
</vector>


================================================================================

FILE 140: app\src\main\res\drawable\ic_carbonfootprint.xml
Lines: 9 | Size: 1393 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="14dp"
    android:height="15dp"
    android:viewportWidth="14"
    android:viewportHeight="15">
  <path
      android:pathData="M7,0.5C10.866,0.5 14,3.634 14,7.5C14,11.366 10.866,14.5 7,14.5C3.134,14.5 0,11.366 0,7.5C0,3.634 3.134,0.5 7,0.5ZM8.4,8.48L7.305,9.356C7.267,9.386 7.235,9.425 7.213,9.469C7.19,9.513 7.177,9.561 7.174,9.61C7.172,9.659 7.179,9.708 7.197,9.754C7.215,9.8 7.242,9.842 7.277,9.877L8.144,10.744C8.312,10.912 8.434,11.12 8.499,11.349L8.622,11.778C8.673,11.958 8.763,12.124 8.886,12.265C9.009,12.406 9.162,12.517 9.334,12.592C10.004,12.285 10.606,11.848 11.107,11.307L10.943,9.993C10.914,9.765 10.83,9.547 10.697,9.359C10.564,9.171 10.386,9.018 10.18,8.915L9.151,8.4C9.031,8.34 8.897,8.316 8.764,8.33C8.631,8.344 8.504,8.396 8.4,8.48ZM7,1.9C6.143,1.899 5.298,2.096 4.529,2.474C3.76,2.852 3.088,3.401 2.566,4.08L2.45,4.234V5.414C2.45,5.841 2.58,6.259 2.823,6.61C3.067,6.961 3.411,7.23 3.812,7.38L3.936,7.422L4.839,7.699C5.8,7.993 6.736,7.211 6.643,6.232L6.63,6.13L6.507,5.396C6.48,5.233 6.511,5.066 6.595,4.924C6.679,4.782 6.811,4.675 6.966,4.62L7.042,4.599L7.47,4.501C7.713,4.446 7.943,4.342 8.145,4.196C8.348,4.051 8.519,3.866 8.649,3.653C8.778,3.44 8.864,3.203 8.901,2.957C8.938,2.71 8.925,2.459 8.863,2.217C8.264,2.007 7.634,1.899 7,1.9Z"
      android:fillColor="#F8F8F8"/>
</vector>


================================================================================

FILE 141: app\src\main\res\drawable\ic_filter.xml
Lines: 11 | Size: 413 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M10,18h4v-2h-4v2zM3,6v2h18L21,6L3,6zM6,13h12v-2L6,11v2z"/>
</vector> 

================================================================================

FILE 142: app\src\main\res\drawable\ic_konsumsienergi.xml
Lines: 5 | Size: 777 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="13dp" android:viewportHeight="13" android:viewportWidth="10" android:width="10dp">
      
    <path android:fillColor="#F8F8F8" android:pathData="M4.358,8.125L0.557,7.637C0.29,7.605 0.116,7.459 0.035,7.199C-0.045,6.939 0.011,6.717 0.204,6.532L6.764,0.162C6.818,0.108 6.882,0.068 6.957,0.041C7.032,0.014 7.133,0 7.262,0C7.475,0 7.639,0.092 7.751,0.276C7.864,0.46 7.866,0.65 7.759,0.845L5.642,4.875L9.443,5.363C9.71,5.395 9.884,5.541 9.965,5.801C10.045,6.061 9.989,6.283 9.796,6.467L3.236,12.837C3.182,12.892 3.118,12.932 3.043,12.96C2.968,12.987 2.867,13 2.738,13C2.525,13 2.361,12.908 2.249,12.724C2.136,12.54 2.134,12.35 2.241,12.155L4.358,8.125Z"/>
    
</vector>


================================================================================

FILE 143: app\src\main\res\drawable\ic_launcher_background.xml
Lines: 170 | Size: 5606 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>


================================================================================

FILE 144: app\src\main\res\drawable\ic_launcher_foreground.xml
Lines: 30 | Size: 1702 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

================================================================================

FILE 145: app\src\main\res\drawable\ic_pembaruandatasplashlogo.xml
Lines: 29 | Size: 10124 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="156dp" android:viewportHeight="156" android:viewportWidth="200" android:width="200dp">
      
    <path android:fillColor="#C7C7C7" android:pathData="M4.21,102.84H4.44H4.65L8.88,101.33H9.13L11.54,100.48L11.83,100.39L15.66,99.06L15.96,98.94L18.31,98.12L18.66,98.01L23.07,96.5L23.43,96.38L26.08,95.45L26.49,95.32L29.79,94.17L30.23,94.01L33.12,93L33.59,92.85L37.59,91.45L38,91.3L41.03,90.24L41.42,90.11L44.34,89.09L44.69,88.97L48.02,87.8L48.34,87.68L51.23,86.68L51.52,86.59L55.58,85.17L55.88,85.08L60.15,83.56L60.38,83.47L63.65,82.34H63.86L68.1,80.82H68.28L71.86,79.58H72.03L75.77,78.28L72.21,77.13H72.06L67.94,75.81H67.75L64.23,74.68H64.03L59.49,73.16H59.23L56.2,72.19L55.93,72.1L49.31,69.97L48.98,69.86L47.39,68.74L47.04,68.63L40.57,66.54L40.18,66.42L38.75,65.97L38.33,65.85L31.7,63.74L31.18,63.59L29.67,63.11L29.18,62.95L22.2,60.7L21.69,60.55L20.89,60.29L20.4,60.12L12.71,57.65L12.25,57.5L11.56,57.28L11.15,57.15L3.47,54.67C3.47,54.88 3.33,55.09 3.27,55.32C3.27,55.5 3.15,55.69 3.11,55.87V56.02C3.03,56.23 2.97,56.46 2.91,56.67C1.39,62.11 0.45,67.69 0.11,73.33V74.01C-0.04,76.59 -0.04,79.17 0.11,81.75C0.11,82.25 0.11,82.73 0.2,83.26C0.73,89.93 2.08,96.5 4.21,102.84Z"/>
      
    <path android:fillColor="#DBDBDB" android:pathData="M72.22,76.77L72.04,79.22H71.87L72.07,76.66L72.22,76.77ZM67.77,75.34L68.12,80.58H68.3L67.95,75.46L67.77,75.34ZM63.67,82.14H63.88L64.24,74.28H64.04L63.67,82.14ZM59.29,72.62L60.17,83.37L60.4,83.28L59.55,72.68L59.29,72.62ZM55.59,84.94L55.9,84.85L56.28,71.65L56,71.56L55.59,84.94ZM49.39,69.42L49.05,69.31L50.17,78.04L51.25,86.46L51.54,86.37L50.42,77.99L49.39,69.42ZM48.04,87.59L48.36,87.47L47.39,68.74L47.04,68.63L48.04,87.59ZM40.59,66.6L40.19,66.48L44.36,88.87L44.71,88.74L40.59,66.6ZM38.3,65.88L41,90.02L41.39,89.88L38.72,66L38.3,65.88ZM31.65,63.73L31.14,63.58L37.54,91.23L37.95,91.08L31.65,63.82V63.73ZM29.21,62.94L33.12,92.77L33.59,92.62L29.7,63.09L29.21,62.94ZM21.64,60.53L29.71,93.94L30.15,93.79L22.23,60.68L21.64,60.53ZM20.36,60.11L26,95.23L26.41,95.09L20.84,60.26L20.36,60.11ZM12.21,57.49L22.99,96.27L23.35,96.15L12.74,57.64L12.21,57.49ZM11.1,57.14L18.24,97.92L18.58,97.82L11.59,57.26L11.1,57.14ZM3.09,55.88L15.58,98.86L15.89,98.74L3.33,55.32C3.33,55.5 3.21,55.69 3.17,55.87L3.09,55.88ZM2.85,56.7L11.47,100.28L11.75,100.19L3.12,56.05C3.05,56.26 2.99,56.49 2.92,56.7H2.85ZM0.08,74.04L8.88,101.21H9.13L0.05,73.43V74.12L0.08,74.04ZM0.2,83.26L4.44,102.74H4.65L0.11,81.82C0.12,82.28 0.15,82.76 0.2,83.26Z"/>
      
    <path android:fillColor="#A6A6A6" android:pathData="M4.21,102.84L10.28,102.19L81.84,77.26L75.78,77.92L4.21,102.84Z"/>
      
    <path android:fillColor="#A6A6A6" android:pathData="M75.78,77.92L81.84,77.26L9.59,54.02L3.52,54.67L75.78,77.92Z"/>
      
    <path android:fillColor="#37474F" android:pathData="M115.81,0L116.31,77.96L43.13,54.34C53.44,21.52 81.87,0.23 115.81,0Z"/>
      
    <path android:fillColor="#263238" android:pathData="M113.81,0.03L115.81,3.42V3.88L113.53,0.05L113.81,0.03ZM110.97,0.18L115.87,11.06V10.45L111.32,0.15L110.97,0.18ZM102.48,1.2L115.94,23.31V22.7L102.8,1.15L102.48,1.2ZM100.66,1.55L116.02,34.36V33.59L100.96,1.5C100.86,1.51 100.76,1.52 100.66,1.55ZM105.81,28.41L116.08,43.55V42.99L106.14,28.29L94.12,10.44L90.09,4.48C89.97,4.52 89.85,4.57 89.73,4.62L93.8,10.68L105.81,28.41ZM88.82,4.95L116.08,52.78V51.93L89.18,4.8L88.82,4.95ZM79.61,9.16L116.15,57.08V56.35L80.02,8.94L79.61,9.16ZM78.78,9.62L116.23,66.95V66.04L79.19,9.39C79.06,9.5 78.93,9.6 78.78,9.68V9.62ZM70.84,14.75L116.28,69.27V68.47L71.3,14.43L70.84,14.75ZM69.92,15.46L111.43,76.39L112.32,76.67L70.36,15.13C70.2,15.23 70.06,15.34 69.92,15.46ZM63.08,21.37L109.22,75.67L110.26,76.01L63.47,20.99C63.35,21.12 63.21,21.25 63.08,21.37ZM62.33,22.13L98.68,72.27L99.48,72.52L62.71,21.79L62.33,22.13ZM56.38,28.87L94.71,70.98L95.65,71.3L56.67,28.5L56.38,28.87ZM55.44,30.11L83.14,67.22L83.84,67.45L55.73,29.73C55.62,29.85 55.53,29.99 55.44,30.11ZM50.7,37.22L76.78,65.2L77.55,65.45L50.9,36.94C50.83,37.03 50.76,37.12 50.7,37.22ZM49.99,38.45L68.89,62.68L69.47,62.86L50.17,38.12C50.11,38.23 50.05,38.34 49.99,38.45ZM46.02,46.49L58.8,59.41L59.5,59.65L46.19,46.22C46.13,46.31 46.07,46.4 46.02,46.49ZM45.33,48.16L52.9,57.5L53.38,57.67L45.42,47.86C45.38,47.95 45.35,48.06 45.33,48.16Z"/>
      
    <path android:fillColor="#E6FD4B" android:pathData="M116.31,77.96L189.48,101.57C184.69,117.17 175.07,130.84 162.01,140.61C148.94,150.39 133.1,155.75 116.79,155.94C108.72,155.98 100.7,154.74 93.03,152.26C68.8,144.43 51.43,127.04 43.42,102.53L116.31,77.96Z"/>
      
    <path android:fillColor="#E6FD4B" android:pathData="M189.48,101.57H195.54C190.75,117.17 181.13,130.84 168.06,140.61C154.99,150.38 139.16,155.74 122.85,155.92H116.79C133.1,155.74 148.94,150.38 162,140.6C175.07,130.84 184.69,117.17 189.48,101.57Z"/>
      
    <path android:fillAlpha="0.1" android:fillColor="#000000" android:pathData="M189.48,101.57H195.54C190.75,117.17 181.13,130.84 168.06,140.61C154.99,150.38 139.16,155.74 122.85,155.92H116.79C133.1,155.74 148.94,150.38 162,140.6C175.07,130.84 184.69,117.17 189.48,101.57Z" android:strokeAlpha="0.1"/>
      
    <path android:fillAlpha="0.1" android:fillColor="#000000" android:pathData="M186.18,100.54L187.01,108.36C187.02,108.39 187.02,108.42 187.01,108.45L186.16,100.53L186.18,100.54ZM177.79,97.83L183.94,114.9L177.88,97.92L177.79,97.83ZM174.76,96.88L178.49,123.64V123.53L174.76,96.91V96.88ZM169.48,95.16L177.29,125.29V125.18L169.52,95.23L169.48,95.16ZM167.42,94.51L171.57,132.07L171.69,131.93L167.63,94.48L167.42,94.51ZM161.18,92.5L170.26,133.39L170.4,133.25L161.31,92.59L161.18,92.5ZM159.66,92L163.34,139.54L163.54,139.4L159.86,92.06L159.66,92ZM153.95,90.17L153.7,90.08L162.24,140.4L162.43,140.25L153.95,90.17ZM151.7,89.44L152.35,146.79L152.61,146.64L151.95,89.52L151.7,89.44ZM145.17,87.34L144.84,87.21L151.5,147.23L151.77,147.09L145.17,87.34ZM142.84,151.12L143.2,150.98L143.7,86.87L143.4,86.74L142.84,151.12ZM137.24,84.78L136.86,84.64L142.19,151.36L142.52,151.24L137.24,84.78ZM133.71,153.91C133.85,153.89 133.99,153.85 134.13,153.82L136.25,84.37L135.86,84.25L133.71,153.91ZM128.48,81.87L128.01,81.72L132.93,154.09L133.36,154L128.48,81.87ZM121.09,79.48L120.55,79.31L123.12,155.63H123.62H124.12L127.36,81.6L126.89,81.44L123.62,155.54L121.09,79.48ZM112,79.48L111.51,79.63L113.31,155.89H113.78H114.31L119.91,79.07L119.36,78.9L113.82,155.39L112,79.48ZM103.63,154.86L104.07,154.94L111.04,79.79L110.54,79.96L103.63,154.86ZM104.63,81.96L103.21,154.79H103.63L105.04,81.75L104.63,81.96ZM93.03,152.24H93.15H93.38L104.15,82L103.71,82.16L93.03,152.24ZM92.82,149L92.58,152.15L92.94,152.27L93.18,149.02L93.97,138.78L95.48,118.29L98.07,84.17L97.74,84.29L95.12,118.27L93.61,138.75L92.82,149ZM81.66,147.67L81.93,147.8L96.94,84.58L96.57,84.7L81.66,147.67ZM88.14,87.55L80.7,147.14L80.98,147.27L88.35,87.38L88.14,87.55ZM73,142.65L73.19,142.79L87.15,87.87L86.87,87.96L73,142.65ZM68.56,94.2L63.52,135.08C63.57,135.12 63.62,135.17 63.67,135.22L68.69,94.12L68.56,94.2ZM56.44,127.25L56.53,127.38L67.13,94.7H66.98L56.44,127.25ZM78.72,90.79L71.62,141.66C71.68,141.71 71.74,141.76 71.81,141.79L78.81,90.58L78.72,90.79ZM64.58,136.05L64.71,136.16L72.28,109.76L77.01,93.11L77.55,91.18H77.34L76.75,92.97L72.03,109.63L64.58,136.05ZM61.91,96.3L55.59,126.07C55.59,126.11 55.59,126.15 55.59,126.19L61.94,96.27L61.91,96.3ZM51.57,120.23C51.56,120.26 51.56,120.29 51.57,120.32L60.55,96.82H60.44L51.57,120.23ZM55.69,98.47L50.61,118.65V118.74L55.7,98.45L55.69,98.47ZM48.36,100.95L45.6,108.52L48.37,100.95H48.36ZM43.57,102.98C43.7,102.78 43.83,102.59 43.98,102.4L43.57,102.98Z" android:strokeAlpha="0.1"/>
      
    <path android:fillColor="#455A64" android:pathData="M115.81,0C158.21,-0.27 192.8,34.41 193.04,77.46C193.16,85.64 191.95,93.78 189.45,101.57L116.28,77.96L115.81,0Z"/>
      
    <path android:fillColor="#37474F" android:pathData="M183.53,40.3L183.79,40.8L116.2,62.36V61.77L183.53,40.3ZM183.98,41.16L116.26,70.25V70.8L184.23,41.63C184.15,41.47 184.07,41.31 183.98,41.16ZM116.15,53.28V53.81L178.24,32.02C178.15,31.85 178.04,31.7 177.91,31.56L116.15,53.28ZM178.58,32.39L116.18,59.88V60.5L178.87,32.85C178.79,32.67 178.67,32.51 178.58,32.39ZM116.02,34.57V34.94L163.34,16.4L163.02,16.14L116.02,34.57ZM164.37,17.25L116.06,41.18V41.63L164.69,17.4C164.59,17.34 164.48,17.29 164.37,17.25ZM116.08,43.3V43.74L171.23,23.57C171.12,23.44 171.01,23.33 170.88,23.22L116.08,43.3ZM172.11,24.44L116.14,51.32V51.85L172.38,24.72C172.28,24.61 172.17,24.49 172.05,24.38L172.11,24.44ZM115.9,15.74V15.95L140.23,3.92H139.96L115.9,15.74ZM143.16,4.95L116,21.61V21.79L143.44,4.98L143.16,4.95ZM115.96,25.14V25.43L153.62,9.83C153.51,9.76 153.4,9.7 153.29,9.65L115.96,25.14ZM155.42,10.89L116.05,31.99V32.39L155.76,11.1L155.42,10.89ZM115.85,6.65V6.8L127.16,0.74H126.94L115.85,6.65ZM131.81,1.59L115.88,12.51V12.71L132.05,1.62C131.98,1.61 131.89,1.6 131.81,1.61V1.59ZM115.82,2.71V2.85L119.61,0.06H119.41L115.82,2.71ZM192.77,84.88L161.78,92.65L162.18,92.79L192.77,85.12C192.77,85.12 192.77,84.97 192.77,84.88ZM150.8,89.11L151.38,89.29L192.84,83.75C192.84,83.66 192.84,83.58 192.84,83.49L150.8,89.11ZM191.25,94.95L179.02,98.19L179.3,98.28L191.22,95.13C191.24,95.08 191.25,95.01 191.25,94.95ZM172.75,96.18L173.17,96.32L191.34,94.41C191.35,94.35 191.35,94.29 191.34,94.23L172.75,96.18ZM192.99,74.33L144.68,87.12L145.18,87.27L192.99,74.63V74.33ZM130.75,82.61L131.48,82.85L192.95,73.63C192.96,73.52 192.96,73.42 192.95,73.31L130.75,82.61ZM158.9,71.63L127.45,81.55L128.03,81.75L159.03,71.98L179.49,65.53L189.74,62.32L191.43,61.79C191.43,61.67 191.43,61.55 191.43,61.41L189.71,61.95L179.47,65.18L158.9,71.63ZM117.05,78.2L117.82,78.45L191.25,61.24C191.23,61.12 191.21,61 191.18,60.88L117.05,78.2ZM188.22,50.72L116.35,77.98L116.99,78.17L188.39,51.16C188.35,51.01 188.29,50.86 188.22,50.72ZM116.25,71.42V71.93L188.22,50.57C188.18,50.41 188.13,50.27 188.06,50.13L116.25,71.42Z"/>
      
    <path android:fillColor="#37474F" android:pathData="M115.81,0H121.86C164.27,-0.29 198.87,34.39 199.1,77.45C199.22,85.63 198,93.78 195.49,101.57H189.43C191.93,93.78 193.15,85.64 193.02,77.46C192.77,34.41 158.19,-0.27 115.81,0Z"/>
    
</vector>


================================================================================

FILE 146: app\src\main\res\drawable\ic_penerimamanfaat.xml
Lines: 9 | Size: 1164 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="15dp" android:viewportHeight="15" android:viewportWidth="15" android:width="15dp">
      
    <path android:fillColor="#00000000" android:pathData="M4.75,10.75C5.993,10.75 7,9.743 7,8.5C7,7.257 5.993,6.25 4.75,6.25C3.507,6.25 2.5,7.257 2.5,8.5C2.5,9.743 3.507,10.75 4.75,10.75Z" android:strokeColor="#F8F8F8" android:strokeLineCap="round" android:strokeLineJoin="round" android:strokeWidth="1.5"/>
      
    <path android:fillColor="#00000000" android:pathData="M10.75,5.75C11.993,5.75 13,4.743 13,3.5C13,2.257 11.993,1.25 10.75,1.25C9.507,1.25 8.5,2.257 8.5,3.5C8.5,4.743 9.507,5.75 10.75,5.75Z" android:strokeColor="#F8F8F8" android:strokeLineCap="round" android:strokeLineJoin="round" android:strokeWidth="1.5"/>
      
    <path android:fillColor="#00000000" android:pathData="M7.5,8.75C7.5,7.75 8.25,5.75 10.75,5.75C13.25,5.75 14,7.75 14,8.75M1.5,13.75C1.5,12.75 2.25,10.75 4.75,10.75C7.25,10.75 8,12.75 8,13.75" android:strokeColor="#F8F8F8" android:strokeLineCap="round" android:strokeLineJoin="round" android:strokeWidth="1.5"/>
    
</vector>


================================================================================

FILE 147: app\src\main\res\drawable\ic_pengelolaansampah.xml
Lines: 5 | Size: 1408 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="11dp" android:viewportHeight="11" android:viewportWidth="10" android:width="10dp">
      
    <path android:fillColor="#F8F8F8" android:fillType="evenOdd" android:pathData="M3.103,0.322C3.312,0.116 3.594,0 3.889,0H6.111C6.406,0 6.688,0.116 6.897,0.322C7.105,0.528 7.222,0.808 7.222,1.1V2.2H8.882C8.886,2.2 8.89,2.2 8.894,2.2H9.444C9.751,2.2 10,2.446 10,2.75C10,3.054 9.751,3.3 9.444,3.3H9.4L8.889,9.375C8.882,9.804 8.707,10.213 8.401,10.517C8.088,10.826 7.664,11 7.222,11H2.778C2.336,11 1.912,10.826 1.599,10.517C1.293,10.213 1.118,9.804 1.111,9.375L0.6,3.3H0.556C0.249,3.3 0,3.054 0,2.75C0,2.446 0.249,2.2 0.556,2.2H1.106C1.11,2.2 1.114,2.2 1.118,2.2H2.778V1.1C2.778,0.808 2.895,0.528 3.103,0.322ZM1.715,3.3L2.22,9.304C2.222,9.32 2.222,9.335 2.222,9.35C2.222,9.496 2.281,9.636 2.385,9.739C2.489,9.842 2.63,9.9 2.778,9.9H7.222C7.37,9.9 7.511,9.842 7.615,9.739C7.719,9.636 7.778,9.496 7.778,9.35C7.778,9.335 7.778,9.32 7.78,9.304L8.285,3.3H1.715ZM6.111,2.2H3.889V1.1H6.111V2.2ZM3.889,4.4C4.196,4.4 4.444,4.646 4.444,4.95V8.25C4.444,8.554 4.196,8.8 3.889,8.8C3.582,8.8 3.333,8.554 3.333,8.25V4.95C3.333,4.646 3.582,4.4 3.889,4.4ZM6.111,4.4C6.418,4.4 6.667,4.646 6.667,4.95V8.25C6.667,8.554 6.418,8.8 6.111,8.8C5.804,8.8 5.556,8.554 5.556,8.25V4.95C5.556,4.646 5.804,4.4 6.111,4.4Z"/>
    
</vector>


================================================================================

FILE 148: app\src\main\res\drawable\ic_penggunaanair.xml
Lines: 7 | Size: 1790 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="13dp" android:viewportHeight="13" android:viewportWidth="10" android:width="10dp">
      
    <path android:fillColor="#F8F8F8" android:pathData="M5.406,0.4C5.293,0.303 5.149,0.25 5,0.25C4.85,0.25 4.706,0.304 4.593,0.401L4.537,0.449C4.314,0.648 4.094,0.853 3.879,1.063C3.333,1.595 2.816,2.156 2.33,2.744C1.766,3.428 1.191,4.227 0.754,5.07C0.319,5.907 0,6.83 0,7.75C0,9.076 0.527,10.348 1.464,11.285C2.402,12.223 3.674,12.75 5,12.75C6.326,12.75 7.598,12.223 8.536,11.285C9.473,10.348 10,9.076 10,7.75C10,6.83 9.681,5.907 9.246,5.07C8.809,4.226 8.234,3.428 7.67,2.743C7.034,1.974 6.345,1.251 5.608,0.579L5.407,0.401L5.406,0.4ZM1.25,7.75C1.25,7.108 1.477,6.389 1.863,5.645C2.247,4.906 2.765,4.182 3.294,3.538C3.825,2.897 4.394,2.289 5,1.719C5.606,2.289 6.175,2.896 6.705,3.537C7.235,4.181 7.753,4.906 8.136,5.644C8.523,6.389 8.75,7.107 8.75,7.749C8.75,8.744 8.355,9.698 7.652,10.401C6.948,11.104 5.995,11.499 5,11.499C4.005,11.499 3.052,11.104 2.348,10.401C1.645,9.698 1.25,8.744 1.25,7.749V7.75Z"/>
      
    <path android:fillColor="#F8F8F8" android:pathData="M2.725,7.776C2.566,7.824 2.433,7.932 2.354,8.078C2.275,8.223 2.257,8.394 2.304,8.553C2.438,9.001 2.681,9.408 3.011,9.739C3.342,10.069 3.749,10.313 4.197,10.446C4.276,10.47 4.359,10.479 4.441,10.471C4.523,10.462 4.602,10.438 4.675,10.399C4.748,10.36 4.812,10.307 4.864,10.243C4.916,10.179 4.955,10.106 4.979,10.027C5.002,9.948 5.01,9.865 5.001,9.783C4.992,9.701 4.968,9.621 4.928,9.549C4.888,9.477 4.835,9.413 4.771,9.361C4.706,9.31 4.632,9.271 4.553,9.248C4.305,9.174 4.079,9.038 3.895,8.855C3.712,8.672 3.577,8.445 3.502,8.197C3.455,8.038 3.346,7.905 3.201,7.826C3.055,7.747 2.884,7.729 2.725,7.776Z"/>
    
</vector>


================================================================================

FILE 149: app\src\main\res\drawable\ic_pohontertanam.xml
Lines: 5 | Size: 2714 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="13dp" android:viewportHeight="13" android:viewportWidth="10" android:width="10dp">
      
    <path android:fillColor="#F8F8F8" android:fillType="evenOdd" android:pathData="M3.609,1.301C3.271,1.293 2.94,1.394 2.676,1.587C2.412,1.78 2.232,2.052 2.168,2.354C2.104,2.657 2.16,2.97 2.326,3.239C2.512,3.539 2.407,3.92 2.088,4.105C1.899,4.215 1.741,4.365 1.627,4.541C1.512,4.717 1.446,4.915 1.432,5.119C1.417,5.323 1.456,5.528 1.545,5.715C1.634,5.903 1.771,6.069 1.943,6.2C2.152,6.358 2.244,6.61 2.181,6.85C2.133,7.035 2.129,7.227 2.171,7.414C2.213,7.6 2.3,7.775 2.424,7.928C2.549,8.08 2.708,8.206 2.892,8.296C3.073,8.385 3.273,8.437 3.478,8.449L3.582,8.452H4.286V7.418L3.066,6.308C2.787,6.054 2.787,5.642 3.066,5.388C3.345,5.134 3.798,5.134 4.077,5.388L4.286,5.579V3.898C4.286,3.538 4.606,3.247 5,3.247C5.395,3.247 5.715,3.538 5.715,3.898V4.929L5.924,4.738C6.203,4.484 6.655,4.484 6.934,4.738C7.213,4.992 7.213,5.404 6.934,5.658L5.715,6.768V8.452H6.429C6.645,8.452 6.858,8.408 7.052,8.322C7.246,8.236 7.417,8.112 7.551,7.958C7.684,7.804 7.778,7.624 7.825,7.432C7.871,7.24 7.869,7.041 7.819,6.85C7.756,6.61 7.849,6.358 8.057,6.2C8.23,6.069 8.366,5.903 8.455,5.715C8.544,5.528 8.583,5.323 8.568,5.119C8.554,4.915 8.487,4.717 8.373,4.541C8.259,4.365 8.101,4.215 7.912,4.105C7.592,3.92 7.488,3.54 7.674,3.239C7.839,2.971 7.895,2.657 7.831,2.355C7.767,2.053 7.587,1.781 7.323,1.588C7.059,1.395 6.729,1.294 6.391,1.302C6.052,1.31 5.728,1.427 5.476,1.632C5.205,1.853 4.795,1.853 4.524,1.632C4.272,1.426 3.947,1.309 3.609,1.301ZM4.286,9.752V12.35C4.286,12.709 4.606,13 5,13C5.395,13 5.715,12.709 5.715,12.35V9.752H6.429C6.429,9.752 6.429,9.752 6.429,9.752C6.86,9.752 7.286,9.664 7.675,9.492C8.063,9.321 8.404,9.072 8.672,8.764C8.939,8.456 9.127,8.096 9.22,7.713C9.282,7.455 9.301,7.192 9.277,6.931C9.48,6.723 9.646,6.487 9.767,6.23C9.945,5.854 10.023,5.446 9.994,5.037C9.966,4.629 9.832,4.233 9.604,3.881C9.481,3.69 9.332,3.516 9.161,3.361C9.296,2.957 9.323,2.528 9.234,2.108C9.105,1.504 8.745,0.96 8.218,0.574C7.69,0.189 7.03,-0.014 6.353,0.002C5.875,0.013 5.41,0.134 5.001,0.349C4.591,0.133 4.126,0.013 3.647,0.001C2.97,-0.016 2.309,0.187 1.781,0.573C1.254,0.959 0.893,1.503 0.765,2.108C0.676,2.527 0.703,2.958 0.838,3.361C0.668,3.516 0.519,3.69 0.396,3.881C0.167,4.233 0.034,4.629 0.006,5.038C-0.023,5.446 0.055,5.854 0.233,6.23C0.355,6.487 0.521,6.723 0.724,6.931C0.7,7.179 0.716,7.43 0.772,7.675C0.856,8.047 1.029,8.398 1.278,8.703C1.527,9.008 1.846,9.26 2.213,9.44C2.581,9.621 2.987,9.726 3.404,9.748C3.411,9.748 3.418,9.749 3.425,9.749L3.551,9.752C3.558,9.752 3.565,9.752 3.571,9.752H4.286Z"/>
    
</vector>


================================================================================

FILE 150: app\src\main\res\drawable\ic_tachometer_average.xml
Lines: 5 | Size: 599 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="512dp" android:viewportHeight="24" android:viewportWidth="24" android:width="512dp">
      
    <path android:fillColor="#FF000000" android:pathData="M20,4.052C8.353,-5.659 -6.712,9.5 3.138,21.081A2.318,2.318 0,0 0,7.1 20.616c0.347,-0.519 0.682,-1.687 1.486,-1.616h6.824c0.8,-0.074 1.161,1.129 1.5,1.646A2.367,2.367 0,0 0,19 22a2.734,2.734 0,0 0,1.814 -0.867A12.058,12.058 0,0 0,20 4.052ZM12,15a2.008,2.008 0,0 1,-1 -3.732V6a1,1 0,0 1,2 0v5.268A2.008,2.008 0,0 1,12 15Z"/>
    
</vector>


================================================================================

FILE 151: app\src\main\res\drawable\ic_tambahdata.xml
Lines: 7 | Size: 994 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="24dp" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="#27361F" android:pathData="M4,0L20,0A4,4 0,0 1,24 4L24,20A4,4 0,0 1,20 24L4,24A4,4 0,0 1,0 20L0,4A4,4 0,0 1,4 0z"/>
      
    <path android:fillColor="#F8F8F8" android:pathData="M12,4C12.761,4 13.379,4.618 13.379,5.379V10.621H18.621C18.986,10.621 19.337,10.766 19.596,11.025C19.855,11.283 20,11.634 20,12C20,12.366 19.855,12.717 19.596,12.975C19.337,13.234 18.986,13.379 18.621,13.379H13.379V18.621C13.379,18.986 13.234,19.337 12.975,19.596C12.717,19.855 12.366,20 12,20C11.634,20 11.283,19.855 11.025,19.596C10.766,19.337 10.621,18.986 10.621,18.621V13.379H5.379C5.013,13.379 4.663,13.234 4.404,12.975C4.145,12.717 4,12.366 4,12C4,11.634 4.145,11.283 4.404,11.025C4.663,10.766 5.013,10.621 5.379,10.621H10.621V5.379C10.621,4.618 11.239,4 12,4Z"/>
    
</vector>


================================================================================

FILE 152: app\src\main\res\layout\activity_main.xml
Lines: 19 | Size: 805 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Hello World!"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>

================================================================================

FILE 153: app\src\main\res\mipmap-anydpi-v26\ic_launcher.xml
Lines: 6 | Size: 343 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================================================================================

FILE 154: app\src\main\res\mipmap-anydpi-v26\ic_launcher_round.xml
Lines: 6 | Size: 343 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================================================================================

FILE 155: app\src\main\res\values-night\themes.xml
Lines: 7 | Size: 331 chars
--------------------------------------------------------------------------------
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.TumbuhNyata" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your dark theme here. -->
        <!-- <item name="colorPrimary">@color/my_dark_primary</item> -->
    </style>
</resources>

================================================================================

FILE 156: app\src\main\res\values\colors.xml
Lines: 5 | Size: 147 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>

================================================================================

FILE 157: app\src\main\res\values\strings.xml
Lines: 3 | Size: 73 chars
--------------------------------------------------------------------------------
<resources>
    <string name="app_name">TumbuhNyata</string>
</resources>

================================================================================

FILE 158: app\src\main\res\values\themes.xml
Lines: 9 | Size: 405 chars
--------------------------------------------------------------------------------
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.TumbuhNyata" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your light theme here. -->
        <!-- <item name="colorPrimary">@color/my_light_primary</item> -->
    </style>

    <style name="Theme.TumbuhNyata" parent="Base.Theme.TumbuhNyata" />
</resources>

================================================================================

FILE 159: app\src\main\res\xml\backup_rules.xml
Lines: 13 | Size: 478 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older that API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

================================================================================

FILE 160: app\src\main\res\xml\data_extraction_rules.xml
Lines: 19 | Size: 551 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

================================================================================

FILE 161: app\src\main\res\xml\network_security_config.xml
Lines: 6 | Size: 224 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<network-security-config>
    <domain-config cleartextTrafficPermitted="true">
        <domain includeSubdomains="true">10.0.2.2</domain>
    </domain-config>
</network-security-config>

================================================================================

FILE 162: gradle.properties
Lines: 23 | Size: 1346 chars
--------------------------------------------------------------------------------
# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

================================================================================

FILE 163: gradle\wrapper\gradle-wrapper.properties
Lines: 6 | Size: 233 chars
--------------------------------------------------------------------------------
#Tue Mar 18 13:40:51 WIB 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.10.2-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists


================================================================================

