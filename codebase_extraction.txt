================================================================================
ANDROID PROJECT CODEBASE EXTRACTION
================================================================================
Project: 
Extraction Date: 2025-06-18 00:33:28
Total Files: 204
Total Lines: 26,271
Project Root: .
================================================================================

TABLE OF CONTENTS
----------------------------------------
  1. app\src\androidTest\java\com\example\tumbuhnyata\ExampleInstrumentedTest.kt (24 lines)
  2. app\src\main\AndroidManifest.xml (33 lines)
  3. app\src\main\java\com\example\tumbuhnyata\MainActivity.kt (18 lines)
  4. app\src\main\java\com\example\tumbuhnyata\TumbuhNyataApp.kt (16 lines)
  5. app\src\main\java\com\example\tumbuhnyata\data\api\AuthAPI.kt (17 lines)
  6. app\src\main\java\com\example\tumbuhnyata\data\api\CertificationApiService.kt (54 lines)
  7. app\src\main\java\com\example\tumbuhnyata\data\api\CsrApiService.kt (46 lines)
  8. app\src\main\java\com\example\tumbuhnyata\data\api\CsrHistoryApi.kt (49 lines)
  9. app\src\main\java\com\example\tumbuhnyata\data\api\DashboardApiService.kt (78 lines)
 10. app\src\main\java\com\example\tumbuhnyata\data\api\NotificationApi.kt (21 lines)
 11. app\src\main\java\com\example\tumbuhnyata\data\api\ProfileApi.kt (22 lines)
 12. app\src\main\java\com\example\tumbuhnyata\data\api\WorkshopApiService.kt (22 lines)
 13. app\src\main\java\com\example\tumbuhnyata\data\factory\CertificationFactory.kt (52 lines)
 14. app\src\main\java\com\example\tumbuhnyata\data\local\AppDatabase.kt (59 lines)
 15. app\src\main\java\com\example\tumbuhnyata\data\local\TokenManager.kt (33 lines)
 16. app\src\main\java\com\example\tumbuhnyata\data\local\dao\CertificationDao.kt (159 lines)
 17. app\src\main\java\com\example\tumbuhnyata\data\local\dao\CsrDraftDao.kt (28 lines)
 18. app\src\main\java\com\example\tumbuhnyata\data\local\dao\CsrHistoryDao.kt (70 lines)
 19. app\src\main\java\com\example\tumbuhnyata\data\local\dao\DashboardDao.kt (152 lines)
 20. app\src\main\java\com\example\tumbuhnyata\data\local\dao\OfflineProfileDao.kt (31 lines)
 21. app\src\main\java\com\example\tumbuhnyata\data\local\dao\OfflineWorkshopRegistrationDao.kt (28 lines)
 22. app\src\main\java\com\example\tumbuhnyata\data\local\entity\CertificationEntity.kt (31 lines)
 23. app\src\main\java\com\example\tumbuhnyata\data\local\entity\CsrDraftEntity.kt (21 lines)
 24. app\src\main\java\com\example\tumbuhnyata\data\local\entity\CsrHistoryEntity.kt (28 lines)
 25. app\src\main\java\com\example\tumbuhnyata\data\local\entity\CsrReportEntity.kt (32 lines)
 26. app\src\main\java\com\example\tumbuhnyata\data\local\entity\OfflineProfile.kt (17 lines)
 27. app\src\main\java\com\example\tumbuhnyata\data\local\entity\OfflineWorkshopRegistration.kt (16 lines)
 28. app\src\main\java\com\example\tumbuhnyata\data\mapper\CertificationMappers.kt (108 lines)
 29. app\src\main\java\com\example\tumbuhnyata\data\mapper\CsrHistoryMapper.kt (58 lines)
 30. app\src\main\java\com\example\tumbuhnyata\data\mapper\DataMappers.kt (513 lines)
 31. app\src\main\java\com\example\tumbuhnyata\data\mapper\SyncMappers.kt (82 lines)
 32. app\src\main\java\com\example\tumbuhnyata\data\model\BottomNavItem.kt (8 lines)
 33. app\src\main\java\com\example\tumbuhnyata\data\model\CertificationModels.kt (82 lines)
 34. app\src\main\java\com\example\tumbuhnyata\data\model\CsrCategory.kt (9 lines)
 35. app\src\main\java\com\example\tumbuhnyata\data\model\CsrData.kt (12 lines)
 36. app\src\main\java\com\example\tumbuhnyata\data\model\CsrHistoryItem.kt (29 lines)
 37. app\src\main\java\com\example\tumbuhnyata\data\model\CsrReportModel.kt (75 lines)
 38. app\src\main\java\com\example\tumbuhnyata\data\model\CsrStatus.kt (200 lines)
 39. app\src\main\java\com\example\tumbuhnyata\data\model\DashboardDataResponse.kt (187 lines)
 40. app\src\main\java\com\example\tumbuhnyata\data\model\LoginRequest.kt (6 lines)
 41. app\src\main\java\com\example\tumbuhnyata\data\model\LoginResponse.kt (5 lines)
 42. app\src\main\java\com\example\tumbuhnyata\data\model\Notification.kt (25 lines)
 43. app\src\main\java\com\example\tumbuhnyata\data\model\Profile.kt (28 lines)
 44. app\src\main\java\com\example\tumbuhnyata\data\model\RegisterRequest.kt (10 lines)
 45. app\src\main\java\com\example\tumbuhnyata\data\model\RegisterResponse.kt (5 lines)
 46. app\src\main\java\com\example\tumbuhnyata\data\model\RegisterWorkshop.kt (7 lines)
 47. app\src\main\java\com\example\tumbuhnyata\data\model\SyncModels.kt (76 lines)
 48. app\src\main\java\com\example\tumbuhnyata\data\model\TimelineItem.kt (8 lines)
 49. app\src\main\java\com\example\tumbuhnyata\data\model\UploadResponse.kt (13 lines)
 50. app\src\main\java\com\example\tumbuhnyata\data\model\Workshop.kt (162 lines)
 51. app\src\main\java\com\example\tumbuhnyata\data\model\WorkshopHistoryResponse.kt (9 lines)
 52. app\src\main\java\com\example\tumbuhnyata\data\network\AuthInterceptor.kt (35 lines)
 53. app\src\main\java\com\example\tumbuhnyata\data\network\RetrofitInstance.kt (80 lines)
 54. app\src\main\java\com\example\tumbuhnyata\data\repository\CertificationRepository.kt (407 lines)
 55. app\src\main\java\com\example\tumbuhnyata\data\repository\CsrDraftRepository.kt (39 lines)
 56. app\src\main\java\com\example\tumbuhnyata\data\repository\CsrHistoryRepository.kt (33 lines)
 57. app\src\main\java\com\example\tumbuhnyata\data\repository\CsrHistoryRepositoryOffline.kt (318 lines)
 58. app\src\main\java\com\example\tumbuhnyata\data\repository\DashboardRepository.kt (646 lines)
 59. app\src\main\java\com\example\tumbuhnyata\data\repository\NotificationRepository.kt (24 lines)
 60. app\src\main\java\com\example\tumbuhnyata\data\repository\OfflineProfileRepository.kt (115 lines)
 61. app\src\main\java\com\example\tumbuhnyata\data\repository\OfflineWorkshopRepository.kt (114 lines)
 62. app\src\main\java\com\example\tumbuhnyata\data\repository\ProfileRepository.kt (124 lines)
 63. app\src\main\java\com\example\tumbuhnyata\data\repository\UploadRepository.kt (551 lines)
 64. app\src\main\java\com\example\tumbuhnyata\data\repository\WorkshopRepository.kt (95 lines)
 65. app\src\main\java\com\example\tumbuhnyata\data\util\Resource.kt (14 lines)
 66. app\src\main\java\com\example\tumbuhnyata\di\NetworkModule.kt (113 lines)
 67. app\src\main\java\com\example\tumbuhnyata\navigation\NavGraph.kt (445 lines)
 68. app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\AjukanSertifikasi.kt (249 lines)
 69. app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\Berhasil.kt (137 lines)
 70. app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\CertificationComponents.kt (112 lines)
 71. app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\DetailSertifikasi.kt (160 lines)
 72. app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\DokumenOne.kt (344 lines)
 73. app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\RiwayatPengajuan.kt (237 lines)
 74. app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\Sertifikasi.kt (391 lines)
 75. app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\SertifikasiAnda.kt (153 lines)
 76. app\src\main\java\com\example\tumbuhnyata\ui\component\ErrorSnackbar.kt (54 lines)
 77. app\src\main\java\com\example\tumbuhnyata\ui\component\SuccessDialog.kt (74 lines)
 78. app\src\main\java\com\example\tumbuhnyata\ui\components\BottomNavBarProfile.kt (75 lines)
 79. app\src\main\java\com\example\tumbuhnyata\ui\components\BottomNavigationBar.kt (58 lines)
 80. app\src\main\java\com\example\tumbuhnyata\ui\components\CsrCard.kt (271 lines)
 81. app\src\main\java\com\example\tumbuhnyata\ui\components\DeskripsiWorkshop.kt (195 lines)
 82. app\src\main\java\com\example\tumbuhnyata\ui\components\EmptyStateCard.kt (130 lines)
 83. app\src\main\java\com\example\tumbuhnyata\ui\components\InputField.kt (40 lines)
 84. app\src\main\java\com\example\tumbuhnyata\ui\components\SectionHeader.kt (58 lines)
 85. app\src\main\java\com\example\tumbuhnyata\ui\components\SectionWithTittle.kt (41 lines)
 86. app\src\main\java\com\example\tumbuhnyata\ui\components\SeeAllButton.kt (32 lines)
 87. app\src\main\java\com\example\tumbuhnyata\ui\components\SyncStatusIndicator.kt (135 lines)
 88. app\src\main\java\com\example\tumbuhnyata\ui\components\TopBarProfile.kt (53 lines)
 89. app\src\main\java\com\example\tumbuhnyata\ui\components\WorkshopCard.kt (99 lines)
 90. app\src\main\java\com\example\tumbuhnyata\ui\components\WorkshopListItem.kt (113 lines)
 91. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\DashboardScreen.kt (229 lines)
 92. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\components\KPIItem.kt (227 lines)
 93. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\KPIDetailScreen.kt (535 lines)
 94. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\KPIDetailViewModel.kt (111 lines)
 95. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\components\KPIBarChart.kt (141 lines)
 96. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\components\KPILineChart.kt (133 lines)
 97. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\components\KpiFilterSwitch.kt (75 lines)
 98. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\components\KpiStatCapsule.kt (126 lines)
 99. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\upload\UploadDataScreen.kt (317 lines)
100. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\upload\UploadSuccessScreen.kt (164 lines)
101. app\src\main\java\com\example\tumbuhnyata\ui\dashboard\upload\components\DocumentUploadItem.kt (153 lines)
102. app\src\main\java\com\example\tumbuhnyata\ui\dashboardkeuangan\DashboardComponents.kt (93 lines)
103. app\src\main\java\com\example\tumbuhnyata\ui\dashboardkeuangan\DashboardKeuanganScreen.kt (483 lines)
104. app\src\main\java\com\example\tumbuhnyata\ui\dashboardkeuangan\PieChart.kt (129 lines)
105. app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\CsrSubmissionScreen.kt (828 lines)
106. app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\CsrSuccessScreen.kt (136 lines)
107. app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\CsrVerificationScreen.kt (369 lines)
108. app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\DraftListScreen.kt (219 lines)
109. app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\DraftSuccessScreen.kt (92 lines)
110. app\src\main\java\com\example\tumbuhnyata\ui\home\HomeScreen.kt (637 lines)
111. app\src\main\java\com\example\tumbuhnyata\ui\login\LoginScreen.kt (328 lines)
112. app\src\main\java\com\example\tumbuhnyata\ui\notification\NotificationScreen.kt (236 lines)
113. app\src\main\java\com\example\tumbuhnyata\ui\notification\NotifikasiDetailScreen.kt (257 lines)
114. app\src\main\java\com\example\tumbuhnyata\ui\profile\AboutScreen.kt (119 lines)
115. app\src\main\java\com\example\tumbuhnyata\ui\profile\ChangePassword.kt (251 lines)
116. app\src\main\java\com\example\tumbuhnyata\ui\profile\ChangePasswordSuccess.kt (104 lines)
117. app\src\main\java\com\example\tumbuhnyata\ui\profile\LanguagePreference.kt (161 lines)
118. app\src\main\java\com\example\tumbuhnyata\ui\profile\ProfileScreen.kt (376 lines)
119. app\src\main\java\com\example\tumbuhnyata\ui\profile\UpdateProfile.kt (396 lines)
120. app\src\main\java\com\example\tumbuhnyata\ui\profile\VerificationOne.kt (224 lines)
121. app\src\main\java\com\example\tumbuhnyata\ui\profile\VerificationSuccess.kt (116 lines)
122. app\src\main\java\com\example\tumbuhnyata\ui\profile\VerificationTwo.kt (221 lines)
123. app\src\main\java\com\example\tumbuhnyata\ui\register\AkunBerhasil.kt (106 lines)
124. app\src\main\java\com\example\tumbuhnyata\ui\register\OtpScreen.kt (208 lines)
125. app\src\main\java\com\example\tumbuhnyata\ui\register\RegisterScreen.kt (766 lines)
126. app\src\main\java\com\example\tumbuhnyata\ui\register\VerifikasiScreen.kt (131 lines)
127. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\DetailRiwayatScreen.kt (282 lines)
128. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\DiterimaScreen.kt (126 lines)
129. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\InvoiceScreen.kt (151 lines)
130. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\MendatangDetailScreen.kt (214 lines)
131. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\PerluTindakanScreen.kt (125 lines)
132. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\ProgressDetailScreen.kt (257 lines)
133. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\RiwayatScreen.kt (366 lines)
134. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\SelesaiDetailScreen.kt (359 lines)
135. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\TambahRiwayatScreen.kt (499 lines)
136. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\UploadRevisiScreen.kt (223 lines)
137. app\src\main\java\com\example\tumbuhnyata\ui\riwayat\verticalTimeline.kt (107 lines)
138. app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\OnboardingScreen.kt (127 lines)
139. app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\OnboardingScreen2.kt (127 lines)
140. app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\OnboardingScreen3.kt (132 lines)
141. app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\OptionScreen.kt (136 lines)
142. app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\SplashScreen.kt (75 lines)
143. app\src\main\java\com\example\tumbuhnyata\ui\theme\Color.kt (15 lines)
144. app\src\main\java\com\example\tumbuhnyata\ui\theme\Theme.kt (29 lines)
145. app\src\main\java\com\example\tumbuhnyata\ui\theme\Typography.kt (59 lines)
146. app\src\main\java\com\example\tumbuhnyata\ui\workshop\DaftarWorkshop.kt (297 lines)
147. app\src\main\java\com\example\tumbuhnyata\ui\workshop\DeskripsiWorkshopScreen.kt (79 lines)
148. app\src\main\java\com\example\tumbuhnyata\ui\workshop\NewWorkshop.kt (83 lines)
149. app\src\main\java\com\example\tumbuhnyata\ui\workshop\RekomWorkshop.kt (82 lines)
150. app\src\main\java\com\example\tumbuhnyata\ui\workshop\RiwayatWorkshop.kt (319 lines)
151. app\src\main\java\com\example\tumbuhnyata\ui\workshop\WorkshopBerhasil.kt (109 lines)
152. app\src\main\java\com\example\tumbuhnyata\ui\workshop\WorkshopScreen.kt (251 lines)
153. app\src\main\java\com\example\tumbuhnyata\util\NetworkConnectivityUtil.kt (55 lines)
154. app\src\main\java\com\example\tumbuhnyata\util\NetworkUtils.kt (26 lines)
155. app\src\main\java\com\example\tumbuhnyata\util\TokenManager.kt (29 lines)
156. app\src\main\java\com\example\tumbuhnyata\util\UserSessionManager.kt (33 lines)
157. app\src\main\java\com\example\tumbuhnyata\viewmodel\AjukanSertifikasiViewModel.kt (160 lines)
158. app\src\main\java\com\example\tumbuhnyata\viewmodel\CsrDraftViewModel.kt (59 lines)
159. app\src\main\java\com\example\tumbuhnyata\viewmodel\CsrSubmissionViewModel.kt (91 lines)
160. app\src\main\java\com\example\tumbuhnyata\viewmodel\CsrVerificationViewModel.kt (109 lines)
161. app\src\main\java\com\example\tumbuhnyata\viewmodel\DashboardKeuanganViewModel.kt (14 lines)
162. app\src\main\java\com\example\tumbuhnyata\viewmodel\DashboardViewModel.kt (221 lines)
163. app\src\main\java\com\example\tumbuhnyata\viewmodel\DetailRiwayatViewModel.kt (116 lines)
164. app\src\main\java\com\example\tumbuhnyata\viewmodel\HomeViewModel.kt (140 lines)
165. app\src\main\java\com\example\tumbuhnyata\viewmodel\NotificationViewModel.kt (86 lines)
166. app\src\main\java\com\example\tumbuhnyata\viewmodel\ProfileViewModel.kt (206 lines)
167. app\src\main\java\com\example\tumbuhnyata\viewmodel\RegisterViewModel.kt (138 lines)
168. app\src\main\java\com\example\tumbuhnyata\viewmodel\RiwayatPengajuanViewModel.kt (71 lines)
169. app\src\main\java\com\example\tumbuhnyata\viewmodel\RiwayatViewModel.kt (271 lines)
170. app\src\main\java\com\example\tumbuhnyata\viewmodel\SertifikasiViewModel.kt (128 lines)
171. app\src\main\java\com\example\tumbuhnyata\viewmodel\SplashViewModel.kt (24 lines)
172. app\src\main\java\com\example\tumbuhnyata\viewmodel\TambahRiwayatViewModel.kt (202 lines)
173. app\src\main\java\com\example\tumbuhnyata\viewmodel\UploadViewModel.kt (105 lines)
174. app\src\main\java\com\example\tumbuhnyata\viewmodel\VerificationOneViewModel.kt (45 lines)
175. app\src\main\java\com\example\tumbuhnyata\viewmodel\VerificationTwoViewModel.kt (30 lines)
176. app\src\main\java\com\example\tumbuhnyata\viewmodel\WorkshopDetailViewModel.kt (24 lines)
177. app\src\main\java\com\example\tumbuhnyata\viewmodel\WorkshopViewModel.kt (358 lines)
178. app\src\main\java\com\example\tumbuhnyata\viewmodel\WorkshopViewModelFactory.kt (27 lines)
179. app\src\main\res\drawable\angle_double_small_down.xml (5 lines)
180. app\src\main\res\drawable\ic_carbonfootprint.xml (9 lines)
181. app\src\main\res\drawable\ic_filter.xml (11 lines)
182. app\src\main\res\drawable\ic_konsumsienergi.xml (5 lines)
183. app\src\main\res\drawable\ic_launcher_background.xml (170 lines)
184. app\src\main\res\drawable\ic_launcher_foreground.xml (30 lines)
185. app\src\main\res\drawable\ic_pembaruandatasplashlogo.xml (29 lines)
186. app\src\main\res\drawable\ic_penerimamanfaat.xml (9 lines)
187. app\src\main\res\drawable\ic_pengelolaansampah.xml (5 lines)
188. app\src\main\res\drawable\ic_penggunaanair.xml (7 lines)
189. app\src\main\res\drawable\ic_pohontertanam.xml (5 lines)
190. app\src\main\res\drawable\ic_tachometer_average.xml (5 lines)
191. app\src\main\res\drawable\ic_tambahdata.xml (7 lines)
192. app\src\main\res\layout\activity_main.xml (19 lines)
193. app\src\main\res\mipmap-anydpi-v26\ic_launcher.xml (6 lines)
194. app\src\main\res\mipmap-anydpi-v26\ic_launcher_round.xml (6 lines)
195. app\src\main\res\values-night\themes.xml (7 lines)
196. app\src\main\res\values\colors.xml (5 lines)
197. app\src\main\res\values\strings.xml (3 lines)
198. app\src\main\res\values\themes.xml (9 lines)
199. app\src\main\res\xml\backup_rules.xml (13 lines)
200. app\src\main\res\xml\data_extraction_rules.xml (19 lines)
201. app\src\main\res\xml\network_security_config.xml (9 lines)
202. app\src\test\java\com\example\tumbuhnyata\ExampleUnitTest.kt (17 lines)
203. gradle.properties (23 lines)
204. gradle\wrapper\gradle-wrapper.properties (6 lines)

================================================================================

FILE 1: app\src\androidTest\java\com\example\tumbuhnyata\ExampleInstrumentedTest.kt
Lines: 24 | Size: 673 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.example.tumbuhnyata", appContext.packageName)
    }
}

================================================================================

FILE 2: app\src\main\AndroidManifest.xml
Lines: 33 | Size: 1200 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

    <application
        android:name=".TumbuhNyataApp"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.TumbuhNyata"
        tools:targetApi="31"
        android:networkSecurityConfig="@xml/network_security_config"
        >
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

    </application>

</manifest>

================================================================================

FILE 3: app\src\main\java\com\example\tumbuhnyata\MainActivity.kt
Lines: 18 | Size: 518 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import com.example.tumbuhnyata.navigation.AppNavigation
import com.example.tumbuhnyata.ui.theme.TumbuhNyataTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            TumbuhNyataTheme {
                AppNavigation()
            }
        }
    }
}


================================================================================

FILE 4: app\src\main\java\com\example\tumbuhnyata\TumbuhNyataApp.kt
Lines: 16 | Size: 333 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata

import android.app.Application
import android.content.Context

class TumbuhNyataApp : Application() {
    companion object {
        lateinit var appContext: Context
            private set
    }

    override fun onCreate() {
        super.onCreate()
        appContext = applicationContext
    }
} 

================================================================================

FILE 5: app\src\main\java\com\example\tumbuhnyata\data\api\AuthAPI.kt
Lines: 17 | Size: 561 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.api

import retrofit2.http.Body
import retrofit2.http.POST
import retrofit2.Call
import com.example.tumbuhnyata.data.model.LoginRequest
import com.example.tumbuhnyata.data.model.LoginResponse
import com.example.tumbuhnyata.data.model.RegisterRequest
import com.example.tumbuhnyata.data.model.RegisterResponse

interface AuthApi {
    @POST("auth/login")
    fun login(@Body request: LoginRequest): Call<LoginResponse>
    
    @POST("auth/register")
    fun register(@Body request: RegisterRequest): Call<RegisterResponse>
}

================================================================================

FILE 6: app\src\main\java\com\example\tumbuhnyata\data\api\CertificationApiService.kt
Lines: 54 | Size: 1770 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.api

import com.example.tumbuhnyata.data.model.CreateCertificationRequest
import com.example.tumbuhnyata.data.model.CreateCertificationResponse
import com.example.tumbuhnyata.data.model.CertificationListResponse
import com.example.tumbuhnyata.data.model.CertificationDetailResponse
import com.example.tumbuhnyata.data.model.UpdateCertificationStatusRequest
import com.example.tumbuhnyata.data.model.UpdateStatusResponse
import retrofit2.Response
import retrofit2.http.*

/**
 * API Service for Certification endpoints
 * Based on backend controller: certificationsController
 */
interface CertificationApiService {

    /**
     * Get all certification applications for current user
     * GET /certifications
     */
    @GET("certifications")
    suspend fun getUserCertifications(
        @Query("user_id") userId: Int? = 1 // Hardcode user_id = 1 temporarily
    ): Response<CertificationListResponse>

    /**
     * Get certification detail by ID
     * GET /certifications/{id}
     */
    @GET("certifications/{id}")
    suspend fun getCertificationById(
        @Path("id") certificationId: Int
    ): Response<CertificationDetailResponse>

    /**
     * Submit new certification application
     * POST /certifications/apply
     */
    @POST("certifications/apply")
    suspend fun applyCertification(
        @Body request: CreateCertificationRequest
    ): Response<CreateCertificationResponse>

    /**
     * Update certification status (admin only)
     * PUT /certifications/{id}/status
     */
    @PUT("certifications/{id}/status")
    suspend fun updateCertificationStatus(
        @Path("id") certificationId: Int,
        @Body request: UpdateCertificationStatusRequest
    ): Response<UpdateStatusResponse>
} 

================================================================================

FILE 7: app\src\main\java\com\example\tumbuhnyata\data\api\CsrApiService.kt
Lines: 46 | Size: 1102 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.api

import retrofit2.Response
import retrofit2.http.Body
import retrofit2.http.POST

interface CsrApiService {
    @POST("csr/ajukan")
    suspend fun submitCSR(@Body request: CsrSubmissionRequest): Response<CsrSubmissionResponse>
}

data class CsrSubmissionResponse(
    val message: String,
    val data: CsrSubmissionData? = null
)

data class CsrSubmissionData(
    val id: Int,
    val user_id: Int,
    val program_name: String,
    val category: String,
    val description: String,
    val location: String,
    val partner_name: String,
    val start_date: String,
    val end_date: String,
    val budget: String,
    val proposal_url: String?,
    val legality_url: String?,
    val agreed: Boolean,
    val status: String,
    val created_at: String
)

data class CsrSubmissionRequest(
    val user_id: Int,
    val program_name: String,
    val category: String,
    val description: String,
    val location: String,
    val partner_name: String,
    val start_date: String,
    val end_date: String,
    val budget: String,
    val agreed: Boolean
)

================================================================================

FILE 8: app\src\main\java\com\example\tumbuhnyata\data\api\CsrHistoryApi.kt
Lines: 49 | Size: 1277 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.api

import com.example.tumbuhnyata.data.model.CsrHistoryItem
import retrofit2.Response
import retrofit2.http.Body
import retrofit2.http.DELETE
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.Path
import retrofit2.http.Query

interface CsrHistoryApi {
    @GET("csr/history/")
    suspend fun getCsrHistory(@Query("user_id") userId: Int): Response<List<CsrHistoryItem>>

    @GET("csr/history/{id}")
    suspend fun getCsrHistoryDetail(
        @Path("id") id: Int,
        @Query("user_id") userId: Int
    ): Response<CsrHistoryItem>

    @DELETE("csr/history/{id}")
    suspend fun deleteCsrHistory(
        @Path("id") id: Int,
        @Query("user_id") userId: Int
    ): Response<Unit>

    @POST("csr/ajukan")
    suspend fun addCsrHistory(@Body request: AddCsrRequest): Response<AddCsrResponse>
}

data class AddCsrRequest(
    val user_id: Int,
    val program_name: String,
    val category: String,
    val description: String,
    val location: String,
    val partner_name: String,
    val start_date: String,
    val end_date: String,
    val budget: Long,
    val status: String,
    val agreed: Boolean
)

data class AddCsrResponse(
    val message: String,
    val data: CsrHistoryItem? = null
) 

================================================================================

FILE 9: app\src\main\java\com\example\tumbuhnyata\data\api\DashboardApiService.kt
Lines: 78 | Size: 2920 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.api

import com.example.tumbuhnyata.data.model.DashboardDataResponse // Model baru untuk endpoint /dashboard
import com.example.tumbuhnyata.data.model.CsrReportModel // Jika ada endpoint lain yang mengembalikan list ini
import com.example.tumbuhnyata.data.model.KpiDetailResponse // Model untuk KPI detail
import com.example.tumbuhnyata.data.model.CsrSubmissionsResponse // Added for the new submissions response type
import com.example.tumbuhnyata.data.model.UploadResponse // Model for upload response
import com.example.tumbuhnyata.data.model.CreateSubmissionRequest
import com.example.tumbuhnyata.data.model.CreateSubmissionResponse
import com.example.tumbuhnyata.data.model.UpdateSubmissionRequest
import com.example.tumbuhnyata.data.model.UpdateSubmissionResponse
import com.example.tumbuhnyata.data.model.DeleteSubmissionResponse
import okhttp3.MultipartBody
import retrofit2.Response
import retrofit2.http.*


interface DashboardApiService {

    @GET("carbon-submissions/dashboard")
    suspend fun getDashboardData(
 
        @Query("company_id") companyId: Int? = null,
        @Query("year") year: Int? = null
    ): Response<DashboardDataResponse>

    @GET("dashboard")
    suspend fun getDashboardDataNoPrefIx(
        @Query("company_id") companyId: Int? = null,
        @Query("year") year: Int? = null
    ): Response<DashboardDataResponse>

    @GET("carbon-submissions/kpi/{kpiType}")
    suspend fun getKpiDetail(
        @Path("kpiType") kpiType: String,
        @Query("company_id") companyId: String? = null,
        @Query("year") year: Int
    ): Response<KpiDetailResponse>

    @GET("carbon-submissions/submissions")
    suspend fun getAllSubmissions(
        @Query("company_id") companyId: String? = null,
        @Query("year") year: Int? = null,
        @Query("month") month: Int? = null,
        @Query("page") page: Int? = null,
        @Query("limit") limit: Int? = null
    ): Response<CsrSubmissionsResponse>

    @GET("carbon-submissions/analytics")
    suspend fun getAnalytics(
        @Query("company_id") companyId: Int? = null,
        @Query("year") year: Int? = null
    ): Response<DashboardDataResponse>

    @Multipart
    @POST("carbon-submissions/upload-csv")
    suspend fun uploadCsvFile(
        @Part file: MultipartBody.Part
    ): Response<UploadResponse>
    
    // INDIVIDUAL SUBMISSION MANAGEMENT ENDPOINTS
    
    @POST("carbon-submissions/submissions")
    suspend fun createSubmission(
        @Body request: CreateSubmissionRequest
    ): Response<CreateSubmissionResponse>
    
    @PUT("carbon-submissions/{id}")
    suspend fun updateSubmission(
        @Path("id") id: Int,
        @Body request: UpdateSubmissionRequest
    ): Response<UpdateSubmissionResponse>
    
    @DELETE("carbon-submissions/{id}")
    suspend fun deleteSubmission(
        @Path("id") id: Int
    ): Response<DeleteSubmissionResponse>
} 

================================================================================

FILE 10: app\src\main\java\com\example\tumbuhnyata\data\api\NotificationApi.kt
Lines: 21 | Size: 653 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.api

import com.example.tumbuhnyata.data.model.Notification
import retrofit2.Response
import retrofit2.http.*

interface NotificationApi {
    @GET("notifications/{userId}")
    suspend fun getNotifications(@Path("userId") userId: String): Response<List<Notification>>

    @POST("notifications")
    suspend fun createNotification(
        @Body notification: Notification
    ): Response<Notification>

    @PATCH("notifications/{id}/read")
    suspend fun markAsRead(@Path("id") id: Int): Response<Unit>

    @DELETE("notifications/{id}")
    suspend fun deleteNotification(@Path("id") id: Int): Response<Unit>
} 

================================================================================

FILE 11: app\src\main\java\com\example\tumbuhnyata\data\api\ProfileApi.kt
Lines: 22 | Size: 609 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.api

import com.example.tumbuhnyata.data.model.ProfileResponse
import retrofit2.Response
import retrofit2.http.GET
import retrofit2.http.Body
import retrofit2.http.PUT

interface ProfileApi {
    @GET("profile/me")
    suspend fun getUserProfile(): Response<ProfileResponse>

    @PUT("profile/update")
    suspend fun updateProfile(
        @Body updateData: Map<String, String>
    ): Response<Map<String, String>>

    @PUT("profile/change-password")
    suspend fun changePassword(
        @Body passwordData: Map<String, String>
    ): Response<Map<String, String>>
}

================================================================================

FILE 12: app\src\main\java\com\example\tumbuhnyata\data\api\WorkshopApiService.kt
Lines: 22 | Size: 778 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.api

import com.example.tumbuhnyata.data.model.RegisterWorkshop
import com.example.tumbuhnyata.data.model.WorkshopHistoryResponse
import retrofit2.Response
import retrofit2.http.Body
import retrofit2.http.DELETE
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.Path
import retrofit2.http.Query

interface WorkshopApiService {
    @POST("workshops/register")
    suspend fun registerWorkshop(@Body request: RegisterWorkshop): Response<Any>

    @GET("workshops/history")
    suspend fun getWorkshopHistory(@Query("email") email: String): Response<List<WorkshopHistoryResponse>>

    @DELETE("workshops/{workshopId}")
    suspend fun deleteWorkshopRegistration(@Path("workshopId") workshopId: String): Response<Any>
}

================================================================================

FILE 13: app\src\main\java\com\example\tumbuhnyata\data\factory\CertificationFactory.kt
Lines: 52 | Size: 2049 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.factory

import android.content.Context
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import com.example.tumbuhnyata.data.api.CertificationApiService
import com.example.tumbuhnyata.data.local.AppDatabase
import com.example.tumbuhnyata.data.local.dao.CertificationDao
import com.example.tumbuhnyata.data.network.RetrofitInstance
import com.example.tumbuhnyata.data.repository.CertificationRepository
import com.example.tumbuhnyata.viewmodel.AjukanSertifikasiViewModel
import com.example.tumbuhnyata.viewmodel.SertifikasiViewModel

/**
 * Factory for creating CertificationRepository with proper dependencies
 */
object CertificationFactory {
    
    fun createCertificationRepository(context: Context): CertificationRepository {
        val database = AppDatabase.getInstance(context)
        val certificationDao = database.certificationDao()
        // TEMPORARY: Use no-auth API like dashboard to bypass token requirement
        val certificationApiService = RetrofitInstance.certificationApiNoAuth
        
        return CertificationRepository(
            certificationApiService = certificationApiService,
            certificationDao = certificationDao,
            context = context
        )
    }
}

/**
 * ViewModelFactory for Certification ViewModels
 */
class CertificationViewModelFactory(
    private val certificationRepository: CertificationRepository
) : ViewModelProvider.Factory {
    
    @Suppress("UNCHECKED_CAST")
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        return when {
            modelClass.isAssignableFrom(SertifikasiViewModel::class.java) -> {
                SertifikasiViewModel(certificationRepository) as T
            }
            modelClass.isAssignableFrom(AjukanSertifikasiViewModel::class.java) -> {
                AjukanSertifikasiViewModel(certificationRepository) as T
            }
            else -> throw IllegalArgumentException("Unknown ViewModel class: ${modelClass.name}")
        }
    }
} 

================================================================================

FILE 14: app\src\main\java\com\example\tumbuhnyata\data\local\AppDatabase.kt
Lines: 59 | Size: 2324 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import com.example.tumbuhnyata.data.local.dao.CsrDraftDao
import com.example.tumbuhnyata.data.local.dao.CsrHistoryDao
import com.example.tumbuhnyata.data.local.dao.OfflineProfileDao
import com.example.tumbuhnyata.data.local.dao.OfflineWorkshopRegistrationDao
import com.example.tumbuhnyata.data.local.entity.CsrDraftEntity
import com.example.tumbuhnyata.data.local.entity.CsrHistoryEntity
import com.example.tumbuhnyata.data.local.entity.OfflineProfile
import com.example.tumbuhnyata.data.local.entity.OfflineWorkshopRegistration
import com.example.tumbuhnyata.data.local.dao.DashboardDao // DAO yang sudah kita buat
import com.example.tumbuhnyata.data.local.dao.CertificationDao // DAO untuk certification
import com.example.tumbuhnyata.data.local.entity.CsrReportEntity // Entity yang sudah kita buat
import com.example.tumbuhnyata.data.local.entity.CertificationEntity // Entity untuk certification

@Database(
    entities = [
        OfflineWorkshopRegistration::class,
        OfflineProfile::class,
        CsrDraftEntity::class,
        CsrHistoryEntity::class,
        CsrReportEntity::class,
        CertificationEntity::class
    ],
    version = 6,
    exportSchema = false
)
abstract class AppDatabase : RoomDatabase() {
    abstract fun offlineWorkshopRegistrationDao(): OfflineWorkshopRegistrationDao
    abstract fun offlineProfileDao(): OfflineProfileDao
    abstract fun csrDraftDao(): CsrDraftDao
    abstract fun csrHistoryDao(): CsrHistoryDao
    abstract fun dashboardDao(): DashboardDao // Expose DashboardDao
    abstract fun certificationDao(): CertificationDao


    companion object {
        @Volatile
        private var INSTANCE: AppDatabase? = null

        fun getInstance(context: Context): AppDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "tumbuh_nyata_db"
                )
                .fallbackToDestructiveMigration()
                .build()
                INSTANCE = instance
                instance
            }
        }
    }
}

================================================================================

FILE 15: app\src\main\java\com\example\tumbuhnyata\data\local\TokenManager.kt
Lines: 33 | Size: 1040 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local

import android.content.Context
import androidx.security.crypto.EncryptedSharedPreferences
import androidx.security.crypto.MasterKeys

object TokenManager {
    private const val PREFS_NAME = "auth_prefs"
    private const val KEY_ACCESS_TOKEN = "ACCESS_TOKEN"

    private fun getPrefs(context: Context) = EncryptedSharedPreferences.create(
        PREFS_NAME,
        MasterKeys.getOrCreate(MasterKeys.AES256_GCM_SPEC),
        context,
        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
    )

    fun saveToken(context: Context, token: String) {
        getPrefs(context).edit()
            .putString(KEY_ACCESS_TOKEN, token)
            .apply()
    }

    fun getToken(context: Context): String? =
        getPrefs(context).getString(KEY_ACCESS_TOKEN, null)

    fun clearToken(context: Context) {
        getPrefs(context).edit()
            .remove(KEY_ACCESS_TOKEN)
            .apply()
    }
}


================================================================================

FILE 16: app\src\main\java\com\example\tumbuhnyata\data\local\dao\CertificationDao.kt
Lines: 159 | Size: 5969 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local.dao

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import com.example.tumbuhnyata.data.local.entity.CertificationEntity
import kotlinx.coroutines.flow.Flow

/**
 * Data class for certification sync status debugging
 */
data class CertificationSyncStatus(
    val isSynced: Boolean,
    val isLocalOnly: Boolean,
    val count: Int
)

/**
 * Data class for debugging individual certification record sync status
 */
data class CertificationDebugInfo(
    val id: Int,
    val localId: String?,
    val serverId: Int?,
    val isSynced: Boolean,
    val isLocalOnly: Boolean,
    val name: String,
    val status: String,
    val syncRetryCount: Int
)

/**
 * Data Access Object (DAO) for Certifications.
 * Defines methods for interacting with the 'certifications' table in the Room database.
 */
@Dao
interface CertificationDao {

    /**
     * Inserts a list of CertificationEntity into the database.
     * If a certification with the same ID already exists, it will be replaced.
     * @param certifications The list of CertificationEntity to insert.
     */
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertOrUpdateCertifications(certifications: List<CertificationEntity>)

    /**
     * Fetches all CertificationEntity from the 'certifications' table.
     * Returns a Flow, so an observer will be notified of any data changes.
     * @return A Flow emitting a list of all CertificationEntity.
     */
    @Query("SELECT * FROM certifications ORDER BY submissionDate DESC") // Order by latest submission
    fun getAllCertifications(): Flow<List<CertificationEntity>>

    /**
     * Deletes all certifications from the 'certifications' table.
     */
    @Query("DELETE FROM certifications")
    suspend fun clearAllCertifications()
    
    /**
     * Deletes only synced certifications (isSynced = true), preserves unsynced offline data
     */
    @Query("DELETE FROM certifications WHERE isSynced = 1")
    suspend fun clearSyncedCertifications()
    
    /**
     * Gets all certifications that need to be synced to server (isSynced = false)
     */
    @Query("SELECT * FROM certifications WHERE isSynced = 0 ORDER BY submissionDate ASC")
    suspend fun getUnsyncedCertifications(): List<CertificationEntity>
    
    /**
     * Updates sync status of a certification
     */
    @Query("UPDATE certifications SET isSynced = :isSynced, syncRetryCount = :retryCount WHERE id = :certificationId")
    suspend fun updateSyncStatus(certificationId: Int, isSynced: Boolean, retryCount: Int = 0)
    
    /**
     * Updates sync status by localId (for offline-created data)
     * Stores server ID in separate field without changing primary key
     */
    @Query("UPDATE certifications SET isSynced = :isSynced, serverId = :serverId, syncRetryCount = 0 WHERE localId = :localId")
    suspend fun updateSyncStatusByLocalId(localId: String, isSynced: Boolean, serverId: Int)
    
    /**
     * Updates sync status by localId without changing primary key (safer approach)
     * Marks the record as synced and stores the server ID reference
     */
    @Query("UPDATE certifications SET isSynced = :isSynced, syncRetryCount = 0 WHERE localId = :localId")
    suspend fun markSyncedByLocalId(localId: String, isSynced: Boolean)
    
    /**
     * Gets certifications by status
     */
    @Query("SELECT * FROM certifications WHERE status = :status ORDER BY submissionDate DESC")
    fun getCertificationsByStatus(status: String): Flow<List<CertificationEntity>>

    /**
     * Gets a single certification by ID
     */
    @Query("SELECT * FROM certifications WHERE id = :certificationId")
    fun getCertificationById(certificationId: Int): Flow<CertificationEntity?>
    
    /**
     * Gets a single certification by serverId (useful when navigating from server response)
     */
    @Query("SELECT * FROM certifications WHERE serverId = :serverId")
    fun getCertificationByServerId(serverId: Int): Flow<CertificationEntity?>
    
    /**
     * Inserts a single certification (for offline-created data)
     * Using ABORT strategy to ensure each submission creates a new record
     * Will throw exception if there's a primary key conflict (which should not happen with auto-increment)
     */
    @Insert(onConflict = OnConflictStrategy.ABORT)
    suspend fun insertCertification(certification: CertificationEntity): Long
    
    // ===== DEBUG QUERIES FOR SYNC STATUS =====
    
    /**
     * Debug: Count total certifications in database
     */
    @Query("SELECT COUNT(*) FROM certifications")
    suspend fun getTotalCertificationCount(): Int
    
    /**
     * Debug: Count synced certifications (isSynced = true)
     */
    @Query("SELECT COUNT(*) FROM certifications WHERE isSynced = 1")
    suspend fun getSyncedCertificationCount(): Int
    
    /**
     * Debug: Count unsynced certifications (isSynced = false)
     */
    @Query("SELECT COUNT(*) FROM certifications WHERE isSynced = 0")
    suspend fun getUnsyncedCertificationCount(): Int
    
    /**
     * Debug: Get sync status summary
     */
    @Query("SELECT isSynced, isLocalOnly, COUNT(*) as count FROM certifications GROUP BY isSynced, isLocalOnly")
    suspend fun getCertificationSyncStatusSummary(): List<CertificationSyncStatus>
    
    // ===== DEBUGGING METHODS FOR SYNC VERIFICATION =====
    
    /**
     * Debug: Find certification by localId
     */
    @Query("SELECT * FROM certifications WHERE localId = :localId")
    suspend fun getCertificationByLocalId(localId: String): CertificationEntity?
    
    /**
     * Debug: Get all certifications with their sync fields for debugging
     */
    @Query("SELECT id, localId, serverId, isSynced, isLocalOnly, name, status, syncRetryCount FROM certifications ORDER BY submissionDate DESC")
    suspend fun getAllCertificationsDebugInfo(): List<CertificationDebugInfo>
} 

================================================================================

FILE 17: app\src\main\java\com\example\tumbuhnyata\data\local\dao\CsrDraftDao.kt
Lines: 28 | Size: 844 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local.dao

import androidx.room.Dao
import androidx.room.Delete
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import androidx.room.Update
import com.example.tumbuhnyata.data.local.entity.CsrDraftEntity
import kotlinx.coroutines.flow.Flow

@Dao
interface CsrDraftDao {
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertCsrDraft(csrDraft: CsrDraftEntity): Long

    @Update
    suspend fun updateCsrDraft(csrDraft: CsrDraftEntity)

    @Delete
    suspend fun deleteCsrDraft(csrDraft: CsrDraftEntity)

    @Query("SELECT * FROM csr_drafts ORDER BY timestamp DESC")
    fun getAllCsrDrafts(): Flow<List<CsrDraftEntity>>

    @Query("SELECT * FROM csr_drafts WHERE id = :id")
    suspend fun getCsrDraftById(id: Long): CsrDraftEntity?
} 

================================================================================

FILE 18: app\src\main\java\com\example\tumbuhnyata\data\local\dao\CsrHistoryDao.kt
Lines: 70 | Size: 3346 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local.dao

import androidx.room.*
import com.example.tumbuhnyata.data.local.entity.CsrHistoryEntity
import kotlinx.coroutines.flow.Flow

@Dao
interface CsrHistoryDao {
    
    @Query("SELECT * FROM csr_history WHERE userId = :userId AND isDeleted = 0 ORDER BY lastModified DESC")
    fun getCsrHistoryByUserId(userId: Int): Flow<List<CsrHistoryEntity>>
    
    @Query("SELECT * FROM csr_history WHERE userId = :userId AND isDeleted = 0 ORDER BY lastModified DESC")
    suspend fun getCsrHistoryByUserIdSync(userId: Int): List<CsrHistoryEntity>
    
    @Query("SELECT * FROM csr_history WHERE id = :id AND isDeleted = 0")
    suspend fun getCsrHistoryById(id: Int): CsrHistoryEntity?
    
    @Query("SELECT * FROM csr_history WHERE userId = :userId AND status IN ('Proses Review', 'Memerlukan Revisi', 'Menunggu Pembayaran') AND isDeleted = 0 ORDER BY lastModified DESC")
    fun getPerluTindakanItems(userId: Int): Flow<List<CsrHistoryEntity>>
    
    @Query("SELECT * FROM csr_history WHERE userId = :userId AND status IN ('Akan Datang', 'Sedang Berlangsung', 'Program Selesai') AND isDeleted = 0 ORDER BY lastModified DESC")
    fun getDiterimaItems(userId: Int): Flow<List<CsrHistoryEntity>>
    
    @Query("SELECT * FROM csr_history WHERE isSynced = 0 AND isDeleted = 0")
    suspend fun getUnsyncedItems(): List<CsrHistoryEntity>
    
    @Query("SELECT * FROM csr_history WHERE isDeleted = 1 AND isSynced = 0")
    suspend fun getUnsyncedDeletedItems(): List<CsrHistoryEntity>
    
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insert(csrHistory: CsrHistoryEntity)
    
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertAll(csrHistoryList: List<CsrHistoryEntity>)
    
    @Update
    suspend fun update(csrHistory: CsrHistoryEntity)
    
    @Query("UPDATE csr_history SET isSynced = :isSynced WHERE id = :id")
    suspend fun updateSyncStatus(id: Int, isSynced: Boolean)
    
    @Query("UPDATE csr_history SET isDeleted = 1, isSynced = 0, lastModified = :timestamp WHERE id = :id")
    suspend fun markAsDeleted(id: Int, timestamp: Long = System.currentTimeMillis())
    
    @Query("DELETE FROM csr_history WHERE id = :id")
    suspend fun permanentDelete(id: Int)
    
    @Query("DELETE FROM csr_history WHERE isDeleted = 1 AND isSynced = 1")
    suspend fun cleanupSyncedDeletedItems()
    
    @Query("DELETE FROM csr_history")
    suspend fun deleteAll()
    
    @Query("SELECT COUNT(*) FROM csr_history WHERE isSynced = 0")
    suspend fun getUnsyncedCount(): Int
    
    @Query("SELECT COUNT(*) FROM csr_history WHERE isSynced = 0")
    fun getUnsyncedCountFlow(): Flow<Int>
    
    // Helper queries untuk testing status filtering
    @Query("SELECT DISTINCT status FROM csr_history WHERE userId = :userId AND isDeleted = 0")
    suspend fun getAllDistinctStatuses(userId: Int): List<String>
    
    @Query("SELECT COUNT(*) FROM csr_history WHERE userId = :userId AND status IN ('Proses Review', 'Memerlukan Revisi', 'Menunggu Pembayaran') AND isDeleted = 0")
    suspend fun getPerluTindakanCount(userId: Int): Int
    
    @Query("SELECT COUNT(*) FROM csr_history WHERE userId = :userId AND status IN ('Akan Datang', 'Sedang Berlangsung', 'Program Selesai') AND isDeleted = 0")
    suspend fun getDiterimaCount(userId: Int): Int
} 

================================================================================

FILE 19: app\src\main\java\com\example\tumbuhnyata\data\local\dao\DashboardDao.kt
Lines: 152 | Size: 5331 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local.dao

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import com.example.tumbuhnyata.data.local.entity.CsrReportEntity
import kotlinx.coroutines.flow.Flow

/**
 * Data class for sync status debugging
 */
data class SyncStatusSummary(
    val isSynced: Boolean,
    val isLocalOnly: Boolean,
    val count: Int
)

/**
 * Data class for debugging individual record sync status
 */
data class DebugRecordInfo(
    val id: Int,
    val localId: String?,
    val serverId: Int?,
    val isSynced: Boolean,
    val isLocalOnly: Boolean,
    val documentName: String?,
    val syncRetryCount: Int
)

/**
 * Data Access Object (DAO) for CSR Reports (or dashboard KPI source data).
 * Defines methods for interacting with the 'csr_reports' table in the Room database.
 */
@Dao
interface DashboardDao {

    /**
     * Inserts a list of CsrReportEntity into the database.
     * If a report with the same ID already exists, it will be replaced.
     * @param reports The list of CsrReportEntity to insert.
     */
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertOrUpdateReports(reports: List<CsrReportEntity>)

    /**
     * Fetches all CsrReportEntity from the 'csr_reports' table.
     * Returns a Flow, so an observer will be notified of any data changes.
     * @return A Flow emitting a list of all CsrReportEntity.
     */
    @Query("SELECT * FROM csr_reports ORDER BY createdAt DESC") // Urutkan berdasarkan tanggal terbaru
    fun getAllReports(): Flow<List<CsrReportEntity>>

    /**
     * Deletes all reports from the 'csr_reports' table.
     */
    @Query("DELETE FROM csr_reports")
    suspend fun clearAllReports()
    
    /**
     * Deletes only synced reports (isSynced = true), preserves unsynced offline data
     */
    @Query("DELETE FROM csr_reports WHERE isSynced = 1")
    suspend fun clearSyncedReports()
    
    /**
     * Gets all reports that need to be synced to server (isSynced = false)
     */
    @Query("SELECT * FROM csr_reports WHERE isSynced = 0 ORDER BY createdAt ASC")
    suspend fun getUnsyncedReports(): List<CsrReportEntity>
    
    /**
     * Updates sync status of a report
     */
    @Query("UPDATE csr_reports SET isSynced = :isSynced, syncRetryCount = :retryCount WHERE id = :reportId")
    suspend fun updateSyncStatus(reportId: Int, isSynced: Boolean, retryCount: Int = 0)
    
    /**
     * Updates sync status by localId (for offline-created data)
     * Stores server ID in separate field without changing primary key
     */
    @Query("UPDATE csr_reports SET isSynced = :isSynced, serverId = :serverId, syncRetryCount = 0 WHERE localId = :localId")
    suspend fun updateSyncStatusByLocalId(localId: String, isSynced: Boolean, serverId: Int)
    
    /**
     * Updates sync status by localId without changing primary key (safer approach)
     * Marks the record as synced and stores the server ID reference
     */
    @Query("UPDATE csr_reports SET isSynced = :isSynced, syncRetryCount = 0 WHERE localId = :localId")
    suspend fun markSyncedByLocalId(localId: String, isSynced: Boolean)
    
    /**
     * Gets reports by year and month
     */
    @Query("SELECT * FROM csr_reports WHERE year = :year AND month = :month ORDER BY createdAt DESC")
    fun getReportsByMonth(year: Int, month: Int): Flow<List<CsrReportEntity>>

    /**
     * Gets a single report by ID
     */
    @Query("SELECT * FROM csr_reports WHERE id = :reportId")
    fun getReportById(reportId: Int): Flow<CsrReportEntity?>
    
    /**
     * Inserts a single report (for offline-created data)
     * Using ABORT strategy to ensure each CSV row creates a new record
     * Will throw exception if there's a primary key conflict (which should not happen with auto-increment)
     */
    @Insert(onConflict = OnConflictStrategy.ABORT)
    suspend fun insertReport(report: CsrReportEntity): Long
    
    // ===== DEBUG QUERIES FOR SYNC STATUS =====
    
    /**
     * Debug: Count total records in database
     */
    @Query("SELECT COUNT(*) FROM csr_reports")
    suspend fun getTotalRecordCount(): Int
    
    /**
     * Debug: Count synced records (isSynced = true)
     */
    @Query("SELECT COUNT(*) FROM csr_reports WHERE isSynced = 1")
    suspend fun getSyncedRecordCount(): Int
    
    /**
     * Debug: Count unsynced records (isSynced = false)
     */
    @Query("SELECT COUNT(*) FROM csr_reports WHERE isSynced = 0")
    suspend fun getUnsyncedRecordCount(): Int
    
    /**
     * Debug: Get sync status summary
     */
    @Query("SELECT isSynced, isLocalOnly, COUNT(*) as count FROM csr_reports GROUP BY isSynced, isLocalOnly")
    suspend fun getSyncStatusSummary(): List<SyncStatusSummary>
    
    // ===== DEBUGGING METHODS FOR SYNC VERIFICATION =====
    
    /**
     * Debug: Find record by localId
     */
    @Query("SELECT * FROM csr_reports WHERE localId = :localId")
    suspend fun getRecordByLocalId(localId: String): CsrReportEntity?
    
    /**
     * Debug: Get all records with their sync fields for debugging
     */
    @Query("SELECT id, localId, serverId, isSynced, isLocalOnly, documentName, syncRetryCount FROM csr_reports ORDER BY createdAt DESC")
    suspend fun getAllRecordsDebugInfo(): List<DebugRecordInfo>
} 

================================================================================

FILE 20: app\src\main\java\com\example\tumbuhnyata\data\local\dao\OfflineProfileDao.kt
Lines: 31 | Size: 883 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local.dao

import androidx.room.*
import com.example.tumbuhnyata.data.local.entity.OfflineProfile

@Dao
interface OfflineProfileDao {
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    fun insert(profile: OfflineProfile)

    @Update
    fun update(profile: OfflineProfile)

    @Delete
    fun delete(profile: OfflineProfile)

    @Query("SELECT * FROM offline_profiles")
    fun getAllProfile(): List<OfflineProfile>

    @Query("SELECT * FROM offline_profiles WHERE isSynced = 0")
    fun getUnsyncedProfile(): List<OfflineProfile>

    @Query("SELECT * FROM offline_profiles WHERE id = :id")
    fun getProfileById(id: Int): OfflineProfile?

    @Query("SELECT * FROM offline_profiles ORDER BY timestamp DESC LIMIT 1")
    fun getLatestProfile(): OfflineProfile?

    @Query("DELETE FROM offline_profiles")
    fun deleteAllProfiles()
}

================================================================================

FILE 21: app\src\main\java\com\example\tumbuhnyata\data\local\dao\OfflineWorkshopRegistrationDao.kt
Lines: 28 | Size: 1032 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local.dao

import androidx.room.*
import com.example.tumbuhnyata.data.local.entity.OfflineWorkshopRegistration

@Dao
interface OfflineWorkshopRegistrationDao {
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    fun insert(registration: OfflineWorkshopRegistration)

    @Update
    fun update(registration: OfflineWorkshopRegistration)

    @Delete
    fun delete(registration: OfflineWorkshopRegistration)

    @Query("SELECT * FROM offline_workshop_registrations WHERE isSynced = 0")
    fun getUnsyncedRegistrations(): kotlin.collections.List<OfflineWorkshopRegistration>

    @Query("SELECT * FROM offline_workshop_registrations")
    fun getAllRegistrations(): kotlin.collections.List<OfflineWorkshopRegistration>

    @Query("SELECT * FROM offline_workshop_registrations WHERE id = :id")
    fun getRegistrationById(id: String): OfflineWorkshopRegistration?

    @Query("DELETE FROM offline_workshop_registrations WHERE id IN (:ids)")
    suspend fun deleteByIds(ids: List<String>)
}

================================================================================

FILE 22: app\src\main\java\com\example\tumbuhnyata\data\local\entity\CertificationEntity.kt
Lines: 31 | Size: 1392 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local.entity

import androidx.room.Entity
import androidx.room.PrimaryKey

/**
 * Represents a Certification submission in the local Room database.
 * This entity is used for caching data fetched from the API and managing offline sync.
 */
@Entity(tableName = "certifications")
data class CertificationEntity(
    @PrimaryKey(autoGenerate = true) // Enable auto-increment for offline data
    val id: Int = 0, // Local auto-increment ID (always unique)

    val name: String,
    val description: String,
    val credentialBody: String,
    val benefits: String,
    val cost: Float,
    val status: String = "submitted", // submitted, in_review, approved, rejected
    val submissionDate: String, // ISO 8601 timestamp
    val supportingDocuments: String, // JSON string of document list
    
    // Sync management fields
    val isSynced: Boolean = false, // true = data sudah sync dengan server, false = perlu sync
    val isLocalOnly: Boolean = false, // true = data dibuat offline, false = data dari server
    val localId: String? = null, // UUID untuk data offline sebelum mendapat ID dari server
    val serverId: Int? = null, // ID dari server setelah sync (for reference, not primary key)
    val lastModified: String = submissionDate, // Timestamp terakhir dimodifikasi
    val syncRetryCount: Int = 0 // Counter untuk retry sync jika gagal
) 

================================================================================

FILE 23: app\src\main\java\com\example\tumbuhnyata\data\local\entity\CsrDraftEntity.kt
Lines: 21 | Size: 559 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local.entity

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "csr_drafts")
data class CsrDraftEntity(
    @PrimaryKey(autoGenerate = true)
    val id: Long = 0L,
    val userId: Int,
    val programName: String,
    val category: String,
    val description: String,
    val location: String,
    val partnerName: String,
    val startDate: String,
    val endDate: String,
    val budget: String,
    val isSynced: Boolean = false,
    val timestamp: Long = System.currentTimeMillis()
) 

================================================================================

FILE 24: app\src\main\java\com\example\tumbuhnyata\data\local\entity\CsrHistoryEntity.kt
Lines: 28 | Size: 836 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local.entity

import androidx.room.Entity
import androidx.room.PrimaryKey
import com.google.gson.annotations.SerializedName

@Entity(tableName = "csr_history")
data class CsrHistoryEntity(
    @PrimaryKey
    val id: Int,
    val userId: Int,
    val programName: String,
    val category: String,
    val description: String,
    val location: String,
    val partnerName: String,
    val startDate: String,
    val endDate: String,
    val budget: String,
    val proposalUrl: String?,
    val legalityUrl: String?,
    val agreed: Boolean,
    val status: String,
    val createdAt: String,
    val isSynced: Boolean = true, // true jika sudah sync dengan server, false jika belum
    val isDeleted: Boolean = false, // untuk soft delete
    val lastModified: Long = System.currentTimeMillis()
) 

================================================================================

FILE 25: app\src\main\java\com\example\tumbuhnyata\data\local\entity\CsrReportEntity.kt
Lines: 32 | Size: 1391 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local.entity

import androidx.room.Entity
import androidx.room.PrimaryKey

/**
 * Represents a CSR Report item in the local Room database.
 * This entity is used for caching data fetched from the API and managing offline sync.
 */
@Entity(tableName = "csr_reports") // Nama tabel bisa disesuaikan jika perlu
data class CsrReportEntity(
    @PrimaryKey(autoGenerate = true) // Enable auto-increment for offline data
    val id: Int = 0, // Local auto-increment ID (always unique)

    val companyId: Int,
    val year: Int,
    val month: Int?,
    val carbonValue: Float?,
    val documentType: String,
    val documentName: String?,
    val documentPath: String,
    val analysis: String?,
    val createdAt: String, // Menyimpan timestamp sebagai String (ISO 8601) atau Long jika preferensi
    
    // Sync management fields
    val isSynced: Boolean = false, // true = data sudah sync dengan server, false = perlu sync
    val isLocalOnly: Boolean = false, // true = data dibuat offline, false = data dari server
    val localId: String? = null, // UUID untuk data offline sebelum mendapat ID dari server
    val serverId: Int? = null, // ID dari server setelah sync (for reference, not primary key)
    val lastModified: String = createdAt, // Timestamp terakhir dimodifikasi
    val syncRetryCount: Int = 0 // Counter untuk retry sync jika gagal
) 

================================================================================

FILE 26: app\src\main\java\com\example\tumbuhnyata\data\local\entity\OfflineProfile.kt
Lines: 17 | Size: 428 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local.entity

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "offline_profiles")
data class OfflineProfile(
    @PrimaryKey
    val id: Int,
    val companyName: String,
    val email: String,
    val phoneNumber: String,
    val nib: String,
    val address: String,
    val isSynced: Boolean = false,
    val timestamp: Long = System.currentTimeMillis()
)

================================================================================

FILE 27: app\src\main\java\com\example\tumbuhnyata\data\local\entity\OfflineWorkshopRegistration.kt
Lines: 16 | Size: 464 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.local.entity

import androidx.room.Entity
import androidx.room.PrimaryKey
import java.util.UUID

@Entity(tableName = "offline_workshop_registrations")
data class OfflineWorkshopRegistration(
    @PrimaryKey
    val id: String = UUID.randomUUID().toString(),
    val workshopId: String,
    val companyName: String,
    val email: String,
    val isSynced: Boolean = false,
    val timestamp: Long = System.currentTimeMillis()
)

================================================================================

FILE 28: app\src\main\java\com\example\tumbuhnyata\data\mapper\CertificationMappers.kt
Lines: 108 | Size: 4167 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.mapper

import com.example.tumbuhnyata.data.local.entity.CertificationEntity
import com.example.tumbuhnyata.data.model.CreateCertificationRequest
import com.example.tumbuhnyata.data.model.CertificationData
import com.example.tumbuhnyata.data.model.SupportingDocument
import java.text.SimpleDateFormat
import java.util.*

/**
 * Converts CertificationEntity to CreateCertificationRequest for API
 * Used when syncing offline-created certification applications to server
 */
fun CertificationEntity.toCreateRequest(): CreateCertificationRequest {
    // Parse supporting documents from pipe-separated format: "url|name,url|name"
    val supportingDocsList = try {
        if (this.supportingDocuments.isBlank()) {
            emptyList()
        } else {
            this.supportingDocuments.split(",").mapNotNull { entry ->
                val parts = entry.trim().split("|")
                if (parts.size == 2) {
                    SupportingDocument(url = parts[0], name = parts[1])
                } else {
                    null // Ignore malformed entries
                }
            }
        }
    } catch (e: Exception) {
        emptyList() // Fallback to empty list on error
    }

    return CreateCertificationRequest(
        name = this.name,
        description = this.description,
        credential_body = this.credentialBody,
        benefits = this.benefits,
        cost = this.cost,
        supporting_documents = supportingDocsList,
        user_id = 1 // EXPLICITLY set user_id = 1 (backend requirement)
    )
}

/**
 * Converts API CertificationData to CertificationEntity for local storage
 * Used when caching server data locally
 * IMPORTANT: Sets sync flags correctly for server data
 */
fun CertificationData.toEntity(): CertificationEntity {
    return CertificationEntity(
        id = 0, // Let Room auto-generate local ID
        name = this.name,
        description = this.description,
        credentialBody = this.credential_body,
        benefits = this.benefits,
        cost = this.cost.toFloat(),
        status = this.status,
        submissionDate = this.submission_date,
        supportingDocuments = this.supporting_documents,
        isSynced = true, // Server data is by definition synced
        isLocalOnly = false, // Came from server, not offline-created
        serverId = this.id, // Store server ID for reference
        lastModified = this.submission_date,
        syncRetryCount = 0
    )
}

/**
 * Creates a new CertificationEntity for offline certification application
 * with sync fields properly set for offline-first architecture
 * 
 * Flag meanings:
 * - isLocalOnly = true: Application created offline, needs initial sync to server
 * - isLocalOnly = false: Data from server that may have local modifications
 * - isSynced = false: Needs to be synced to server
 * - isSynced = true: Already synced with server
 */
fun createOfflineCertificationEntity(
    name: String,
    description: String,
    credentialBody: String,
    benefits: String,
    cost: Float,
    supportingDocuments: List<String>
): CertificationEntity {
    val currentTime = System.currentTimeMillis()
    val timestamp = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault()).format(Date(currentTime))
    
    // Convert supporting documents list to pipe-separated format that matches ViewModel output
    val documentsJson = supportingDocuments.joinToString(",") // Keep comma-separated as it comes from ViewModel
    
    return CertificationEntity(
        id = 0, // Use 0 for auto-increment
        name = name,
        description = description,
        credentialBody = credentialBody,
        benefits = benefits,
        cost = cost,
        status = "submitted",
        submissionDate = timestamp,
        supportingDocuments = documentsJson,
        isSynced = false, // Not synced yet - needs to go to server
        isLocalOnly = true, // Created offline - use apply endpoint
        localId = UUID.randomUUID().toString(), // Unique local identifier for tracking
        lastModified = timestamp,
        syncRetryCount = 0 // No retry attempts yet
    )
} 

================================================================================

FILE 29: app\src\main\java\com\example\tumbuhnyata\data\mapper\CsrHistoryMapper.kt
Lines: 58 | Size: 2038 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.mapper

import com.example.tumbuhnyata.data.local.entity.CsrHistoryEntity
import com.example.tumbuhnyata.data.model.CsrHistoryItem

object CsrHistoryMapper {
    
    fun toEntity(item: CsrHistoryItem, isSynced: Boolean = true): CsrHistoryEntity {
        return CsrHistoryEntity(
            id = item.id,
            userId = item.userId,
            programName = item.programName,
            category = item.category,
            description = item.description,
            location = item.location,
            partnerName = item.partnerName,
            startDate = item.startDate,
            endDate = item.endDate,
            budget = item.budget,
            proposalUrl = item.proposalUrl,
            legalityUrl = item.legalityUrl,
            agreed = item.agreed,
            status = item.status,
            createdAt = item.createdAt,
            isSynced = isSynced,
            isDeleted = false,
            lastModified = System.currentTimeMillis()
        )
    }
    
    fun toItem(entity: CsrHistoryEntity): CsrHistoryItem {
        return CsrHistoryItem(
            id = entity.id,
            userId = entity.userId,
            programName = entity.programName,
            category = entity.category,
            description = entity.description,
            location = entity.location,
            partnerName = entity.partnerName,
            startDate = entity.startDate,
            endDate = entity.endDate,
            budget = entity.budget,
            proposalUrl = entity.proposalUrl,
            legalityUrl = entity.legalityUrl,
            agreed = entity.agreed,
            status = entity.status,
            createdAt = entity.createdAt
        )
    }
    
    fun toItemList(entities: List<CsrHistoryEntity>): List<CsrHistoryItem> {
        return entities.map { toItem(it) }
    }
    
    fun toEntityList(items: List<CsrHistoryItem>, isSynced: Boolean = true): List<CsrHistoryEntity> {
        return items.map { toEntity(it, isSynced) }
    }
} 

================================================================================

FILE 30: app\src\main\java\com\example\tumbuhnyata\data\mapper\DataMappers.kt
Lines: 513 | Size: 21963 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.mapper

import com.example.tumbuhnyata.R // Pastikan R diimport dengan benar dan ikon tersedia
import com.example.tumbuhnyata.data.local.entity.CsrReportEntity
import com.example.tumbuhnyata.data.model.CsrReportModel // Model dari API
import com.example.tumbuhnyata.data.model.DashboardData // Model baru untuk /dashboard endpoint
import com.example.tumbuhnyata.viewmodel.KPIItemState // UI State Model dari DashboardViewModel
import java.text.DecimalFormat
import java.text.ParseException
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import com.example.tumbuhnyata.data.model.KpiDetailData
import com.example.tumbuhnyata.ui.dashboard.kpi.KpiDetails

// Mapper dari Model API (CsrReportModel) ke Entity Room (CsrReportEntity)
fun CsrReportModel.toEntity(): CsrReportEntity {
    return CsrReportEntity(
        id = this.id,
        companyId = this.companyId,
        year = this.year,
        month = this.month,
        carbonValue = this.carbonValue,
        documentType = this.documentType,
        documentName = this.documentName,
        documentPath = this.documentPath,
        analysis = this.analysis,
        createdAt = this.createdAt,
        isSynced = true,
        isLocalOnly = false,
        serverId = this.id,
        localId = null,
        lastModified = this.createdAt,
        syncRetryCount = 0
    )
}

fun List<CsrReportModel>.toEntityList(): List<CsrReportEntity> {
    return this.map { it.toEntity() }
}

// Helper function untuk parsing tanggal dengan beberapa format umum
private fun parseDateString(dateString: String?): Date? {
    if (dateString == null) return null
    val formats = listOf(
        SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()),
        SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault()),
        SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.getDefault()),
        SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX", Locale.getDefault()),
        SimpleDateFormat("EEE MMM dd yyyy HH:mm:ss 'GMT'Z (zzzz)", Locale.ENGLISH) // Format dari new Date().toString()
    )
    for (format in formats) {
        try {
            return format.parse(dateString)
        } catch (e: ParseException) {
            // Lanjutkan mencoba format berikutnya
        }
    }
    return null
}

// Mapper dari data /dashboard endpoint (DashboardData) ke List UI State Model (KPIItemState)
// Updated: Menggunakan carbon_value sebagai value general untuk semua KPI berdasarkan document_type
fun DashboardData.toKpiItemStateList(): List<KPIItemState> {
    val kpiList = mutableListOf<KPIItemState>()
    val decimalFormat = DecimalFormat("#,###.##")

    // Ambil data dari recent submissions dan group berdasarkan document_type
    val recentSubmissions = this.recentSubmissions ?: emptyList()
    val dataByType = recentSubmissions.groupBy { it.documentType }
    
    // 1. Carbon Footprint (data_emisi)
    val carbonData = dataByType["data_emisi"] ?: emptyList()
    val totalCarbon = carbonData.mapNotNull { it.carbonValue }.sum()
    val carbonTarget = 10000f
    val carbonPercentage = if (carbonTarget > 0f) (totalCarbon / carbonTarget) * 100f else 0f
    
    kpiList.add(
        KPIItemState(
            title = "Carbon Footprint",
            topIcon = R.drawable.ic_carbonfootprint,
            statusText = "${carbonPercentage.toInt()}% target",
            statusPercentageValue = "5%",
            isUp = true,
            value = decimalFormat.format(totalCarbon),
            unit = "kg CO₂e",
            targetValue = "Target: ${decimalFormat.format(carbonTarget)} kg CO₂e",
            onClickRoute = "kpi_detail/carbon_footprint"
        )
    )

    // 2. Konsumsi Energi (data_energi) - UPDATED: default to 0
    val energyData = dataByType["data_energi"] ?: emptyList()
    val totalEnergy = energyData.mapNotNull { it.carbonValue }.sum()
    val energyTarget = 9000f
    val energyPercentage = if (energyTarget > 0f) (totalEnergy / energyTarget) * 100f else 0f
    
    kpiList.add(
        KPIItemState(
            title = "Konsumsi Energi",
            topIcon = R.drawable.ic_konsumsienergi,
            statusText = if (totalEnergy > 0) "${energyPercentage.toInt()}% target" else "0% target",
            statusPercentageValue = if (totalEnergy > 0) "${energyPercentage.toInt()}%" else "0%",
            isUp = false,
            value = decimalFormat.format(totalEnergy), // Akan jadi "0" jika tidak ada data
            unit = "kWh",
            targetValue = "Target: ${decimalFormat.format(energyTarget)} kWh",
            onClickRoute = "kpi_detail/energy_consumption"
        )
    )

    // 3. Penggunaan Air (data_air) - UPDATED: default to 0
    val waterData = dataByType["data_air"] ?: emptyList()
    val totalWater = waterData.mapNotNull { it.carbonValue }.sum()
    val waterTarget = 60000f
    val waterPercentage = if (waterTarget > 0f) (totalWater / waterTarget) * 100f else 0f
    
    kpiList.add(
        KPIItemState(
            title = "Penggunaan Air",
            topIcon = R.drawable.ic_penggunaanair,
            statusText = if (totalWater > 0) "${waterPercentage.toInt()}% target" else "0% target",
            statusPercentageValue = if (totalWater > 0) "${waterPercentage.toInt()}%" else "0%",
            isUp = false,
            value = decimalFormat.format(totalWater), // Akan jadi "0" jika tidak ada data
            unit = "L",
            targetValue = "Target: ${decimalFormat.format(waterTarget)} L",
            onClickRoute = "kpi_detail/water_usage"
        )
    )

    // 4. Pohon Tertanam (data_pohon) - UPDATED: default to 0
    val treeData = dataByType["data_pohon"] ?: emptyList()
    val totalTrees = treeData.mapNotNull { it.carbonValue }.sum()
    val treeTarget = 6000f
    val treePercentage = if (treeTarget > 0f) (totalTrees / treeTarget) * 100f else 0f
    
    kpiList.add(
        KPIItemState(
            title = "Pohon Tertanam",
            topIcon = R.drawable.ic_pohontertanam,
            statusText = if (totalTrees > 0) "${treePercentage.toInt()}% target" else "0% target",
            statusPercentageValue = if (totalTrees > 0) "${treePercentage.toInt()}%" else "0%",
            isUp = totalTrees > 0,
            value = decimalFormat.format(totalTrees), // Akan jadi "0" jika tidak ada data
            unit = "Pohon",
            targetValue = "Target: ${decimalFormat.format(treeTarget)} Pohon",
            onClickRoute = "kpi_detail/tree_planting"
        )
    )

    // 5. Pengelolaan Sampah (data_sampah) - UPDATED: default to 0
    val wasteData = dataByType["data_sampah"] ?: emptyList()
    val totalWaste = wasteData.mapNotNull { it.carbonValue }.sum()
    val wasteTarget = 10000f
    val wastePercentage = if (wasteTarget > 0f) (totalWaste / wasteTarget) * 100f else 0f
    
    kpiList.add(
        KPIItemState(
            title = "Pengelolaan Sampah",
            topIcon = R.drawable.ic_pengelolaansampah,
            statusText = if (totalWaste > 0) "${wastePercentage.toInt()}% target" else "0% target",
            statusPercentageValue = if (totalWaste > 0) "${wastePercentage.toInt()}%" else "0%",
            isUp = totalWaste > 0,
            value = decimalFormat.format(totalWaste), // Akan jadi "0" jika tidak ada data
            unit = "kg",
            targetValue = "Target: ${decimalFormat.format(wasteTarget)} kg",
            onClickRoute = "kpi_detail/waste_management"
        )
    )

    // 6. Penerima Manfaat (data_manfaat) - UPDATED: default to 0
    val beneficiaryData = dataByType["data_manfaat"] ?: emptyList()
    val totalBeneficiaries = beneficiaryData.mapNotNull { it.carbonValue }.sum()
    val beneficiaryTarget = 15000f
    val beneficiaryPercentage = if (beneficiaryTarget > 0f) (totalBeneficiaries / beneficiaryTarget) * 100f else 0f
    
    kpiList.add(
        KPIItemState(
            title = "Penerima Manfaat",
            topIcon = R.drawable.ic_penerimamanfaat,
            statusText = if (totalBeneficiaries > 0) "${beneficiaryPercentage.toInt()}% target" else "0% target",
            statusPercentageValue = if (totalBeneficiaries > 0) "${beneficiaryPercentage.toInt()}%" else "0%",
            isUp = totalBeneficiaries > 0,
            value = decimalFormat.format(totalBeneficiaries), // Akan jadi "0" jika tidak ada data
            unit = "Orang",
            targetValue = "Target: ${decimalFormat.format(beneficiaryTarget)} Orang",
            onClickRoute = "kpi_detail/benefit_received"
        )
    )

    return kpiList
}

// Mapper dari List Entity Room (CsrReportEntity) ke List UI State Model (KPIItemState) untuk OFFLINE
// Updated: Agregasi berdasarkan document_type menggunakan carbon_value sebagai value general
fun List<CsrReportEntity>.toKpiItemStateListForOffline(filterYear: Int? = null): List<KPIItemState> {
    if (this.isEmpty()) {
        return createDefaultKpiItems()
    }
    val kpiList = mutableListOf<KPIItemState>()
    val decimalFormat = DecimalFormat("#,###.##")

    // Smart Year Detection: Use latest year with data if no year specified
    val targetYear = filterYear ?: run {
        val availableYears = this.map { it.year }.distinct().sortedDescending()
        availableYears.firstOrNull() ?: java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)
    }
    val filteredData = this.filter { it.year == targetYear }
    
    // Group dan agregasi berdasarkan document_type
    val dataByType = filteredData.groupBy { it.documentType }
    
    // 1. Carbon Footprint (data_emisi)
    val carbonData = dataByType["data_emisi"] ?: emptyList()
    val totalCarbon = carbonData.mapNotNull { it.carbonValue }.sum()
    val carbonTarget = 10000f
    val carbonPercentage = if (carbonTarget > 0f) (totalCarbon / carbonTarget) * 100f else 0f
    
    kpiList.add(
        KPIItemState(
            title = "Carbon Footprint",
            topIcon = R.drawable.ic_carbonfootprint,
            statusText = "${carbonPercentage.toInt()}% target",
            statusPercentageValue = "5%",
            isUp = true,
            value = decimalFormat.format(totalCarbon),
            unit = "kg CO₂e",
            targetValue = "Target: ${decimalFormat.format(carbonTarget)} kg CO₂e",
            onClickRoute = "kpi_detail/carbon_footprint"
        )
    )

    // 2. Konsumsi Energi (data_energi) - UPDATED: default to 0
    val energyData = dataByType["data_energi"] ?: emptyList()
    val totalEnergy = energyData.mapNotNull { it.carbonValue }.sum()
    val energyTarget = 9000f
    val energyPercentage = if (energyTarget > 0f) (totalEnergy / energyTarget) * 100f else 0f
    
    kpiList.add(
        KPIItemState(
            title = "Konsumsi Energi",
            topIcon = R.drawable.ic_konsumsienergi,
            statusText = if (totalEnergy > 0) "${energyPercentage.toInt()}% target" else "0% target",
            statusPercentageValue = if (totalEnergy > 0) "${energyPercentage.toInt()}%" else "0%",
            isUp = false,
            value = decimalFormat.format(totalEnergy), // Akan jadi "0" jika tidak ada data
            unit = "kWh",
            targetValue = "Target: ${decimalFormat.format(energyTarget)} kWh",
            onClickRoute = "kpi_detail/energy_consumption"
        )
    )

    // 3. Penggunaan Air (data_air) - UPDATED: default to 0
    val waterData = dataByType["data_air"] ?: emptyList()
    val totalWater = waterData.mapNotNull { it.carbonValue }.sum()
    val waterTarget = 60000f
    val waterPercentage = if (waterTarget > 0f) (totalWater / waterTarget) * 100f else 0f
    
    kpiList.add(
        KPIItemState(
            title = "Penggunaan Air",
            topIcon = R.drawable.ic_penggunaanair,
            statusText = if (totalWater > 0) "${waterPercentage.toInt()}% target" else "0% target",
            statusPercentageValue = if (totalWater > 0) "${waterPercentage.toInt()}%" else "0%",
            isUp = false,
            value = decimalFormat.format(totalWater), // Akan jadi "0" jika tidak ada data
            unit = "L",
            targetValue = "Target: ${decimalFormat.format(waterTarget)} L",
            onClickRoute = "kpi_detail/water_usage"
        )
    )

    // 4. Pohon Tertanam (data_pohon) - UPDATED: default to 0
    val treeData = dataByType["data_pohon"] ?: emptyList()
    val totalTrees = treeData.mapNotNull { it.carbonValue }.sum()
    val treeTarget = 6000f
    val treePercentage = if (treeTarget > 0f) (totalTrees / treeTarget) * 100f else 0f
    
    kpiList.add(
        KPIItemState(
            title = "Pohon Tertanam",
            topIcon = R.drawable.ic_pohontertanam,
            statusText = if (totalTrees > 0) "${treePercentage.toInt()}% target" else "0% target",
            statusPercentageValue = if (totalTrees > 0) "${treePercentage.toInt()}%" else "0%",
            isUp = totalTrees > 0,
            value = decimalFormat.format(totalTrees), // Akan jadi "0" jika tidak ada data
            unit = "Pohon",
            targetValue = "Target: ${decimalFormat.format(treeTarget)} Pohon",
            onClickRoute = "kpi_detail/tree_planting"
        )
    )

    // 5. Pengelolaan Sampah (data_sampah) - UPDATED: default to 0
    val wasteData = dataByType["data_sampah"] ?: emptyList()
    val totalWaste = wasteData.mapNotNull { it.carbonValue }.sum()
    val wasteTarget = 10000f
    val wastePercentage = if (wasteTarget > 0f) (totalWaste / wasteTarget) * 100f else 0f
    
    kpiList.add(
        KPIItemState(
            title = "Pengelolaan Sampah",
            topIcon = R.drawable.ic_pengelolaansampah,
            statusText = if (totalWaste > 0) "${wastePercentage.toInt()}% target" else "0% target",
            statusPercentageValue = if (totalWaste > 0) "${wastePercentage.toInt()}%" else "0%",
            isUp = totalWaste > 0,
            value = decimalFormat.format(totalWaste), // Akan jadi "0" jika tidak ada data
            unit = "kg",
            targetValue = "Target: ${decimalFormat.format(wasteTarget)} kg",
            onClickRoute = "kpi_detail/waste_management"
        )
    )

    // 6. Penerima Manfaat (data_manfaat) - UPDATED: default to 0
    val beneficiaryData = dataByType["data_manfaat"] ?: emptyList()
    val totalBeneficiaries = beneficiaryData.mapNotNull { it.carbonValue }.sum()
    val beneficiaryTarget = 15000f
    val beneficiaryPercentage = if (beneficiaryTarget > 0f) (totalBeneficiaries / beneficiaryTarget) * 100f else 0f
    
    kpiList.add(
        KPIItemState(
            title = "Penerima Manfaat",
            topIcon = R.drawable.ic_penerimamanfaat,
            statusText = if (totalBeneficiaries > 0) "${beneficiaryPercentage.toInt()}% target" else "0% target",
            statusPercentageValue = if (totalBeneficiaries > 0) "${beneficiaryPercentage.toInt()}%" else "0%",
            isUp = totalBeneficiaries > 0,
            value = decimalFormat.format(totalBeneficiaries), // Akan jadi "0" jika tidak ada data
            unit = "Orang",
            targetValue = "Target: ${decimalFormat.format(beneficiaryTarget)} Orang",
            onClickRoute = "kpi_detail/benefit_received"
        )
    )

    return kpiList
}

// Helper function untuk default KPI items ketika tidak ada data - UPDATED: all values to 0
private fun createDefaultKpiItems(): List<KPIItemState> {
    return listOf(
        KPIItemState(
            title = "Carbon Footprint",
            topIcon = R.drawable.ic_carbonfootprint,
            statusText = "0% target",
            statusPercentageValue = "0%",
            isUp = false,
            value = "0",
            unit = "kg CO₂e",
            targetValue = "Target: 10.000 kg CO₂e",
            onClickRoute = "kpi_detail/carbon_footprint"
        ),
        KPIItemState(
            title = "Konsumsi Energi",
            topIcon = R.drawable.ic_konsumsienergi,
            statusText = "0% target",
            statusPercentageValue = "0%",
            isUp = false,
            value = "0",
            unit = "kWh",
            targetValue = "Target: 9.000 kWh",
            onClickRoute = "kpi_detail/energy_consumption"
        ),
        KPIItemState(
            title = "Penggunaan Air",
            topIcon = R.drawable.ic_penggunaanair,
            statusText = "0% target",
            statusPercentageValue = "0%",
            isUp = false,
            value = "0",
            unit = "L",
            targetValue = "Target: 60.000 L",
            onClickRoute = "kpi_detail/water_usage"
        ),
        KPIItemState(
            title = "Pohon Tertanam",
            topIcon = R.drawable.ic_pohontertanam,
            statusText = "0% target",
            statusPercentageValue = "0%",
            isUp = false,
            value = "0",
            unit = "Pohon",
            targetValue = "Target: 6.000 Pohon",
            onClickRoute = "kpi_detail/tree_planting"
        ),
        KPIItemState(
            title = "Pengelolaan Sampah",
            topIcon = R.drawable.ic_pengelolaansampah,
            statusText = "0% target",
            statusPercentageValue = "0%",
            isUp = false,
            value = "0",
            unit = "kg",
            targetValue = "Target: 10.000 kg",
            onClickRoute = "kpi_detail/waste_management"
        ),
        KPIItemState(
            title = "Penerima Manfaat",
            topIcon = R.drawable.ic_penerimamanfaat,
            statusText = "0% target",
            statusPercentageValue = "0%",
            isUp = false,
            value = "0",
            unit = "Orang",
            targetValue = "Target: 15.000 Orang",
            onClickRoute = "kpi_detail/benefit_received"
        )
    )
}

// Mapper tunggal dari Entity ke KPIItemState jika dibutuhkan (mungkin kurang umum untuk dashboard agregat)
fun CsrReportEntity.toKpiItemState(): KPIItemState {
    val currentValue = this.carbonValue ?: 0.0f
    val targetValue = 10000.0f // Contoh target
    val unit = "kg CO₂e"
    val decimalFormat = DecimalFormat("#,###.##")
    val percentageToTarget = if (targetValue > 0f) (currentValue / targetValue) * 100f else 0f

    return KPIItemState(
        title = "Laporan ${this.documentType} (${this.year})",
        topIcon = R.drawable.ic_carbonfootprint, // Pastikan ikon ini ada
        statusText = "${decimalFormat.format(percentageToTarget)}% target",
        statusPercentageValue = "N/A", // Membutuhkan logika perbandingan yang lebih kompleks
        isUp = currentValue > (targetValue * 0.8), // Contoh: up jika > 80% target
        value = decimalFormat.format(currentValue),
        unit = unit,
        targetValue = "${decimalFormat.format(targetValue)} $unit",
        onClickRoute = "kpi_detail/individual_report_${this.id}"
    )
}

// ===== MAPPERS UNTUK KPI DETAIL =====

/**
 * Mapper dari KpiDetailData (API response) ke KpiDetails (UI state)
 */
fun KpiDetailData.toKpiDetails(year: Int): KpiDetails {
    val decimalFormat = DecimalFormat("#,###.##")
    
    // DEBUG: Log data yang diterima untuk KPI detail
    println("DataMapper DEBUG - KPI Detail data received:")
    println("  kpiType: ${this.kpiType}")
    println("  title: ${this.title}")
    println("  yearlyData size: ${this.yearlyData?.size}")
    println("  yearlyData content: ${this.yearlyData}")
    println("  multiYearData size: ${this.multiYearData?.size}")
    println("  multiYearData content: ${this.multiYearData}")
    
    // Convert monthly data to list of floats for chart
    val yearlyChartData = this.yearlyData?.mapNotNull { monthData ->
        monthData.value
    } ?: List(12) { 0f } // Default 12 months dengan value 0
    
    // Convert multi-year data to list of floats for chart  
    val fiveYearChartData = this.multiYearData?.mapNotNull { yearData ->
        yearData.totalValue
    } ?: List(5) { 0f } // Default 5 years dengan value 0
    
    println("DataMapper DEBUG - Converted chart data:")
    println("  yearlyChartData: $yearlyChartData")
    println("  fiveYearChartData: $fiveYearChartData")
    
    // Get statistics
    val averageValue = this.statistics?.averageValue?.let { 
        decimalFormat.format(it) 
    } ?: "0"
    
    val minValue = this.statistics?.minValue?.let { 
        decimalFormat.format(it) 
    } ?: "0"
    
    return KpiDetails(
        id = this.kpiType ?: "unknown",
        title = this.title ?: "KPI Detail",
        unit = this.unit ?: "unit",
        year = year,
        yearlyChartData = yearlyChartData,
        fiveYearChartData = fiveYearChartData,
        averageValue = averageValue,
        minValue = minValue,
        analysis = this.analysis ?: "Analisis tidak tersedia."
    )
}

/**
 * Fallback mapper dari dummy data untuk KPI yang belum diintegrasikan
 * Ini akan digunakan jika API belum ready atau sebagai fallback
 */
fun createDummyKpiDetails(kpiId: String): KpiDetails {
    val currentYear = java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)
    return when (kpiId) {
        "carbon_footprint" -> KpiDetails(
            id = kpiId,
            title = "Carbon Footprint",
            unit = "kg CO₂e",
            year = currentYear,
            yearlyChartData = listOf(65f, 75f, 85f, 72f, 93f, 80f, 100f, 110f, 105f, 115f, 110f, 130f),
            fiveYearChartData = listOf(850f, 920f, 1050f, 980f, 1230f),
            averageValue = "95.8",
            minValue = "65",
            analysis = "Data ini berasal dari template sementara. Jejak karbon menunjukkan tren peningkatan yang perlu dikontrol melalui program CSR yang lebih efektif."
        )
        else -> KpiDetails(
            id = kpiId,
            title = "KPI Detail",
            unit = "unit",
            year = currentYear,
            yearlyChartData = List(12) { 50f + (it * 5f) },
            fiveYearChartData = List(5) { 500f + (it * 100f) },
            averageValue = "100",
            minValue = "50",
            analysis = "Data template untuk KPI yang belum diintegrasikan dengan backend."
        )
    }
} 

================================================================================

FILE 31: app\src\main\java\com\example\tumbuhnyata\data\mapper\SyncMappers.kt
Lines: 82 | Size: 2959 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.mapper

import com.example.tumbuhnyata.data.local.entity.CsrReportEntity
import com.example.tumbuhnyata.data.model.CreateSubmissionRequest
import com.example.tumbuhnyata.data.model.UpdateSubmissionRequest
import java.util.UUID

/**
 * Converts CsrReportEntity to CreateSubmissionRequest for API
 * Used when syncing offline-created data to server
 * FIXED: Updated field names to match backend API expectations
 */
fun CsrReportEntity.toCreateRequest(): CreateSubmissionRequest {
    return CreateSubmissionRequest(
        company_id = this.companyId.toString(),
        year = this.year,
        month = this.month,
        carbon_value = this.carbonValue ?: 0f,
        document_type = this.documentType ?: "data_emisi",
        document_name = this.documentName ?: "Unknown Document",
        document_path = this.documentPath,
        analysis = this.analysis
    )
}

/**
 * Converts CsrReportEntity to UpdateSubmissionRequest for API
 * Used when syncing modified data to server
 * FIXED: Updated field names to match backend API expectations
 */
fun CsrReportEntity.toUpdateRequest(): UpdateSubmissionRequest {
    return UpdateSubmissionRequest(
        company_id = this.companyId.toString(),
        year = this.year,
        month = this.month,
        carbon_value = this.carbonValue ?: 0f,
        document_type = this.documentType ?: "data_emisi",
        document_name = this.documentName ?: "Unknown Document",
        document_path = this.documentPath,
        analysis = this.analysis
    )
}

/**
 * Creates a new CsrReportEntity for offline data entry
 * with sync fields properly set for offline-first architecture
 * 
 * Flag meanings:
 * - isLocalOnly = true: Data created offline, needs initial sync to server
 * - isLocalOnly = false: Data from server that may have local modifications
 * - isSynced = false: Needs to be synced to server
 * - isSynced = true: Already synced with server
 */
fun createOfflineEntity(
    companyId: Int,
    year: Int,
    month: Int?,
    carbonValue: Float?,
    documentType: String,
    documentName: String?,
    documentPath: String,
    analysis: String?
): CsrReportEntity {
    val timestamp = System.currentTimeMillis().toString()
    return CsrReportEntity(
        id = 0, // Use 0 for auto-increment, not -1 (prevents primary key conflicts)
        companyId = companyId,
        year = year,
        month = month,
        carbonValue = carbonValue,
        documentType = documentType,
        documentName = documentName,
        documentPath = documentPath,
        analysis = analysis,
        createdAt = timestamp,
        isSynced = false, // Not synced yet - needs to go to server
        isLocalOnly = true, // Created offline - use createSubmission endpoint
        localId = UUID.randomUUID().toString(), // Unique local identifier for tracking
        lastModified = timestamp,
        syncRetryCount = 0 // No retry attempts yet
    )
} 

================================================================================

FILE 32: app\src\main\java\com\example\tumbuhnyata\data\model\BottomNavItem.kt
Lines: 8 | Size: 178 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

data class BottomNavItem(
    val label: String,
    val route: String,
    val unselectedIconRes: Int,
    val selectedIconRes: Int
)

================================================================================

FILE 33: app\src\main\java\com\example\tumbuhnyata\data\model\CertificationModels.kt
Lines: 82 | Size: 2136 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

import com.google.gson.annotations.SerializedName

/**
 * Data class for a single supporting document
 */
data class SupportingDocument(
    @SerializedName("url") val url: String,
    @SerializedName("name") val name: String
)

/**
 * Request model for creating certification application
 * Maps to POST /certifications/apply endpoint
 */
data class CreateCertificationRequest(
    val name: String,
    val description: String,
    val credential_body: String,
    val benefits: String,
    val cost: Float,
    val supporting_documents: List<SupportingDocument>, // Use the data class here
    val user_id: Int = 1 // Hardcode user_id = 1 temporarily (backend requires this)
)

/**
 * Response model for certification creation
 * Expected from POST /certifications/apply endpoint
 */
data class CreateCertificationResponse(
    val message: String,
    val id: Int
)

/**
 * Response model for fetching user certifications
 * Expected from GET /certifications endpoint
 */
data class CertificationListResponse(
    val data: List<CertificationData>
)

/**
 * Response model for fetching single certification detail
 * Expected from GET /certifications/{id} endpoint
 */
data class CertificationDetailResponse(
    val data: CertificationData
)

/**
 * Request model for updating certification status (admin only)
 * Maps to PUT /certifications/{id}/status endpoint
 */
data class UpdateCertificationStatusRequest(
    val status: String // submitted, in_review, approved, rejected
)

/**
 * Response model for status update
 * Expected from PUT /certifications/{id}/status endpoint
 */
data class UpdateStatusResponse(
    val message: String
)

/**
 * Data model for certification in API responses
 */
data class CertificationData(
    val id: Int,
    val user_id: Int,
    val name: String,
    val description: String,
    val credential_body: String,
    val benefits: String,
    val cost: Float,
    val status: String, // submitted, in_review, approved, rejected
    val submission_date: String, // ISO 8601 format
    val supporting_documents: String // JSON string from server
) 

================================================================================

FILE 34: app\src\main\java\com\example\tumbuhnyata\data\model\CsrCategory.kt
Lines: 9 | Size: 179 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

import androidx.compose.ui.graphics.Color

data class CsrCategory(
    val name: String,
    val amount: Float,
    val color: Color
)


================================================================================

FILE 35: app\src\main\java\com\example\tumbuhnyata\data\model\CsrData.kt
Lines: 12 | Size: 279 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

data class CsrData(
    val programName: String,
    val category: String,
    val description: String,
    val location: String,
    val partnerName: String,
    val startDate: String,
    val endDate: String,
    val budget: String
)

================================================================================

FILE 36: app\src\main\java\com\example\tumbuhnyata\data\model\CsrHistoryItem.kt
Lines: 29 | Size: 787 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

import com.google.gson.annotations.SerializedName

data class CsrHistoryItem(
    val id: Int,
    @SerializedName("user_id")
    val userId: Int,
    @SerializedName("program_name")
    val programName: String,
    val category: String,
    val description: String,
    val location: String,
    @SerializedName("partner_name")
    val partnerName: String,
    @SerializedName("start_date")
    val startDate: String,
    @SerializedName("end_date")
    val endDate: String,
    val budget: String,
    @SerializedName("proposal_url")
    val proposalUrl: String?,
    @SerializedName("legality_url")
    val legalityUrl: String?,
    val agreed: Boolean,
    val status: String,
    @SerializedName("created_at")
    val createdAt: String
) 

================================================================================

FILE 37: app\src\main\java\com\example\tumbuhnyata\data\model\CsrReportModel.kt
Lines: 75 | Size: 2116 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

import com.google.gson.annotations.SerializedName

/**
 * Represents the overall API response when fetching CSR reports.
 * Assumes the API returns a list of reports战争pped in a common response structure.
 */
data class CsrReportApiResponse(
    @SerializedName("data") // Adjust if your API uses a different key for the list of reports
    val data: List<CsrReportModel>?,

    @SerializedName("message")
    val message: String?,

    @SerializedName("status_code") // Or "status", "success", etc., depending on your API
    val statusCode: Int? // Or String, Boolean, etc.
)

/**
 * Represents a single CSR Report item, mirroring the database schema provided.
 * This class is used for parsing the JSON response from the API.
 */
data class CsrReportModel(
    @SerializedName("id")
    val id: Int,

    @SerializedName("company_id")
    val companyId: Int,

    @SerializedName("year")
    val year: Int,

    @SerializedName("month")
    val month: Int?, // Allowed to be NULL in DB

    @SerializedName("carbon_value")
    val carbonValue: Float?, // Allowed to be NULL in DB

    @SerializedName("document_type")
    val documentType: String, // ENUM from DB, represented as String

    @SerializedName("document_name")
    val documentName: String?, // Allowed to be NULL in DB

    @SerializedName("document_path")
    val documentPath: String,

    @SerializedName("analysis")
    val analysis: String?, // Allowed to be NULL in DB

    @SerializedName("created_at")
    val createdAt: String // TIMESTAMP from DB, typically represented as ISO 8601 String
)

/**
 * Response wrapper for CSR submissions endpoint with pagination
 * Matches the actual backend response format:
 * {"success": true, "data": [...], "pagination": {...}}
 */
data class CsrSubmissionsResponse(
    val success: Boolean,
    val data: List<CsrReportModel>,
    val pagination: PaginationInfo
)

/**
 * Pagination information from submissions endpoint
 */
data class PaginationInfo(
    val currentPage: Int,
    val totalPages: Int,
    val totalItems: Int,
    val itemsPerPage: Int
) 

================================================================================

FILE 38: app\src\main\java\com\example\tumbuhnyata\data\model\CsrStatus.kt
Lines: 200 | Size: 6520 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

data class CsrItem(
    val title: String,
    val organization: String,
    val status: String,
    val subStatus: SubStatus,
    val category: String,
    val location: String,
    val period: String
)

fun getSubStatusEmoji(status: SubStatus): String {
    return when (status) {
        SubStatus.PROSES_REVIEW -> "🔍"
        SubStatus.MENUNGGU_PEMBAYARAN -> "💳"
        SubStatus.MEMERLUKAN_REVISI -> "📝"
        SubStatus.MENDATANG -> "📅"
        SubStatus.PROGRESS -> "⏳"
        SubStatus.SELESAI -> "✅"
    }
}

enum class SubStatus(val displayText: String, val colorHex: String) {
    PROSES_REVIEW("Proses Review", "#1E1E1E"),
    MENUNGGU_PEMBAYARAN("Menunggu Pembayaran", "#86FF8E"),
    MEMERLUKAN_REVISI("Memerlukan Revisi", "#FF7B7B"),
    MENDATANG("Akan Datang", "#9CDEFF"),
    PROGRESS("Sedang Berlangsung", "#FFD95D"),
    SELESAI("Program Selesai", "#989898")
}

val dummyCsrList = listOf(
    CsrItem(
        title = "Penanaman 1000 Pohon",
        organization = "Komunitas Jaya Hijau",
        status = "Proses Review",
        subStatus = SubStatus.PROSES_REVIEW,
        category = "Lingkungan",
        location = "Jakarta Timur",
        period = "12 Apr - 20 Jun 24"
    ),
    CsrItem(
        title = "Pembangunan Panti Sukamaju",
        organization = "Yayasan Asih Jaya",
        status = "Menunggu Pembayaran",
        subStatus = SubStatus.MENUNGGU_PEMBAYARAN,
        category = "Sosial",
        location = "Jakarta Raya",
        period = "1 Apr - 20 Jun 24"
    ),
    CsrItem(
        title = "Penghijauan Suaka Jateng",
        organization = "CV. Budi Raya",
        status = "Memerlukan Revisi",
        subStatus = SubStatus.MEMERLUKAN_REVISI,
        category = "Lingkungan",
        location = "Semarang, Jawa Tengah",
        period = "12 Mar - 20 Jun 24"
    ),
    CsrItem(
        title = "Penghijauan Hutan Kaltim",
        organization = "PT Hijau Sejati",
        status = "Akan Datang",
        subStatus = SubStatus.MENDATANG,
        category = "Lingkungan",
        location = "Kalimantan",
        period = "12 Mei - 20 Mei 25"
    ),
    CsrItem(
        title = "Beasiswa Yatim Jabar",
        organization = "Pemerintah Prov. Jabar",
        status = "Sedang Berlangsung",
        subStatus = SubStatus.PROGRESS,
        category = "Sosial",
        location = "Jawa Barat",
        period = "8 Mar - 10 Jun 25"
    ),
    CsrItem(
        title = "Donor Darah Paragon 2025",
        organization = "RS Bunda Mulia",
        status = "Sedang Berlangsung",
        subStatus = SubStatus.PROGRESS,
        category = "Sosial",
        location = "Jakarta Raya",
        period = "12 Jan - 2 Apr 25"
    ),
    CsrItem(
        title = "Penanaman Mangrove",
        organization = "Pemkot Kota Lombok",
        status = "Program Selesai",
        subStatus = SubStatus.SELESAI,
        category = "Lingkungan",
        location = "Lombok Barat, Lombok",
        period = "12 Mar - 20 Jun 24"
    ),
)

/**
 * Helper functions untuk kategori status CSR
 */
fun isPerluTindakanStatus(status: String): Boolean {
    return status in listOf("Proses Review", "Memerlukan Revisi", "Menunggu Pembayaran")
}

fun isDiterimaStatus(status: String): Boolean {
    return status in listOf("Akan Datang", "Sedang Berlangsung", "Program Selesai")
}

/**
 * Status constants untuk konsistensi
 */
object CsrStatusConstants {
    // Perlu Tindakan statuses
    const val PROSES_REVIEW = "Proses Review"
    const val MEMERLUKAN_REVISI = "Memerlukan Revisi" 
    const val MENUNGGU_PEMBAYARAN = "Menunggu Pembayaran"
    
    // Diterima statuses
    const val AKAN_DATANG = "Akan Datang"
    const val SEDANG_BERLANGSUNG = "Sedang Berlangsung"
    const val PROGRAM_SELESAI = "Program Selesai"
    
    val PERLU_TINDAKAN_STATUSES = listOf(PROSES_REVIEW, MEMERLUKAN_REVISI, MENUNGGU_PEMBAYARAN)
    val DITERIMA_STATUSES = listOf(AKAN_DATANG, SEDANG_BERLANGSUNG, PROGRAM_SELESAI)
    val ALL_STATUSES = PERLU_TINDAKAN_STATUSES + DITERIMA_STATUSES
}

/**
 * Normalisasi status input - jika tidak sesuai dengan 6 status valid, default ke "Proses Review"
 */
fun normalizeStatus(inputStatus: String): String {
    val normalizedInput = inputStatus.trim()
    
    // Cek apakah status sudah valid (case-insensitive)
    val validStatus = CsrStatusConstants.ALL_STATUSES.find { 
        it.equals(normalizedInput, ignoreCase = true) 
    }
    
    return if (validStatus != null) {
        validStatus // Return proper case version
    } else {
        // Log status yang tidak dikenal untuk debugging
        android.util.Log.w("CsrStatus", "Unknown status '$inputStatus' normalized to '${CsrStatusConstants.PROSES_REVIEW}'")
        CsrStatusConstants.PROSES_REVIEW
    }
}

/**
 * Convert status ke SubStatus enum dengan fallback
 */
fun statusToSubStatus(status: String): SubStatus {
    val normalizedStatus = normalizeStatus(status)
    
    return when (normalizedStatus.lowercase().trim()) {
        "proses review" -> SubStatus.PROSES_REVIEW
        "memerlukan revisi" -> SubStatus.MEMERLUKAN_REVISI
        "menunggu pembayaran" -> SubStatus.MENUNGGU_PEMBAYARAN
        "akan datang" -> SubStatus.MENDATANG
        "sedang berlangsung" -> SubStatus.PROGRESS
        "program selesai" -> SubStatus.SELESAI
        else -> SubStatus.PROSES_REVIEW
    }
}

/**
 * Test examples untuk status normalization:
 * 
 * Input: "proses review" → Output: "Proses Review"
 * Input: "AKAN DATANG" → Output: "Akan Datang"
 * Input: "invalid status" → Output: "Proses Review"
 * Input: "  sedang berlangsung  " → Output: "Sedang Berlangsung"
 * Input: "review" → Output: "Proses Review"
 * Input: "" → Output: "Proses Review"
 */

fun getDummyTimelineData(status: String): List<TimelineItem> {
    return listOf(
        TimelineItem(
            title = "Pengajuan Dikirim",
            timestamp = "10/05/2024 - 09:41 WIB",
            isCompleted = true
        ),
        TimelineItem(
            title = "Review & Evaluasi",
            timestamp = "10/05/2024 - 09:50 WIB",
            isCompleted = isDiterimaStatus(status),
            isInProgress = isPerluTindakanStatus(status)
        ),
        TimelineItem(
            title = "Pembayaran",
            timestamp = "10/05/2024 - 10:00 WIB",
            isCompleted = status in listOf("Sedang Berlangsung", "Program Selesai")
        ),
        TimelineItem(
            title = "Implementasi Program",
            isCompleted = status == "Program Selesai"
        )
    )
}

================================================================================

FILE 39: app\src\main\java\com\example\tumbuhnyata\data\model\DashboardDataResponse.kt
Lines: 187 | Size: 4448 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

import com.google.gson.annotations.SerializedName

/**
 * Represents the overall API response from the /dashboard endpoint.
 */
data class DashboardDataResponse(
    @SerializedName("success")
    val success: Boolean?,

    @SerializedName("data")
    val data: DashboardData?,

    @SerializedName("message")
    val message: String?,

    @SerializedName("error")
    val error: String?
)

/**
 * Contains the main data structure for the dashboard.
 */
data class DashboardData(
    @SerializedName("analytics")
    val analytics: AnalyticsData?,

    @SerializedName("recentSubmissions")
    val recentSubmissions: List<CsrReportModel>?, // Menggunakan CsrReportModel yang sudah ada

    @SerializedName("summary")
    val summary: SummaryData?
)

/**
 * Represents analytics data, including monthly carbon data and total stats.
 */
data class AnalyticsData(
    @SerializedName("year")
    val year: Int?,

    @SerializedName("monthlyData")
    val monthlyData: List<MonthlyCarbonData>?,

    @SerializedName("totalStats")
    val totalStats: TotalStats?
)

/**
 * Represents carbon data for a specific month.
 */
data class MonthlyCarbonData(
    @SerializedName("month")
    val month: Int?,

    @SerializedName("carbon_value") // Sesuai output backend: "carbon_value"
    val carbonValue: Float?
)

/**
 * Represents total statistics for carbon submissions.
 */
data class TotalStats(
    @SerializedName("totalCarbon")
    val totalCarbon: Float?,

    @SerializedName("totalSubmissions")
    val totalSubmissions: Int?
)

/**
 * Represents summary data for the dashboard.
 */
data class SummaryData(
    @SerializedName("currentYearTotal")
    val currentYearTotal: Float?,

    @SerializedName("submissionCount")
    val submissionCount: Int?,

    @SerializedName("lastUpdated")
    val lastUpdated: String? // String representation of a Date
)

// CsrReportModel.kt (yang sudah ada) akan digunakan untuk recentSubmissions
// Jika CsrReportModel belum ada atau berbeda, definisikan di sini atau di file terpisah:
// data class CsrReportModel(
//    @SerializedName("id") val id: Int?,
//    @SerializedName("company_id") val companyId: Int?,
//    @SerializedName("year") val year: Int?,
//    @SerializedName("month") val month: Int?,
//    @SerializedName("carbon_value") val carbonValue: Float?,
//    @SerializedName("document_type") val documentType: String?,
//    @SerializedName("document_name") val documentName: String?,
//    @SerializedName("document_path") val documentPath: String?,
//    @SerializedName("analysis") val analysis: String?,
//    @SerializedName("created_at") val createdAt: String?
// ) 

/**
 * Model untuk response KPI Detail dari backend
 */
data class KpiDetailResponse(
    @SerializedName("success")
    val success: Boolean?,

    @SerializedName("data")
    val data: KpiDetailData?,

    @SerializedName("message")
    val message: String?,

    @SerializedName("error")
    val error: String?
)

/**
 * Data untuk detail KPI tertentu
 */
data class KpiDetailData(
    @SerializedName("kpi_type")
    val kpiType: String?, // carbon_footprint, energy_usage, etc.

    @SerializedName("title")
    val title: String?,

    @SerializedName("unit")
    val unit: String?,

    @SerializedName("yearly_data")
    val yearlyData: List<MonthlyKpiData>?, // Data per bulan dalam tahun

    @SerializedName("multi_year_data")
    val multiYearData: List<YearlyKpiData>?, // Data per tahun untuk 5 tahun

    @SerializedName("statistics")
    val statistics: KpiStatistics?,

    @SerializedName("analysis")
    val analysis: String?
)

/**
 * Data KPI per bulan
 */
data class MonthlyKpiData(
    @SerializedName("month")
    val month: Int?,

    @SerializedName("value")
    val value: Float?,

    @SerializedName("submission_count")
    val submissionCount: Int? // Jumlah submission dalam bulan ini
)

/**
 * Data KPI per tahun
 */
data class YearlyKpiData(
    @SerializedName("year")
    val year: Int?,

    @SerializedName("total_value")
    val totalValue: Float?,

    @SerializedName("submission_count")
    val submissionCount: Int?
)

/**
 * Statistik untuk KPI
 */
data class KpiStatistics(
    @SerializedName("average_value")
    val averageValue: Float?,

    @SerializedName("min_value")
    val minValue: Float?,

    @SerializedName("max_value")
    val maxValue: Float?,

    @SerializedName("total_value")
    val totalValue: Float?
) 

================================================================================

FILE 40: app\src\main\java\com\example\tumbuhnyata\data\model\LoginRequest.kt
Lines: 6 | Size: 117 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

data class LoginRequest(
    val NIB: String,
    val password: String
)


================================================================================

FILE 41: app\src\main\java\com\example\tumbuhnyata\data\model\LoginResponse.kt
Lines: 5 | Size: 95 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

data class LoginResponse(
    val token: String,
)


================================================================================

FILE 42: app\src\main\java\com\example\tumbuhnyata\data\model\Notification.kt
Lines: 25 | Size: 512 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

import com.google.gson.annotations.SerializedName

data class Notification(
    @SerializedName("id")
    val id: Int,
    
    @SerializedName("user_id")
    val userId: String,
    
    @SerializedName("title")
    val title: String,
    
    @SerializedName("message")
    val message: String,
    
    @SerializedName("is_read")
    val isRead: Int,
    
    @SerializedName("created_at")
    val createdAt: String
) {
    fun isReadBool(): Boolean = isRead > 0
} 

================================================================================

FILE 43: app\src\main\java\com\example\tumbuhnyata\data\model\Profile.kt
Lines: 28 | Size: 558 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

import com.google.gson.annotations.SerializedName

data class Profile(
    @SerializedName("id_perusahaan")
    val id: Int,
    
    @SerializedName("nama_perusahaan")
    val companyName: String,
    
    @SerializedName("email")
    val email: String,
    
    @SerializedName("no_telp")
    val phoneNumber: String,
    
    @SerializedName("NIB")
    val nib: String,
    
    @SerializedName("alamat")
    val address: String
)

data class ProfileResponse(
    @SerializedName("data")
    val data: Profile
)

================================================================================

FILE 44: app\src\main\java\com\example\tumbuhnyata\data\model\RegisterRequest.kt
Lines: 10 | Size: 226 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

data class RegisterRequest(
    val companyName: String,
    val email: String,
    val password: String,
    val phoneNumber: String,
    val NIB: String,
    val address: String
) 

================================================================================

FILE 45: app\src\main\java\com\example\tumbuhnyata\data\model\RegisterResponse.kt
Lines: 5 | Size: 99 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

data class RegisterResponse(
    val message: String
) 

================================================================================

FILE 46: app\src\main\java\com\example\tumbuhnyata\data\model\RegisterWorkshop.kt
Lines: 7 | Size: 155 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

data class RegisterWorkshop(
    val workshop_id: String,
    val company_name: String,
    val email: String
)

================================================================================

FILE 47: app\src\main\java\com\example\tumbuhnyata\data\model\SyncModels.kt
Lines: 76 | Size: 1764 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

/**
 * Request model for creating individual submissions
 * Maps to POST /carbon-submissions endpoint
 */
data class CreateSubmissionRequest(
    val company_id: String,
    val year: Int,
    val month: Int?,
    val carbon_value: Float,
    val document_type: String,
    val document_name: String,
    val document_path: String?,
    val analysis: String?
)

/**
 * Request model for updating individual submissions  
 * Maps to PUT /carbon-submissions/{id} endpoint
 */
data class UpdateSubmissionRequest(
    val company_id: String,
    val year: Int,
    val month: Int?,
    val carbon_value: Float,
    val document_type: String,
    val document_name: String,
    val document_path: String?,
    val analysis: String?
)

/**
 * Response model for submission creation
 * Expected from POST /carbon-submissions endpoint
 */
data class CreateSubmissionResponse(
    val success: Boolean,
    val message: String,
    val data: SubmissionData?
)

/**
 * Response model for submission updates
 * Expected from PUT /carbon-submissions/{id} endpoint
 */
data class UpdateSubmissionResponse(
    val success: Boolean,
    val message: String,
    val data: SubmissionData?
)

/**
 * Response model for submission deletion
 * Expected from DELETE /carbon-submissions/{id} endpoint
 */
data class DeleteSubmissionResponse(
    val success: Boolean,
    val message: String
)

/**
 * Data model for submission in API responses
 */
data class SubmissionData(
    val id: Int,
    val company_id: String,
    val year: Int,
    val month: Int?,
    val carbon_value: Float,
    val document_type: String,
    val document_name: String,
    val document_path: String?,
    val analysis: String?,
    val created_at: String
) 

================================================================================

FILE 48: app\src\main\java\com\example\tumbuhnyata\data\model\TimelineItem.kt
Lines: 8 | Size: 201 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

data class TimelineItem(
    val title: String,
    val timestamp: String = "",
    val isCompleted: Boolean = false,
    val isInProgress: Boolean = false
)

================================================================================

FILE 49: app\src\main\java\com\example\tumbuhnyata\data\model\UploadResponse.kt
Lines: 13 | Size: 516 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

/**
 * Response model for file upload API.
 * Represents the response from the /carbon-submissions/upload-csv endpoint.
 */
data class UploadResponse(
    val success: Boolean,
    val message: String,
    val submissionId: String? = null, // Optional submission ID if upload creates a new submission
    val processedRecords: Int? = null, // Number of records processed from the CSV
    val errors: List<String>? = null // Any validation errors from the CSV processing
) 

================================================================================

FILE 50: app\src\main\java\com\example\tumbuhnyata\data\model\Workshop.kt
Lines: 162 | Size: 5573 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

import com.example.tumbuhnyata.R

data class Workshop(
    val id: String,
    val title: String,
    val speaker: String,
    val date: String,
    val imageRes: Int,
    val isOnline: Boolean,
    val tanggal: String,
    val materi: List<String>,
    val biaya: Int,
    val deskripsi: String
)

val recommendedWorkshops = listOf(
    Workshop(
        id = "1",
        title = "Sustainability Reporting 101",
        speaker = "Dr. Andi Wijaya",
        date = "10 April 2025",
        imageRes = R.drawable.work1,
        isOnline = false,
        tanggal = "10 – 11 April 2025",
        materi = listOf(
            "Prinsip dasar sustainability reporting",
            "Implementasi GRI Standards",
            "Teknik pengukuran dampak sosial dan lingkungan",
            "Studi kasus perusahaan terkemuka"
        ),
        biaya = 1500000,
        deskripsi = "Pelajari cara menyusun laporan keberlanjutan sesuai standar GRI, ISO 26000, dan SDG Reporting..."
    ),
    Workshop(
        id = "2",
        title = "Green Supply Chain Management",
        speaker = "Ir. Rina Putri, M.Sc",
        date = "15 Mei 2025",
        imageRes = R.drawable.work2,
        isOnline = true,
        tanggal = "15 – 16 Mei 2025",
        materi = listOf(
            "Konsep dasar dan evolusi CSR",
            "Peran CSR dalam pembangunan berkelanjutan",
            "Strategi pelibatan pemangku kepentingan",
            "Evaluasi dan pelaporan dampak CSR"
        ),
        biaya = 1200000,
        deskripsi = "Pelatihan mendalam untuk menyusun strategi Corporate Social Responsibility (CSR) yang berdampak jangka panjang."
    ),
    Workshop(
        id = "3",
        title = "Implementasi ISO 26000 dalam CSR",
        speaker = "Dwi Kurniawati, S.E., M.BA",
        date = "5 Juni 2025",
        imageRes = R.drawable.work3,
        isOnline = false,
        tanggal = "5 – 6 Juni 2025",
        materi = listOf(
            "Fundamental digital marketing",
            "Social media campaign & analytics",
            "Content creation dengan tujuan sosial",
            "Studi kasus brand berdampak"
        ),
        biaya = 1000000,
        deskripsi = "Belajar strategi pemasaran digital untuk memperluas jangkauan dampak sosial organisasi dan startup."
    ),
    Workshop(
        id = "4",
        title = "Strategi CSR untuk Industri Manufaktur",
        speaker = "Budi Setiawan, Ph.D",
        date = "25 Mei 2025",
        imageRes = R.drawable.work4,
        isOnline = false,
        tanggal = "25 – 26 Mei 2025",
        materi = listOf(
            "Tahapan Design Thinking",
            "Empati terhadap pengguna",
            "Ideation dan prototyping",
            "Menguji dan memvalidasi solusi"
        ),
        biaya = 1300000,
        deskripsi = "Pelajari proses Design Thinking untuk menciptakan solusi inovatif terhadap masalah sosial."
    ),
    Workshop(
        id = "5",
        title = "Mengukur Dampak CSR dengan SROI",
        speaker = "Ratna Dewi, S.Stat",
        date = "18 Juni 2025",
        imageRes = R.drawable.work5,
        isOnline = true,
        tanggal = "18 – 19 Juni 2025",
        materi = listOf(
            "Siklus proyek sosial",
            "Perencanaan dan anggaran",
            "Manajemen risiko",
            "Monitoring dan evaluasi"
        ),
        biaya = 1400000,
        deskripsi = "Workshop ini membantu peserta dalam merancang, mengelola, dan mengevaluasi proyek sosial yang berkelanjutan."
    ),
    Workshop(
        id = "6",
        title = "Penyusunan Program CSR Berkelanjutan",
        speaker = "Hendra Wijaya, M.Soc.Sc",
        date = "12 Sep 2025",
        imageRes = R.drawable.work6,
        isOnline = false,
        tanggal = "12 – 13 September 2025",
        materi = listOf(
            "Teori Perubahan (Theory of Change)",
            "KPI dan indikator dampak",
            "SROI dan metode pengukuran lainnya",
            "Pelaporan berbasis hasil"
        ),
        biaya = 1600000,
        deskripsi = "Kuasai alat dan pendekatan untuk mengukur hasil dan dampak program sosial dan keberlanjutan."
    )
)

val recentWorkshops = listOf(
    recommendedWorkshops[4],
    recommendedWorkshops[5],
    Workshop(
        id = "7",
        title = "Net Zero & Carbon Offset dalam CSR",
        speaker = "Rizky Alamsyah, M.Env",
        date = "2 Agu 2025",
        imageRes = R.drawable.work7,
        isOnline = true,
        tanggal = "2 – 4 Agustus 2025",
        materi = listOf(
            "Dasar-dasar public speaking",
            "Storytelling untuk advokasi",
            "Menghadapi audiens beragam",
            "Praktik presentasi berdampak"
        ),
        biaya = 900000,
        deskripsi = "Kembangkan kemampuan komunikasi publik untuk menyampaikan pesan perubahan sosial secara persuasif."
    ),
    Workshop(
        id = "8",
        title = "Komunikasi Publik untuk CSR Branding",
        speaker = "Siti Amalia, S.I.Kom",
        date = "12 Sep 2025",
        imageRes = R.drawable.work8,
        isOnline = false,
        tanggal = "12 – 13 September 2025",
        materi = listOf(
            "Jenis-jenis pendanaan sosial",
            "Cara membuat proposal proyek",
            "Teknik pitching yang meyakinkan",
            "Simulasi presentasi ke investor"
        ),
        biaya = 1100000,
        deskripsi = "Pelajari strategi mendapatkan pendanaan untuk inisiatif sosial, termasuk pembuatan proposal dan pitching."
    ),
    recommendedWorkshops[0],
    recommendedWorkshops[1]
)


================================================================================

FILE 51: app\src\main\java\com\example\tumbuhnyata\data\model\WorkshopHistoryResponse.kt
Lines: 9 | Size: 205 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.model

data class WorkshopHistoryResponse(
    val id: String,
    val workshopId: String,
    val companyName: String,
    val email: String,
    val timestamp: Long
)

================================================================================

FILE 52: app\src\main\java\com\example\tumbuhnyata\data\network\AuthInterceptor.kt
Lines: 35 | Size: 1388 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.network

import android.content.Context
import com.example.tumbuhnyata.util.TokenManager
import okhttp3.Interceptor
import okhttp3.Response

class AuthInterceptor(private val context: Context) : Interceptor {
    override fun intercept(chain: Interceptor.Chain): Response {
        val requestBuilder = chain.request().newBuilder()
        val token = TokenManager.getToken(context)
        
        println("AuthInterceptor: === TOKEN DEBUG ===")
        println("AuthInterceptor: Token retrieved: ${if (token != null) "Present (${token.take(20)}...)" else "NULL"}")
        
        token?.let {
            println("AuthInterceptor: Adding Authorization header: Bearer ${it.take(20)}...")
            requestBuilder.addHeader("Authorization", "Bearer $it")
        } ?: run {
            println("AuthInterceptor: ⚠️ NO TOKEN FOUND - Request will be sent without authorization")
        }
        
        val request = requestBuilder.build()
        println("AuthInterceptor: Request headers:")
        request.headers.forEach { (name, value) ->
            if (name.equals("Authorization", ignoreCase = true)) {
                println("AuthInterceptor:   $name: ${value.take(30)}...")
            } else {
                println("AuthInterceptor:   $name: $value")
            }
        }
        
        return chain.proceed(request)
    }
} 

================================================================================

FILE 53: app\src\main\java\com\example\tumbuhnyata\data\network\RetrofitInstance.kt
Lines: 80 | Size: 2870 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.network

import android.content.Context
import com.example.tumbuhnyata.data.api.AuthApi
import com.example.tumbuhnyata.data.api.DashboardApiService
import com.example.tumbuhnyata.data.api.CertificationApiService
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.util.concurrent.TimeUnit

object RetrofitInstance {
    private val loggingInterceptor = HttpLoggingInterceptor().apply {
        level = HttpLoggingInterceptor.Level.BODY
    }

    private fun createClientWithAuth(context: Context): OkHttpClient {
        return OkHttpClient.Builder()
            .addInterceptor(AuthInterceptor(context))
            .addInterceptor(loggingInterceptor)
            .connectTimeout(60, TimeUnit.SECONDS)
            .readTimeout(60, TimeUnit.SECONDS)
            .writeTimeout(60, TimeUnit.SECONDS)
            .build()
    }

    private val client = OkHttpClient.Builder()
        .addInterceptor(loggingInterceptor)
        .connectTimeout(60, TimeUnit.SECONDS)
        .readTimeout(60, TimeUnit.SECONDS)
        .writeTimeout(60, TimeUnit.SECONDS)
        .build()

    val api: AuthApi by lazy {
        Retrofit.Builder()
            .baseUrl("http://10.0.2.2:5000")
            .client(client)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(AuthApi::class.java)
    }

    val dashboardApi: DashboardApiService by lazy {
        Retrofit.Builder()
            .baseUrl("http://10.0.2.2:5000")
            .client(client)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(DashboardApiService::class.java)
    }

    // NEW: Certification API WITHOUT authentication (like dashboard)
    val certificationApiNoAuth: CertificationApiService by lazy {
        Retrofit.Builder()
            .baseUrl("http://10.0.2.2:5000")
            .client(client) // Uses client WITHOUT AuthInterceptor
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(CertificationApiService::class.java)
    }

    fun createCertificationApi(context: Context): CertificationApiService {
        return Retrofit.Builder()
            .baseUrl("http://10.0.2.2:5000")
            .client(createClientWithAuth(context))
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(CertificationApiService::class.java)
    }

    val certificationApi: CertificationApiService by lazy {
        Retrofit.Builder()
            .baseUrl("http://10.0.2.2:5000")
            .client(client)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(CertificationApiService::class.java)
    }
}


================================================================================

FILE 54: app\src\main\java\com\example\tumbuhnyata\data\repository\CertificationRepository.kt
Lines: 407 | Size: 19242 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.repository

import android.content.Context
import com.example.tumbuhnyata.data.api.CertificationApiService
import com.example.tumbuhnyata.data.local.dao.CertificationDao
import com.example.tumbuhnyata.data.local.entity.CertificationEntity
import com.example.tumbuhnyata.data.mapper.toCreateRequest
import com.example.tumbuhnyata.data.mapper.toEntity
import com.example.tumbuhnyata.data.mapper.createOfflineCertificationEntity
import com.example.tumbuhnyata.util.NetworkConnectivityUtil
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.CancellationException
import kotlinx.coroutines.delay
import java.io.IOException

// Resource wrapper for handling states
sealed class CertificationResource<T>(val data: T? = null, val message: String? = null) {
    class Success<T>(data: T) : CertificationResource<T>(data)
    class Error<T>(message: String, data: T? = null) : CertificationResource<T>(data, message)
    class Loading<T>(data: T? = null) : CertificationResource<T>(data)
}

class CertificationRepository(
    private val certificationApiService: CertificationApiService,
    private val certificationDao: CertificationDao,
    private val context: Context
) {
    
    // Expose DAO for direct operations if needed
    fun getCertificationDao(): CertificationDao = certificationDao

    /**
     * Gets all certifications using SSOT pattern
     * Returns cached data immediately, then updates from server if online
     */
    fun getAllCertifications(): Flow<CertificationResource<List<CertificationEntity>>> = flow {
        try {
            // STEP 1: Emit local data immediately (SSOT)
            val localCertifications = certificationDao.getAllCertifications()
            localCertifications.collect { localData ->
                if (localData.isNotEmpty()) {
                    println("CertificationRepository: Emitting ${localData.size} local certifications")
                    emit(CertificationResource.Success(localData))
                } else {
                    println("CertificationRepository: No local certifications found")
                    emit(CertificationResource.Loading())
                }
            }
            
            // STEP 2: Try to refresh from server if online
            if (NetworkConnectivityUtil.isOnline(context)) {
                println("CertificationRepository: Device online, refreshing from server...")
                refreshCertificationsCache()
            } else {
                println("CertificationRepository: Device offline, using cached data only")
            }
            
        } catch (e: Exception) {
            println("CertificationRepository: Error in getAllCertifications: ${e.message}")
            emit(CertificationResource.Error("Failed to load certifications: ${e.message}"))
        }
    }

    /**
     * Submits a new certification application
     * Handles both online and offline scenarios
     */
    suspend fun submitCertification(
        name: String,
        description: String,
        credentialBody: String,
        benefits: String,
        cost: Float,
        supportingDocuments: List<String>
    ): CertificationResource<Long> {
        return try {
            println("CertificationRepository: === SUBMITTING CERTIFICATION ===")
            println("CertificationRepository: Name: $name")
            println("CertificationRepository: Credential Body: $credentialBody")
            println("CertificationRepository: Cost: $cost")
            println("CertificationRepository: Supporting Documents: $supportingDocuments")
            
            // Create offline entity first (ensures data is saved locally)
            val offlineEntity = createOfflineCertificationEntity(
                name = name,
                description = description,
                credentialBody = credentialBody,
                benefits = benefits,
                cost = cost,
                supportingDocuments = supportingDocuments
            )
            
            // Insert into local database immediately
            val localId = certificationDao.insertCertification(offlineEntity)
            println("CertificationRepository: Saved locally with ID: $localId")
            
            // Try to sync to server if online
            if (NetworkConnectivityUtil.isOnline(context)) {
                println("CertificationRepository: Device online, attempting immediate sync...")
                val syncSuccess = syncSingleCertification(offlineEntity.copy(id = localId.toInt()))
                
                if (syncSuccess) {
                    println("CertificationRepository: ✅ Successfully submitted and synced to server")
                    CertificationResource.Success(localId)
                } else {
                    println("CertificationRepository: ⚠️ Saved locally but failed to sync to server")
                    CertificationResource.Success(localId) // Still success - data is saved
                }
            } else {
                println("CertificationRepository: Device offline, will sync when online")
                CertificationResource.Success(localId)
            }
            
        } catch (e: Exception) {
            println("CertificationRepository: Error submitting certification: ${e.message}")
            e.printStackTrace()
            CertificationResource.Error("Failed to submit certification: ${e.message}")
        }
    }

    /**
     * Syncs all unsynced certifications to server
     * Called periodically or when user manually syncs
     */
    suspend fun syncUnsyncedCertifications(): CertificationResource<Int> {
        if (!NetworkConnectivityUtil.isOnline(context)) {
            println("CertificationRepository: Device is offline, cannot sync")
            return CertificationResource.Error("Device is offline, cannot sync")
        }

        return try {
            val unsyncedCertifications = certificationDao.getUnsyncedCertifications()
            println("CertificationRepository: === STARTING CERTIFICATION SYNC ===")
            println("CertificationRepository: Found ${unsyncedCertifications.size} unsynced certifications")
            
            if (unsyncedCertifications.isEmpty()) {
                println("CertificationRepository: No unsynced certifications found")
                return CertificationResource.Success(0)
            }
            
            var syncedCount = 0
            var errorCount = 0
            val syncErrors = mutableListOf<String>()
            
            // Process each unsynced certification
            for ((index, certification) in unsyncedCertifications.withIndex()) {
                try {
                    println("CertificationRepository: [${index + 1}/${unsyncedCertifications.size}] Syncing certification:")
                    println("  - ID: ${certification.id}")
                    println("  - LocalID: ${certification.localId}")
                    println("  - Name: ${certification.name}")
                    println("  - Status: ${certification.status}")
                    println("  - isLocalOnly: ${certification.isLocalOnly}")
                    println("  - isSynced: ${certification.isSynced}")
                    println("  - Retry Count: ${certification.syncRetryCount}")
                    
                    val success = syncSingleCertification(certification)
                    if (success) {
                        syncedCount++
                        println("  ✓ Successfully synced certification")
                    } else {
                        errorCount++
                        syncErrors.add("Failed to sync certification: ${certification.name}")
                        println("  ✗ Failed to sync certification")
                        
                        // Increment retry count for failed items
                        val newRetryCount = certification.syncRetryCount + 1
                        certificationDao.updateSyncStatus(certification.id, false, newRetryCount)
                    }
                    
                } catch (e: Exception) {
                    println("  ✗ Exception during certification sync: ${e.message}")
                    e.printStackTrace()
                    errorCount++
                    syncErrors.add("Exception syncing ${certification.name}: ${e.message}")
                    
                    // Increment retry count for failed items
                    val newRetryCount = certification.syncRetryCount + 1
                    certificationDao.updateSyncStatus(certification.id, false, newRetryCount)
                }
            }
            
            println("CertificationRepository: === CERTIFICATION SYNC COMPLETED ===")
            println("CertificationRepository: Total Certifications: ${unsyncedCertifications.size}")
            println("CertificationRepository: Successfully Synced: $syncedCount")
            println("CertificationRepository: Failed: $errorCount")
            
            when {
                errorCount == 0 -> {
                    CertificationResource.Success(syncedCount)
                }
                syncedCount > 0 -> {
                    CertificationResource.Error("Partially synced: $syncedCount success, $errorCount failed", syncedCount)
                }
                else -> {
                    CertificationResource.Error("All sync attempts failed: ${syncErrors.firstOrNull() ?: "Unknown error"}")
                }
            }
            
        } catch (e: Exception) {
            println("CertificationRepository: Critical certification sync failure: ${e.message}")
            e.printStackTrace()
            CertificationResource.Error("Certification sync failed: ${e.message}")
        }
    }

    /**
     * Syncs a single certification to server
     */
    private suspend fun syncSingleCertification(certification: CertificationEntity): Boolean {
        return try {
            if (certification.localId.isNullOrEmpty()) {
                println("CertificationRepository: ERROR - localId is null for certification!")
                return false
            }
            
            println("CertificationRepository: Applying certification to server (NO AUTH + user_id=1)...")
            val createRequest = certification.toCreateRequest()
            println("CertificationRepository: Request payload: $createRequest")
            println("CertificationRepository: ✅ user_id in request: ${createRequest.user_id}")
            println("CertificationRepository: ✅ Using certificationApiService: ${certificationApiService.javaClass.simpleName}")
            
            val response = certificationApiService.applyCertification(createRequest)
            println("CertificationRepository: Apply response code: ${response.code()}")
            
            when {
                response.isSuccessful -> {
                    val responseBody = response.body()
                    println("CertificationRepository: Apply response body: $responseBody")
                    
                    if (responseBody?.id != null && responseBody.id > 0) {
                        val serverId = responseBody.id
                        println("CertificationRepository: Server returned ID: $serverId")
                        
                        // Update local record with server ID and mark as synced
                        certificationDao.updateSyncStatusByLocalId(
                            localId = certification.localId!!,
                            isSynced = true,
                            serverId = serverId
                        )
                        
                        println("CertificationRepository: ✅ Successfully updated local record with server ID: $serverId")
                        true
                    } else {
                        println("CertificationRepository: ✗ Server response missing valid ID")
                        false
                    }
                }
                response.code() == 401 -> {
                    println("CertificationRepository: ✗ Unauthorized - authentication token may have expired")
                    false
                }
                response.code() == 400 -> {
                    val errorBody = response.errorBody()?.string()
                    println("CertificationRepository: ✗ Bad request - validation failed: $errorBody")
                    false
                }
                else -> {
                    val errorBody = response.errorBody()?.string()
                    println("CertificationRepository: ✗ API error ${response.code()}: $errorBody")
                    false
                }
            }
            
        } catch (e: IOException) {
            println("CertificationRepository: ✗ Network error during certification sync: ${e.message}")
            false
        } catch (e: Exception) {
            println("CertificationRepository: ✗ Unexpected error during certification sync: ${e.message}")
            e.printStackTrace()
            false
        }
    }

    /**
     * Refreshes certifications cache from server
     */
    suspend fun refreshCertificationsCache() {
        if (!NetworkConnectivityUtil.isOnline(context)) {
            println("CertificationRepository: Cannot refresh cache - device offline")
            return
        }
        
        try {
            // STEP 1: Sync unsynced data first
            println("CertificationRepository: Syncing unsynced certifications before cache refresh...")
            val syncResult = syncUnsyncedCertifications()
            when (syncResult) {
                is CertificationResource.Success -> {
                    println("CertificationRepository: Successfully synced ${syncResult.data} unsynced certifications")
                }
                is CertificationResource.Error -> {
                    println("CertificationRepository: Sync had errors: ${syncResult.message}")
                }
                is CertificationResource.Loading -> {
                    println("CertificationRepository: Sync is loading")
                }
            }
            
            // STEP 2: Get unsynced data to preserve
            val unsyncedData = certificationDao.getUnsyncedCertifications()
            println("CertificationRepository: Found ${unsyncedData.size} remaining unsynced certifications to preserve")
            
            // STEP 3: Refresh from API with hardcoded user_id = 1
            println("CertificationRepository: Refreshing certifications cache...")
            val response = certificationApiService.getUserCertifications(userId = 1)
            println("CertificationRepository: Cache refresh API call completed with code: ${response.code()}")
            
            if (response.isSuccessful) {
                response.body()?.let { certificationListResponse ->
                    val certifications = certificationListResponse.data
                    println("CertificationRepository: Success! Got ${certifications.size} certifications from API")
                    
                    // STEP 4: Clear only synced data, preserve unsynced
                    certificationDao.clearSyncedCertifications()
                    
                    // STEP 5: Insert fresh API data
                    val entities = certifications.map { it.toEntity() }
                    certificationDao.insertOrUpdateCertifications(entities)
                    println("CertificationRepository: Inserted ${entities.size} fresh API certifications")
                    
                    // STEP 6: Re-insert preserved unsynced data
                    unsyncedData.forEach { unsyncedEntity ->
                        try {
                            certificationDao.insertCertification(unsyncedEntity)
                            println("CertificationRepository: Preserved unsynced certification ${unsyncedEntity.localId}")
                        } catch (e: Exception) {
                            println("CertificationRepository: Conflict inserting unsynced certification: ${e.message}")
                        }
                    }
                    
                    println("CertificationRepository: Successfully cached ${entities.size} API certifications + ${unsyncedData.size} unsynced")
                } ?: run {
                    println("CertificationRepository: Response body was null for certifications refresh")
                }
            } else {
                val errorBody = response.errorBody()?.string()
                println("CertificationRepository: Failed to refresh cache. Code: ${response.code()}, Error: $errorBody")
            }
            
        } catch (e: Exception) {
            println("CertificationRepository: Exception during cache refresh: ${e.message}")
            e.printStackTrace()
        }
    }

    /**
     * Gets certification by ID
     */
    fun getCertificationById(certificationId: Int): Flow<CertificationResource<CertificationEntity?>> = flow {
        try {
            // Emit local data
            certificationDao.getCertificationById(certificationId).collect { localData ->
                emit(CertificationResource.Success(localData))
            }
            
        } catch (e: Exception) {
            println("CertificationRepository: Error getting certification by ID: ${e.message}")
            emit(CertificationResource.Error("Failed to load certification: ${e.message}"))
        }
    }

    /**
     * Gets certifications by status
     */
    fun getCertificationsByStatus(status: String): Flow<CertificationResource<List<CertificationEntity>>> = flow {
        try {
            certificationDao.getCertificationsByStatus(status).collect { localData ->
                emit(CertificationResource.Success(localData))
            }
            
        } catch (e: Exception) {
            println("CertificationRepository: Error getting certifications by status: ${e.message}")
            emit(CertificationResource.Error("Failed to load certifications: ${e.message}"))
        }
    }

    /**
     * Starts periodic sync (call from ViewModel or Application)
     */
    suspend fun startPeriodicSync() {
        println("CertificationRepository: Starting periodic certification sync...")
        
        while (true) {
            try {
                if (NetworkConnectivityUtil.isOnline(context)) {
                    println("CertificationRepository: Running periodic sync...")
                    syncUnsyncedCertifications()
                    refreshCertificationsCache()
                }
                
                // Wait 30 seconds before next sync attempt
                delay(30000)
                
            } catch (e: CancellationException) {
                println("CertificationRepository: Periodic sync cancelled")
                break
            } catch (e: Exception) {
                println("CertificationRepository: Error in periodic sync: ${e.message}")
                // Wait 30 seconds before retry on error
                delay(30000)
            }
        }
    }
} 

================================================================================

FILE 55: app\src\main\java\com\example\tumbuhnyata\data\repository\CsrDraftRepository.kt
Lines: 39 | Size: 1240 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.repository

import com.example.tumbuhnyata.data.api.CsrApiService
import com.example.tumbuhnyata.data.api.CsrSubmissionRequest
import com.example.tumbuhnyata.data.local.dao.CsrDraftDao
import com.example.tumbuhnyata.data.local.entity.CsrDraftEntity
import kotlinx.coroutines.flow.Flow

class CsrDraftRepository(
    private val csrDraftDao: CsrDraftDao,
    private val csrApiService: CsrApiService
) {
    val allCsrDrafts: Flow<List<CsrDraftEntity>> = csrDraftDao.getAllCsrDrafts()

    suspend fun insertCsrDraft(csrDraft: CsrDraftEntity): Long {
        return csrDraftDao.insertCsrDraft(csrDraft)
    }

    suspend fun updateCsrDraft(csrDraft: CsrDraftEntity) {
        csrDraftDao.updateCsrDraft(csrDraft)
    }

    suspend fun deleteCsrDraft(csrDraft: CsrDraftEntity) {
        csrDraftDao.deleteCsrDraft(csrDraft)
    }

    suspend fun getCsrDraftById(id: Long): CsrDraftEntity? {
        return csrDraftDao.getCsrDraftById(id)
    }

    suspend fun submitCsrToApi(request: CsrSubmissionRequest): Boolean {
        return try {
            val response = csrApiService.submitCSR(request)
            response.isSuccessful
        } catch (e: Exception) {
            false
        }
    }
} 

================================================================================

FILE 56: app\src\main\java\com\example\tumbuhnyata\data\repository\CsrHistoryRepository.kt
Lines: 33 | Size: 1047 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.repository

import com.example.tumbuhnyata.data.api.AddCsrRequest
import com.example.tumbuhnyata.data.api.CsrHistoryApi
import com.example.tumbuhnyata.data.model.CsrHistoryItem

class CsrHistoryRepository(private val api: CsrHistoryApi) {
    suspend fun getCsrHistory(userId: Int): List<CsrHistoryItem> {
        return api.getCsrHistory(userId).body() ?: emptyList()
    }

    suspend fun getCsrHistoryDetail(id: Int, userId: Int): CsrHistoryItem? {
        return api.getCsrHistoryDetail(id, userId).body()
    }

    suspend fun deleteCsrHistory(id: Int, userId: Int): Boolean {
        return try {
            val response = api.deleteCsrHistory(id, userId)
            response.isSuccessful
        } catch (e: Exception) {
            false
        }
    }

    suspend fun addCsrHistory(request: AddCsrRequest): Boolean {
        return try {
            val response = api.addCsrHistory(request)
            response.isSuccessful
        } catch (e: Exception) {
            false
        }
    }
} 

================================================================================

FILE 57: app\src\main\java\com\example\tumbuhnyata\data\repository\CsrHistoryRepositoryOffline.kt
Lines: 318 | Size: 13412 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.repository

import android.content.Context
import android.util.Log
import com.example.tumbuhnyata.data.api.AddCsrRequest
import com.example.tumbuhnyata.data.api.CsrHistoryApi
import com.example.tumbuhnyata.data.local.dao.CsrHistoryDao
import com.example.tumbuhnyata.data.mapper.CsrHistoryMapper
import com.example.tumbuhnyata.data.model.CsrHistoryItem
import com.example.tumbuhnyata.data.model.normalizeStatus
import com.example.tumbuhnyata.util.NetworkUtils
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map

// Custom exceptions untuk error handling yang lebih baik
class OfflineException(message: String) : Exception(message)
class NetworkException(message: String, cause: Throwable? = null) : Exception(message, cause)
class DatabaseException(message: String, cause: Throwable? = null) : Exception(message, cause)

class CsrHistoryRepositoryOffline(
    private val api: CsrHistoryApi,
    private val dao: CsrHistoryDao,
    private val context: Context
) {
    companion object {
        private const val TAG = "CsrHistoryRepository"
    }

    // Mendapatkan data riwayat CSR dengan prioritas online -> offline
    suspend fun getCsrHistory(userId: Int): Result<List<CsrHistoryItem>> {
        return try {
            if (NetworkUtils.isNetworkAvailable(context)) {
                // Online: ambil dari API dan simpan ke database
                Log.d(TAG, "Online: Fetching data from API")
                val response = api.getCsrHistory(userId)
                
                if (response.isSuccessful) {
                    val apiData = response.body() ?: emptyList()
                    
                    // Simpan data dari API ke local database
                    if (apiData.isNotEmpty()) {
                        val entities = CsrHistoryMapper.toEntityList(apiData, isSynced = true)
                        dao.insertAll(entities)
                        Log.d(TAG, "Saved ${apiData.size} items to local database")
                    }
                    
                    // Sync data yang belum sync
                    syncUnsyncedData(userId)
                    
                    Result.success(apiData)
                } else {
                    // API error, fallback ke local
                    Log.w(TAG, "API error: ${response.code()}, falling back to local data")
                    val localData = dao.getCsrHistoryByUserIdSync(userId)
                    Result.success(CsrHistoryMapper.toItemList(localData))
                }
            } else {
                // Offline: ambil dari database lokal
                Log.d(TAG, "Offline: Fetching data from local database")
                val localData = dao.getCsrHistoryByUserIdSync(userId)
                if (localData.isEmpty()) {
                    Result.failure(OfflineException("Tidak ada koneksi internet dan tidak ada data lokal tersedia"))
                } else {
                    Result.success(CsrHistoryMapper.toItemList(localData))
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error fetching CSR history: ${e.message}")
            // Fallback ke data lokal jika API gagal
            try {
                val localData = dao.getCsrHistoryByUserIdSync(userId)
                if (localData.isEmpty()) {
                    Result.failure(NetworkException("Gagal mengambil data dari server dan tidak ada data lokal", e))
                } else {
                    Result.success(CsrHistoryMapper.toItemList(localData))
                }
            } catch (dbException: Exception) {
                Result.failure(DatabaseException("Gagal mengakses database lokal", dbException))
            }
        }
    }

    // Flow untuk UI yang reactive
    fun getCsrHistoryFlow(userId: Int): Flow<List<CsrHistoryItem>> {
        return dao.getCsrHistoryByUserId(userId).map { entities ->
            CsrHistoryMapper.toItemList(entities)
        }
    }

    // Mendapatkan data untuk "Perlu Tindakan"
    fun getPerluTindakanItems(userId: Int): Flow<List<CsrHistoryItem>> {
        return dao.getPerluTindakanItems(userId).map { entities ->
            CsrHistoryMapper.toItemList(entities)
        }
    }

    // Mendapatkan data untuk "Diterima"
    fun getDiterimaItems(userId: Int): Flow<List<CsrHistoryItem>> {
        return dao.getDiterimaItems(userId).map { entities ->
            CsrHistoryMapper.toItemList(entities)
        }
    }

    // Detail CSR history
    suspend fun getCsrHistoryDetail(id: Int, userId: Int): CsrHistoryItem? {
        return try {
            if (NetworkUtils.isNetworkAvailable(context)) {
                // Online: coba ambil dari API dulu
                val apiData = api.getCsrHistoryDetail(id, userId).body()
                if (apiData != null) {
                    // Update local database
                    val entity = CsrHistoryMapper.toEntity(apiData, isSynced = true)
                    dao.insert(entity)
                    apiData
                } else {
                    // Fallback ke local
                    val localEntity = dao.getCsrHistoryById(id)
                    localEntity?.let { CsrHistoryMapper.toItem(it) }
                }
            } else {
                // Offline: ambil dari local database
                val localEntity = dao.getCsrHistoryById(id)
                localEntity?.let { CsrHistoryMapper.toItem(it) }
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error fetching CSR detail: ${e.message}")
            // Fallback ke local database
            val localEntity = dao.getCsrHistoryById(id)
            localEntity?.let { CsrHistoryMapper.toItem(it) }
        }
    }

    // Menambah CSR history baru
    suspend fun addCsrHistory(request: AddCsrRequest): Boolean {
        return try {
            if (NetworkUtils.isNetworkAvailable(context)) {
                // Online: kirim ke API
                val response = api.addCsrHistory(request)
                if (response.isSuccessful && response.body()?.data != null) {
                    // Simpan ke local database sebagai synced
                    val entity = CsrHistoryMapper.toEntity(response.body()!!.data!!, isSynced = true)
                    dao.insert(entity)
                    true
                } else {
                    // Simpan ke local sebagai unsynced jika API gagal
                    saveAsUnsynced(request)
                    true
                }
            } else {
                // Offline: simpan ke local database sebagai unsynced
                saveAsUnsynced(request)
                true
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error adding CSR history: ${e.message}")
            // Simpan ke local database sebagai unsynced
            saveAsUnsynced(request)
            true
        }
    }

    // Delete CSR history
    suspend fun deleteCsrHistory(id: Int, userId: Int): Boolean {
        return try {
            if (NetworkUtils.isNetworkAvailable(context)) {
                // Online: hapus dari API
                val response = api.deleteCsrHistory(id, userId)
                if (response.isSuccessful) {
                    // Hapus dari local database
                    dao.permanentDelete(id)
                    true
                } else {
                    // Mark as deleted locally jika API gagal
                    dao.markAsDeleted(id)
                    true
                }
            } else {
                // Offline: mark as deleted
                dao.markAsDeleted(id)
                true
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error deleting CSR history: ${e.message}")
            // Mark as deleted locally
            dao.markAsDeleted(id)
            true
        }
    }

    // Sync data yang belum sync ke server
    suspend fun syncUnsyncedData(userId: Int) {
        if (!NetworkUtils.isNetworkAvailable(context)) {
            Log.d(TAG, "No network available for sync")
            return
        }

        try {
            // Sync unsynced items (new/updated items)
            val unsyncedItems = dao.getUnsyncedItems()
            for (entity in unsyncedItems) {
                try {
                    val request = AddCsrRequest(
                        user_id = entity.userId,
                        program_name = entity.programName,
                        category = entity.category,
                        description = entity.description,
                        location = entity.location,
                        partner_name = entity.partnerName,
                        start_date = entity.startDate,
                        end_date = entity.endDate,
                        budget = entity.budget.replace(Regex("[^\\d]"), "").toLongOrNull() ?: 0L,
                        status = entity.status,
                        agreed = entity.agreed
                    )
                    
                    val response = api.addCsrHistory(request)
                    if (response.isSuccessful && response.body()?.data != null) {
                        // Update dengan data dari server dan mark as synced
                        val serverData = response.body()!!.data!!
                        val updatedEntity = CsrHistoryMapper.toEntity(serverData, isSynced = true)
                        dao.insert(updatedEntity)
                        
                        // Hapus item lama jika ID berbeda
                        if (entity.id != serverData.id) {
                            dao.permanentDelete(entity.id)
                        }
                        
                        Log.d(TAG, "Synced item: ${entity.programName}")
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "Failed to sync item ${entity.programName}: ${e.message}")
                }
            }

            // Sync deleted items
            val deletedItems = dao.getUnsyncedDeletedItems()
            for (entity in deletedItems) {
                try {
                    val response = api.deleteCsrHistory(entity.id, entity.userId)
                    if (response.isSuccessful) {
                        dao.permanentDelete(entity.id)
                        Log.d(TAG, "Synced deletion: ${entity.programName}")
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "Failed to sync deletion ${entity.programName}: ${e.message}")
                }
            }

        } catch (e: Exception) {
            Log.e(TAG, "Error during sync: ${e.message}")
        }
    }

    // Helper function untuk menyimpan sebagai unsynced
    private suspend fun saveAsUnsynced(request: AddCsrRequest) {
        val entity = CsrHistoryMapper.toEntity(
            CsrHistoryItem(
                id = generateTempId(), // Generate temporary ID untuk local
                userId = request.user_id,
                programName = request.program_name,
                category = request.category,
                description = request.description,
                location = request.location,
                partnerName = request.partner_name,
                startDate = request.start_date,
                endDate = request.end_date,
                budget = request.budget.toString(),
                proposalUrl = null,
                legalityUrl = null,
                agreed = request.agreed,
                status = normalizeStatus(request.status), // Normalisasi status
                createdAt = java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", java.util.Locale.getDefault())
                    .format(java.util.Date())
            ),
            isSynced = false
        )
        dao.insert(entity)
    }

    // Generate temporary ID untuk items yang belum sync
    private fun generateTempId(): Int {
        return -(System.currentTimeMillis() / 1000).toInt() // Negative ID untuk temporary
    }

    // Get count of unsynced items
    suspend fun getUnsyncedCount(): Int = dao.getUnsyncedCount()

    // Flow untuk unsynced count
    fun getUnsyncedCountFlow(): Flow<Int> = dao.getUnsyncedCountFlow()

    // Clean up synced deleted items
    suspend fun cleanupSyncedDeletedItems() = dao.cleanupSyncedDeletedItems()
    
    // Helper methods untuk debugging dan testing filter status
    suspend fun getAllDistinctStatuses(userId: Int): List<String> = dao.getAllDistinctStatuses(userId)
    
    suspend fun getStatusCounts(userId: Int): Pair<Int, Int> {
        val perluTindakanCount = dao.getPerluTindakanCount(userId)
        val diterimaCount = dao.getDiterimaCount(userId)
        return Pair(perluTindakanCount, diterimaCount)
    }
    
    suspend fun debugFilterStatus(userId: Int) {
        try {
            val allStatuses = dao.getAllDistinctStatuses(userId)
            val (perluTindakanCount, diterimaCount) = getStatusCounts(userId)
            
            Log.d(TAG, "=== DEBUG FILTER STATUS ===")
            Log.d(TAG, "User ID: $userId")
            Log.d(TAG, "All distinct statuses: $allStatuses")
            Log.d(TAG, "Perlu Tindakan count: $perluTindakanCount")
            Log.d(TAG, "Diterima count: $diterimaCount")
            Log.d(TAG, "=========================")
        } catch (e: Exception) {
            Log.e(TAG, "Error in debugFilterStatus: ${e.message}")
        }
    }
} 

================================================================================

FILE 58: app\src\main\java\com\example\tumbuhnyata\data\repository\DashboardRepository.kt
Lines: 646 | Size: 34483 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.repository

import android.content.Context // Diperlukan untuk cek koneksi internet (jika dilakukan di sini)
import com.example.tumbuhnyata.data.api.DashboardApiService
import com.example.tumbuhnyata.data.local.dao.DashboardDao
import com.example.tumbuhnyata.data.mapper.toEntityList
import com.example.tumbuhnyata.data.mapper.toKpiItemStateList // Mapper untuk DashboardData -> List<KPIItemState>
import com.example.tumbuhnyata.data.mapper.toKpiItemStateListForOffline // Mapper untuk List<CsrReportEntity> -> List<KPIItemState>
import com.example.tumbuhnyata.data.mapper.toKpiDetails // Mapper untuk KpiDetailData -> KpiDetails
import com.example.tumbuhnyata.data.mapper.toCreateRequest // Sync mapper
import com.example.tumbuhnyata.data.mapper.toUpdateRequest // Sync mapper
import com.example.tumbuhnyata.util.NetworkConnectivityUtil // Anda perlu membuat utilitas ini
import com.example.tumbuhnyata.viewmodel.KPIItemState
import com.example.tumbuhnyata.ui.dashboard.kpi.KpiDetails // Import KpiDetails
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.firstOrNull
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.flow.map
import java.io.IOException
import java.text.DecimalFormat
import com.example.tumbuhnyata.data.local.entity.CsrReportEntity

// Definisikan Resource wrapper jika belum ada di util
sealed class Resource<T>(val data: T? = null, val message: String? = null) {
    class Success<T>(data: T) : Resource<T>(data)
    class Error<T>(message: String, data: T? = null) : Resource<T>(data, message)
    class Loading<T>(data: T? = null) : Resource<T>(data) // Opsional: bisa juga tanpa data saat loading
}

class DashboardRepository(
    private val dashboardApiService: DashboardApiService,
    private val dashboardDao: DashboardDao,
    private val context: Context // Untuk NetworkConnectivityUtil
) {
    
    // Expose dashboardDao for offline operations
    fun getDashboardDao(): DashboardDao = dashboardDao

    /**
     * Syncs unsynced data to server when online
     * COMPREHENSIVE SYNC: Handles individual submissions with proper error handling and retry logic
     */
    suspend fun syncUnsyncedData(): Resource<Int> {
        if (!NetworkConnectivityUtil.isOnline(context)) {
            println("DashboardRepository: Device is offline, cannot sync")
            return Resource.Error("Device is offline, cannot sync")
        }

        return try {
            val unsyncedReports = dashboardDao.getUnsyncedReports()
            println("DashboardRepository: === STARTING SYNC OPERATION ===")
            println("DashboardRepository: Found ${unsyncedReports.size} unsynced reports")
            
            if (unsyncedReports.isEmpty()) {
                println("DashboardRepository: No unsynced data found, sync complete")
                return Resource.Success(0)
            }
            
            var syncedCount = 0
            var errorCount = 0
            val syncErrors = mutableListOf<String>()
            
            // Process each unsynced report
            for ((index, report) in unsyncedReports.withIndex()) {
                try {
                    println("DashboardRepository: [${index + 1}/${unsyncedReports.size}] Syncing report:")
                    println("  - ID: ${report.id}")
                    println("  - LocalID: ${report.localId}")
                    println("  - Document: ${report.documentName}")
                    println("  - Carbon Value: ${report.carbonValue}")
                    println("  - isLocalOnly: ${report.isLocalOnly}")
                    println("  - isSynced: ${report.isSynced}")
                    println("  - Retry Count: ${report.syncRetryCount}")
                    
                    if (report.isLocalOnly) {
                        // Offline-created data: Use CREATE endpoint
                        val success = syncOfflineCreatedData(report)
                        if (success) {
                            syncedCount++
                            println("  ✓ Successfully synced offline-created data")
                        } else {
                            errorCount++
                            syncErrors.add("Failed to sync offline data: ${report.documentName}")
                            println("  ✗ Failed to sync offline-created data")
                        }
                    } else {
                        // Server data with local modifications: Use UPDATE endpoint
                        val success = syncModifiedServerData(report)
                        if (success) {
                            syncedCount++
                            println("  ✓ Successfully synced modified server data")
                        } else {
                            errorCount++
                            syncErrors.add("Failed to update server data: ${report.documentName}")
                            println("  ✗ Failed to sync modified server data")
                        }
                    }
                    
                } catch (e: Exception) {
                    println("  ✗ Exception during sync: ${e.message}")
                    e.printStackTrace()
                    errorCount++
                    syncErrors.add("Exception syncing ${report.documentName}: ${e.message}")
                    
                    // Increment retry count for failed items
                    val newRetryCount = report.syncRetryCount + 1
                    dashboardDao.updateSyncStatus(report.id, false, newRetryCount)
                }
            }
            
            println("DashboardRepository: === SYNC OPERATION COMPLETED ===")
            println("DashboardRepository: Total Reports: ${unsyncedReports.size}")
            println("DashboardRepository: Successfully Synced: $syncedCount")
            println("DashboardRepository: Failed: $errorCount")
            if (syncErrors.isNotEmpty()) {
                println("DashboardRepository: Errors:")
                syncErrors.forEach { error ->
                    println("  - $error")
                }
            }
            println("DashboardRepository: =========================================")
            
            when {
                errorCount == 0 -> {
                    Resource.Success(syncedCount)
                }
                syncedCount > 0 -> {
                    Resource.Error("Partially synced: $syncedCount success, $errorCount failed", syncedCount)
                }
                else -> {
                    Resource.Error("All sync attempts failed: ${syncErrors.firstOrNull() ?: "Unknown error"}")
                }
            }
            
        } catch (e: Exception) {
            println("DashboardRepository: Critical sync operation failure: ${e.message}")
            e.printStackTrace()
            Resource.Error("Sync operation failed: ${e.message}")
        }
    }
    
    /**
     * Syncs offline-created data using CREATE endpoint
     */
    private suspend fun syncOfflineCreatedData(report: CsrReportEntity): Boolean {
        return try {
            println("DashboardRepository: === SYNCING OFFLINE-CREATED DATA ===")
            println("DashboardRepository: Report ID: ${report.id}")
            println("DashboardRepository: Local ID: ${report.localId}")
            println("DashboardRepository: Company ID: ${report.companyId}")
            println("DashboardRepository: Document Name: ${report.documentName}")
            println("DashboardRepository: Is Local Only: ${report.isLocalOnly}")
            println("DashboardRepository: Is Synced: ${report.isSynced}")
            println("DashboardRepository: Retry Count: ${report.syncRetryCount}")
            
            // Validate required fields
            if (report.localId.isNullOrEmpty()) {
                println("DashboardRepository: ERROR - localId is null or empty for offline data!")
                return false
            }
            
            println("DashboardRepository: Creating new submission on server...")
            val createRequest = report.toCreateRequest()
            println("DashboardRepository: Request payload: $createRequest")
            
            val response = dashboardApiService.createSubmission(createRequest)
            println("DashboardRepository: Create response code: ${response.code()}")
            
            when {
                response.isSuccessful -> {
                    val responseBody = response.body()
                    println("DashboardRepository: Create response body: $responseBody")
                    
                    if (responseBody?.success == true) {
                        val serverId = responseBody.data?.id
                        println("DashboardRepository: Server returned success=true, serverId: $serverId")
                        
                        if (serverId != null && serverId > 0) {
                            println("DashboardRepository: Updating local record with server ID...")
                            println("DashboardRepository: Before update - localId: ${report.localId}, updating to serverId: $serverId")
                            
                            // Update local record with server ID and mark as synced
                            dashboardDao.updateSyncStatusByLocalId(
                                localId = report.localId!!,
                                isSynced = true,
                                serverId = serverId
                            )
                            
                            println("DashboardRepository: ✅ Successfully updated local record with server ID: $serverId")
                            
                            // Verify the update worked by checking the specific record
                            val updatedRecord = dashboardDao.getRecordByLocalId(report.localId!!)
                            if (updatedRecord != null) {
                                println("DashboardRepository: 🔍 Verification - Updated record found:")
                                println("  - ID: ${updatedRecord.id}")
                                println("  - LocalId: ${updatedRecord.localId}")
                                println("  - ServerId: ${updatedRecord.serverId}")
                                println("  - IsSynced: ${updatedRecord.isSynced}")
                                println("  - IsLocalOnly: ${updatedRecord.isLocalOnly}")
                                
                                if (updatedRecord.isSynced) {
                                    println("DashboardRepository: ✅ Verified - Record is now marked as synced")
                                } else {
                                    println("DashboardRepository: ❌ ERROR - Record still marked as unsynced!")
                                }
                            } else {
                                println("DashboardRepository: ❌ ERROR - Cannot find record by localId after update!")
                            }
                            
                            // Double-check: verify record no longer in unsynced list
                            val unsyncedRecords = dashboardDao.getUnsyncedReports()
                            val stillUnsynced = unsyncedRecords.any { it.localId == report.localId }
                            if (stillUnsynced) {
                                println("DashboardRepository: ❌ WARNING - Record still appears as unsynced after update!")
                                
                                // Print debug info of all unsynced records
                                println("DashboardRepository: Current unsynced records:")
                                unsyncedRecords.forEach { record ->
                                    println("  - ID: ${record.id}, LocalId: ${record.localId}, IsSynced: ${record.isSynced}")
                                }
                            } else {
                                println("DashboardRepository: ✅ Verified - Record no longer in unsynced list")
                            }
                            
                            true
                        } else {
                            println("DashboardRepository: ❌ Invalid server ID in response: $serverId")
                            incrementRetryCount(report)
                            false
                        }
                    } else {
                        println("DashboardRepository: ❌ Server returned success=false: ${responseBody?.message}")
                        incrementRetryCount(report)
                        false
                    }
                }
                else -> {
                    val errorBody = response.errorBody()?.string()
                    println("DashboardRepository: ❌ HTTP ${response.code()}: $errorBody")
                    incrementRetryCount(report)
                    false
                }
            }
        } catch (e: Exception) {
            println("DashboardRepository: ❌ Exception in syncOfflineCreatedData: ${e.message}")
            e.printStackTrace()
            incrementRetryCount(report)
            false
        }
    }
    
    /**
     * Syncs server data with local modifications using UPDATE endpoint
     */
    private suspend fun syncModifiedServerData(report: CsrReportEntity): Boolean {
        return try {
            println("DashboardRepository: Updating existing submission on server...")
            val updateRequest = report.toUpdateRequest()
            println("DashboardRepository: Update payload: $updateRequest")
            
            val response = dashboardApiService.updateSubmission(report.id, updateRequest)
            println("DashboardRepository: Update response code: ${response.code()}")
            
            when {
                response.isSuccessful -> {
                    val responseBody = response.body()
                    println("DashboardRepository: Update response body: $responseBody")
                    
                    if (responseBody?.success == true) {
                        // Mark as synced
                        dashboardDao.updateSyncStatus(report.id, true, 0)
                        println("DashboardRepository: Successfully updated server record")
                        true
                    } else {
                        println("DashboardRepository: Server returned success=false: ${responseBody?.message}")
                        incrementRetryCount(report)
                        false
                    }
                }
                else -> {
                    val errorBody = response.errorBody()?.string()
                    println("DashboardRepository: HTTP ${response.code()}: $errorBody")
                    incrementRetryCount(report)
                    false
                }
            }
        } catch (e: Exception) {
            println("DashboardRepository: Exception in syncModifiedServerData: ${e.message}")
            e.printStackTrace()
            incrementRetryCount(report)
            false
        }
    }
    
    /**
     * Helper to increment retry count for failed sync attempts
     * FIXED: Handle offline data by updating via localId when available
     */
    private suspend fun incrementRetryCount(report: CsrReportEntity) {
        val newRetryCount = report.syncRetryCount + 1
        
        if (report.isLocalOnly && report.localId != null) {
            // For offline-created data, update by localId
            dashboardDao.markSyncedByLocalId(report.localId!!, false) // Use existing method
            println("DashboardRepository: Incremented retry count for offline data localId: ${report.localId}")
            
            // Also update retry count manually via direct id update (since markSyncedByLocalId doesn't handle retry count)
            dashboardDao.updateSyncStatus(report.id, false, newRetryCount)
            println("DashboardRepository: Updated retry count to $newRetryCount for offline record id: ${report.id}")
        } else {
            // For server data, update by id
            dashboardDao.updateSyncStatus(report.id, false, newRetryCount)
            println("DashboardRepository: Incremented retry count to $newRetryCount for server record id: ${report.id}")
        }
    }

    /**
     * Fetches dashboard KPI items.
     * Tries to fetch from API first. If online and successful, it also attempts to refresh
     * the local cache of all submissions and auto-sync unsynced data.
     * If API fails or offline, it attempts to load from the local cache.
     */
    fun getDashboardKpiItems(companyId: Int?, year: Int?): Flow<Resource<List<KPIItemState>>> = flow {
        emit(Resource.Loading()) // Emit loading state

        val localDataFlow = dashboardDao.getAllReports().map { it.toKpiItemStateListForOffline(year) }
        val currentLocalKpis = localDataFlow.firstOrNull() // Ambil data lokal saat ini untuk fallback cepat

        if (NetworkConnectivityUtil.isOnline(context)) {
            try {
                // CRITICAL FIX: Auto-sync unsynced data first when online (AWAIT completion)
                println("DashboardRepository: Device is online (${NetworkConnectivityUtil.getNetworkType(context)}), attempting auto-sync...")
                val syncResult = syncUnsyncedData() // AWAIT the result
                when (syncResult) {
                    is Resource.Success -> {
                        println("DashboardRepository: Successfully synced ${syncResult.data} unsynced records before dashboard load")
                    }
                    is Resource.Error -> {
                        println("DashboardRepository: Sync had errors before dashboard load: ${syncResult.message}")
                        // Continue anyway, some data might not be synced
                    }
                    is Resource.Loading -> {
                        println("DashboardRepository: Sync still loading, this should not happen")
                    }
                }
                
                // 1. Ambil data dashboard utama menggunakan endpoint
                val response = dashboardApiService.getDashboardData(companyId = companyId, year = year)
                println("DashboardRepository: Calling endpoint: carbon-submissions/dashboard")
                println("DashboardRepository: Response code: ${response.code()}")
                
                if (response.isSuccessful && response.body()?.success == true) {
                    val dashboardData = response.body()?.data
                    if (dashboardData != null) {
                        println("DashboardRepository: Success! Data received from carbon-submissions/dashboard")
                        val kpiItems = dashboardData.toKpiItemStateList()
                        emit(Resource.Success(kpiItems)) // Emit data sukses dari API

                        // Background refresh cache
                        try {
                            refreshSubmissionsCache(companyId, year)
                        } catch (e: Exception) {
                            println("DashboardRepository: Failed to refresh submissions cache: ${e.message}")
                        }
                        return@flow // Selesai jika API dashboard sukses
                    } else {
                        println("DashboardRepository: Dashboard data is null")
                        // Fall through to try local data
                    }
                } else {
                    val errorBody = response.errorBody()?.string()
                    val errorMsg = "API dashboard failed. Code: ${response.code()}, Message: ${response.message()}" +
                            if (errorBody != null) ", Error: $errorBody" else ""
                    println("DashboardRepository: $errorMsg")
                    // Fall through to try local data
                }
            } catch (e: IOException) { // Network error
                println("DashboardRepository: Network error: ${e.message}")
                // Fall through to try local data
            } catch (e: Exception) { // Other errors (e.g., JSON parsing)
                println("DashboardRepository: API error: ${e.message}")
                // Fall through to try local data
            }
        }
        
        // Try local data (either offline or API failed)
        if (!currentLocalKpis.isNullOrEmpty()) {
            val networkStatus = if (NetworkConnectivityUtil.isOnline(context)) "online" else "offline"
            println("DashboardRepository: Using local data ($networkStatus mode)")
            emit(Resource.Success(currentLocalKpis))
        } else {
            val errorMsg = if (NetworkConnectivityUtil.isOnline(context)) {
                "Tidak dapat mengambil data dari server dan tidak ada data lokal tersedia."
            } else {
                "Anda offline dan tidak ada data tersimpan."
            }
            emit(Resource.Error(errorMsg))
        }
    }

    /**
     * Fetches detailed KPI data for a specific KPI type.
     * FIXED: Now follows same pattern as getDashboardKpiItems - Room first, API as background refresh
     */
    fun getKpiDetail(kpiType: String, companyId: Int?, year: Int?): Flow<Resource<KpiDetails>> = flow {
        emit(Resource.Loading())

        // --- NETWORK-FIRST STRATEGY WHEN ONLINE ---
        if (NetworkConnectivityUtil.isOnline(context)) {
            try {
                val allLocalReportsForYearCheck = dashboardDao.getAllReports().firstOrNull() ?: emptyList()
                val kpiSpecificEntitiesForYearCheck = allLocalReportsForYearCheck.filter { it.documentType == getDocumentTypeForKpi(kpiType) }
                val targetYear = year ?: kpiSpecificEntitiesForYearCheck.maxOfOrNull { it.year ?: 0 }?.takeIf { it > 0 } ?: java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)

                println("DashboardRepository: Calling KPI detail endpoint (Network-First) for $kpiType, year $targetYear")
                val companyIdString = companyId?.toString()
                val response = dashboardApiService.getKpiDetail(kpiType = kpiType, companyId = companyIdString, year = targetYear)

                if (response.isSuccessful && response.body()?.success == true) {
                    val kpiDetailData = response.body()?.data
                    if (kpiDetailData != null) {
                        println("DashboardRepository: Success! Fresh KPI detail data received.")
                        val kpiDetails = kpiDetailData.toKpiDetails(targetYear)
                        emit(Resource.Success(kpiDetails))
                        
                        // Refresh cache in background
                        try {
                            refreshSubmissionsCache(companyId, null) 
                        } catch(e: Exception) {
                            println("DashboardRepository: Background cache refresh failed: ${e.message}")
                        }
                        return@flow 
                    }
                }
                println("DashboardRepository: API call for KPI detail did not return valid data. Code: ${response.code()}. Falling back to local cache.")
            } catch (e: Exception) {
                println("DashboardRepository: API call for KPI detail failed: ${e.message}. Falling back to local cache.")
            }
        }

        // --- CACHE FALLBACK LOGIC (or OFFLINE) ---
        println("DashboardRepository: Using local cache for KPI Details.")
        val allLocalReports = dashboardDao.getAllReports().firstOrNull() ?: emptyList()
        val kpiSpecificEntities = allLocalReports.filter { it.documentType == getDocumentTypeForKpi(kpiType) }
        val targetYear = year ?: kpiSpecificEntities.maxOfOrNull { it.year ?: 0 }?.takeIf { it > 0 } ?: java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)
        
        val entitiesForYear = kpiSpecificEntities.filter { it.year == targetYear }

        if (entitiesForYear.isNotEmpty()) {
            println("DashboardRepository: Found ${entitiesForYear.size} records in cache for $kpiType, year $targetYear.")
            val localData = createKpiDetailsFromRoom(kpiType, entitiesForYear, targetYear, allLocalReports)
            emit(Resource.Success(localData))
        } else {
            val errorMsg = "Tidak ada data untuk KPI '$kpiType' pada tahun $targetYear."
            println("DashboardRepository: $errorMsg")
            emit(Resource.Error(errorMsg))
        }
    }

    private fun getDocumentTypeForKpi(kpiType: String): String {
        return when(kpiType) {
            "carbon_footprint" -> "data_emisi"
            "energy_consumption" -> "data_energi"
            "water_usage" -> "data_air"
            "tree_planting", "trees_planted" -> "data_pohon"
            "waste_management" -> "data_sampah"
            "benefit_received", "beneficiary_received" -> "data_manfaat"
            else -> "data_emisi" // fallback
        }
    }

    private fun createKpiDetailsFromRoom(kpiType: String, entitiesForYear: List<CsrReportEntity>, year: Int, allEntities: List<CsrReportEntity>): KpiDetails {
        val decimalFormat = DecimalFormat("#,###.##")
        
        val monthlyData = entitiesForYear
            .filter { it.carbonValue != null && it.month != null }
            .groupBy { it.month }
            .mapValues { (_, reports) -> reports.sumOf { it.carbonValue?.toDouble() ?: 0.0 }.toFloat() }
        
        val yearlyChartData = (1..12).map { month -> monthlyData[month] ?: 0f }
        
        val yearlyData = allEntities
            .filter { it.documentType == getDocumentTypeForKpi(kpiType) && it.carbonValue != null }
            .groupBy { it.year }
            .mapValues { (_, reports) -> reports.sumOf { it.carbonValue?.toDouble() ?: 0.0 }.toFloat() }
        
        val fiveYearChartData = (year - 4..year).map { chartYear -> yearlyData[chartYear] ?: 0f }
        
        val allValues = entitiesForYear.mapNotNull { it.carbonValue }
        val averageValue = if (allValues.isNotEmpty()) decimalFormat.format(allValues.average()) else "0"
        val minValue = if (allValues.isNotEmpty()) decimalFormat.format(allValues.minOrNull() ?: 0f) else "0"
        
        val (title, unit) = when(kpiType) {
            "carbon_footprint" -> "Carbon Footprint" to "kg CO₂e"
            "energy_consumption" -> "Konsumsi Energi" to "kWh"
            "water_usage" -> "Penggunaan Air" to "L"
            "tree_planting", "trees_planted" -> "Pohon Tertanam" to "Pohon"
            "waste_management" -> "Pengelolaan Sampah" to "kg"
            "benefit_received", "beneficiary_received" -> "Penerima Manfaat" to "Orang"
            else -> "KPI Detail" to "Unit"
        }
        
        return KpiDetails(
            id = kpiType,
            title = title,
            unit = unit,
            year = year,
            yearlyChartData = yearlyChartData,
            fiveYearChartData = fiveYearChartData,
            averageValue = averageValue,
            minValue = minValue,
            analysis = "Data diambil dari laporan tersimpan lokal untuk $title. Total ${entitiesForYear.size} laporan ditemukan untuk tahun $year."
        )
    }

    /**
     * Refreshes the submissions cache by fetching from API and storing in Room.
     * FIXED: Server data now comes with correct sync flags, so we can safely replace all data
     */
    suspend fun refreshSubmissionsCache(companyId: Int? = null, year: Int? = null) {
        if (!NetworkConnectivityUtil.isOnline(context)) {
            println("DashboardRepository: Cannot refresh cache - device offline")
            return
        }
        
        try {
            // STEP 1: Sync unsynced data first before refresh
            println("DashboardRepository: Syncing unsynced data before cache refresh...")
            val syncResult = syncUnsyncedData()
            when (syncResult) {
                is Resource.Success -> {
                    println("DashboardRepository: Successfully synced ${syncResult.data} unsynced records")
                }
                is Resource.Error -> {
                    println("DashboardRepository: Sync had errors: ${syncResult.message}")
                    // Continue with refresh anyway, but some data might not be synced
                }
                is Resource.Loading -> {
                    println("DashboardRepository: Sync is loading, this should not happen")
                }
            }
            
            // STEP 2: DEBUG - Check sync status before refresh
            val totalBefore = dashboardDao.getTotalRecordCount()
            val syncedBefore = dashboardDao.getSyncedRecordCount()
            val unsyncedBefore = dashboardDao.getUnsyncedRecordCount()
            println("DashboardRepository: BEFORE REFRESH - Total: $totalBefore, Synced: $syncedBefore, Unsynced: $unsyncedBefore")
            
            // STEP 3: Get any remaining unsynced data to preserve (should be minimal after sync)
            val unsyncedData = dashboardDao.getUnsyncedReports()
            println("DashboardRepository: Found ${unsyncedData.size} remaining unsynced records to preserve")
            
            // STEP 4: Refresh from API
            println("DashboardRepository: Refreshing submissions cache...")
            val companyIdString = companyId?.toString()
            val response = dashboardApiService.getAllSubmissions(
                companyId = companyIdString, 
                year = null, // FIXED: Always fetch all years to prevent data culling
                limit = 1000 // FIXED: Set high limit to get ALL data, not just recent 10
            )
            println("DashboardRepository: Cache refresh API call completed with code: ${response.code()}")
            
            if (response.isSuccessful) {
                response.body()?.let { submissionsResponse ->
                    val submissions = submissionsResponse.data
                    println("DashboardRepository: Success! Got ${submissions.size} submissions from API")
                    
                    // STEP 5: Clear ONLY synced data, preserve unsynced
                    dashboardDao.clearSyncedReports() // Only clear isSynced = true
                    
                    // STEP 6: Insert fresh API data (now comes with correct isSynced = true)
                    val entities = submissions.toEntityList()
                    dashboardDao.insertOrUpdateReports(entities)
                    println("DashboardRepository: Inserted ${entities.size} fresh API submissions (all marked as synced)")
                    
                    // DEBUG: Check entity sync flags
                    val sampleEntity = entities.firstOrNull()
                    if (sampleEntity != null) {
                        println("DashboardRepository: Sample API entity sync flags - isSynced: ${sampleEntity.isSynced}, isLocalOnly: ${sampleEntity.isLocalOnly}")
                    }
                    
                    // STEP 7: Re-insert preserved unsynced data (in case of conflicts)
                    unsyncedData.forEach { unsyncedEntity ->
                        try {
                            dashboardDao.insertReport(unsyncedEntity)
                            println("DashboardRepository: Preserved unsynced record ${unsyncedEntity.localId}")
                        } catch (e: Exception) {
                            println("DashboardRepository: Conflict inserting unsynced record ${unsyncedEntity.localId}: ${e.message}")
                        }
                    }
                    
                    // STEP 8: DEBUG - Check sync status after refresh
                    val totalAfter = dashboardDao.getTotalRecordCount()
                    val syncedAfter = dashboardDao.getSyncedRecordCount()
                    val unsyncedAfter = dashboardDao.getUnsyncedRecordCount()
                    println("DashboardRepository: AFTER REFRESH - Total: $totalAfter, Synced: $syncedAfter, Unsynced: $unsyncedAfter")
                    
                    val syncSummary = dashboardDao.getSyncStatusSummary()
                    println("DashboardRepository: Sync Status Summary:")
                    syncSummary.forEach { summary ->
                        println("  - isSynced: ${summary.isSynced}, isLocalOnly: ${summary.isLocalOnly}, count: ${summary.count}")
                    }
                    
                    println("DashboardRepository: Successfully cached ${entities.size} API submissions (synced) + ${unsyncedData.size} unsynced records")
                } ?: run {
                    println("DashboardRepository: Response body was null for submissions refresh")
                }
            } else {
                println("DashboardRepository: Failed to refresh cache. Code: ${response.code()}, Message: ${response.message()}")
            }
        } catch (e: Exception) {
            println("DashboardRepository: Cache refresh failed: ${e.message}")
        }
    }

    /**
     * Debug method to get comprehensive sync status information
     */
    suspend fun getComprehensiveSyncStatus(): String {
        return try {
            val totalRecords = dashboardDao.getTotalRecordCount()
            val syncedRecords = dashboardDao.getSyncedRecordCount()
            val unsyncedRecords = dashboardDao.getUnsyncedRecordCount()
            val syncStatusSummary = dashboardDao.getSyncStatusSummary()

            val statusBuilder = StringBuilder()
            statusBuilder.append("=== COMPREHENSIVE SYNC STATUS ===\n")
            statusBuilder.append("Total Records: $totalRecords\n")
            statusBuilder.append("Synced Records: $syncedRecords\n")
            statusBuilder.append("Unsynced Records: $unsyncedRecords\n")
            statusBuilder.append("Detailed Breakdown:\n")

            syncStatusSummary.forEach { summary ->
                val type = if (summary.isLocalOnly) "Offline-Created" else "Server Data"
                val syncStatus = if (summary.isSynced) "Synced" else "Unsynced"
                statusBuilder.append("  - $type ($syncStatus): ${summary.count} records\n")
            }
            
            statusBuilder.append("===============================")
            statusBuilder.toString()
        } catch (e: Exception) {
            "Error getting sync status: ${e.message}"
        }
    }

} 

================================================================================

FILE 59: app\src\main\java\com\example\tumbuhnyata\data\repository\NotificationRepository.kt
Lines: 24 | Size: 741 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.repository

import com.example.tumbuhnyata.data.api.NotificationApi
import com.example.tumbuhnyata.data.model.Notification

class NotificationRepository(
    private val api: NotificationApi
) {
    suspend fun getNotifications(userId: String): List<Notification> {
        return api.getNotifications(userId).body() ?: emptyList()
    }

    suspend fun createNotification(notification: Notification): Notification? {
        return api.createNotification(notification).body()
    }

    suspend fun markAsRead(id: Int): Boolean {
        return api.markAsRead(id).isSuccessful
    }

    suspend fun deleteNotification(id: Int): Boolean {
        return api.deleteNotification(id).isSuccessful
    }
} 

================================================================================

FILE 60: app\src\main\java\com\example\tumbuhnyata\data\repository\OfflineProfileRepository.kt
Lines: 115 | Size: 3926 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.repository

import com.example.tumbuhnyata.data.api.ProfileApi
import com.example.tumbuhnyata.data.local.dao.OfflineProfileDao
import com.example.tumbuhnyata.data.local.entity.OfflineProfile
import com.example.tumbuhnyata.data.model.Profile
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.withContext

class OfflineProfileRepository(
    private val offlineProfileDao: OfflineProfileDao,
    private val profileApi: ProfileApi
) {
    private val scope = CoroutineScope(Dispatchers.IO + SupervisorJob())


    suspend fun getLatestProfile(): OfflineProfile? {
        return withContext(Dispatchers.IO) {
            offlineProfileDao.getLatestProfile()
        }
    }

    suspend fun saveProfile(profile: Profile) {
        return withContext(Dispatchers.IO) {
            try {
                offlineProfileDao.deleteAllProfiles()

                val offlineProfile = OfflineProfile(
                    id = profile.id,
                    companyName = profile.companyName,
                    email = profile.email,
                    phoneNumber = profile.phoneNumber,
                    nib = profile.nib,
                    address = profile.address
                )
                offlineProfileDao.insert(offlineProfile)
                true
            } catch (e: Exception) {
                false
            }
        }
    }

    suspend fun updateProfile(profile: Map<String, String>): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                val existing = offlineProfileDao.getLatestProfile() ?: return@withContext false

                val updated = existing.copy(
                    companyName = profile["companyName"] ?: existing.companyName,
                    email = profile["email"] ?: existing.email,
                    phoneNumber = profile["phoneNumber"] ?: existing.phoneNumber,
                    nib = profile["nib"] ?: existing.nib,
                    address = profile["address"] ?: existing.address,
                    isSynced = false // Mark as unsynced
                )

                offlineProfileDao.update(updated)
                true
            } catch (e: Exception) {
                false
            }
        }
    }

    suspend fun syncOfflineProfiles(): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                val unsyncedProfiles = offlineProfileDao.getUnsyncedProfile()
                var allSynced = true

                for (profile in unsyncedProfiles) {
                    val updateData = mapOf(
                        "companyName" to profile.companyName,
                        "email" to profile.email,
                        "phoneNumber" to profile.phoneNumber,
                        "address" to profile.address
                    )

                    try {
                        val response = profileApi.updateProfile(updateData)

                        if (response.isSuccessful) {
                            offlineProfileDao.update(profile.copy(isSynced = true))
                        } else {
                            allSynced = false
                        }
                    } catch (e: Exception) {
                        allSynced = false
                        e.printStackTrace()
                    }
                }

                allSynced
            } catch (e: Exception) {
                e.printStackTrace()
                false
            }
        }
    }


    suspend fun hasPendingSyncProfile(): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                val unsyncedProfiles = offlineProfileDao.getUnsyncedProfile()
                unsyncedProfiles.isNotEmpty()
            } catch (e: Exception) {
                false
            }
        }
    }
}

================================================================================

FILE 61: app\src\main\java\com\example\tumbuhnyata\data\repository\OfflineWorkshopRepository.kt
Lines: 114 | Size: 4124 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.repository

import com.example.tumbuhnyata.data.api.WorkshopApiService
import com.example.tumbuhnyata.data.local.dao.OfflineWorkshopRegistrationDao
import com.example.tumbuhnyata.data.local.entity.OfflineWorkshopRegistration
import com.example.tumbuhnyata.data.model.RegisterWorkshop
import com.example.tumbuhnyata.data.model.WorkshopHistoryResponse
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

class OfflineWorkshopRepository(
    private val offlineWorkshopRegistrationDao: OfflineWorkshopRegistrationDao,
    private val workshopApiService: WorkshopApiService
) {

    suspend fun saveRegistrationOffline(
        workshopId: String,
        companyName: String,
        email: String,
        isSynced: Boolean = false
    ): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                val registration = OfflineWorkshopRegistration(
                    workshopId = workshopId,
                    companyName = companyName,
                    email = email,
                    isSynced = isSynced
                )
                offlineWorkshopRegistrationDao.insert(registration)
                true
            } catch (e: Exception) {
                false
            }
        }
    }

    suspend fun syncRegistrations(): Boolean {
        return withContext(Dispatchers.IO) {
            var allSuccess = true
            try {
                val unsyncedRegistrations = offlineWorkshopRegistrationDao.getUnsyncedRegistrations()

                unsyncedRegistrations.forEach { registration ->
                    try {
                        val response = workshopApiService.registerWorkshop(
                            RegisterWorkshop(
                                workshop_id = registration.workshopId,
                                company_name = registration.companyName,
                                email = registration.email
                            )
                        )

                        if (response.isSuccessful) {
                            // Update the registration to mark it as synced
                            offlineWorkshopRegistrationDao.update(
                                registration.copy(isSynced = true)
                            )
                        } else {
                            allSuccess = false
                        }
                    } catch (e: Exception) {
                        allSuccess = false
                        e.printStackTrace()
                    }
                }
            } catch (e: Exception) {
                allSuccess = false
                e.printStackTrace()
            }
            allSuccess
        }
    }

    suspend fun hasPendingSyncRegistrations(): Boolean {
        return withContext(Dispatchers.IO) {
            offlineWorkshopRegistrationDao.getUnsyncedRegistrations().isNotEmpty()
        }
    }

    suspend fun getAllRegistrations(): List<OfflineWorkshopRegistration> {
        return withContext(Dispatchers.IO) {
            offlineWorkshopRegistrationDao.getAllRegistrations()
        }
    }

    suspend fun saveServerHistoryToLocal(data: List<WorkshopHistoryResponse>) {
        withContext(Dispatchers.IO) {
            data.forEach { item ->
                val entity = OfflineWorkshopRegistration(
                    id = item.id,
                    workshopId = item.workshopId,
                    companyName = item.companyName,
                    email = item.email,
                    isSynced = true,
                    timestamp = item.timestamp
                )
                offlineWorkshopRegistrationDao.insert(entity)
            }
        }
    }

    suspend fun deleteRegistrationsByIds(ids: List<String>) {
        withContext(Dispatchers.IO) {
            offlineWorkshopRegistrationDao.deleteByIds(ids)
        }
    }

    suspend fun getRegistrationById(id: String): OfflineWorkshopRegistration? {
        return withContext(Dispatchers.IO) {
            offlineWorkshopRegistrationDao.getRegistrationById(id)
        }
    }
}

================================================================================

FILE 62: app\src\main\java\com\example\tumbuhnyata\data\repository\ProfileRepository.kt
Lines: 124 | Size: 4027 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.repository

import com.example.tumbuhnyata.data.api.ProfileApi
import com.example.tumbuhnyata.data.model.Profile
import com.example.tumbuhnyata.di.NetworkModule
import com.example.tumbuhnyata.di.NetworkModule.offlineProfileRepository
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

class ProfileRepository(
    private val api: ProfileApi,
    private val offlineProfileRepository: OfflineProfileRepository
) {

    suspend fun getUserProfile(): Profile? {
        return withContext(Dispatchers.IO) {
            try {
                val offlineProfile = getOfflineProfile()

                try {
                    val response = api.getUserProfile()
                    if (response.isSuccessful) {
                        val profile = response.body()?.data

                        profile?.let {
                            offlineProfileRepository.saveProfile(it)
                            return@withContext it
                        }
                    }
                } catch (e: Exception) {
                    if (offlineProfile != null) {
                        return@withContext offlineProfile
                    }
                    throw e
                }
                offlineProfile
            } catch (e: Exception) {
                getOfflineProfile()
            }
        }
    }

    suspend fun updateProfile(
        companyName: String,
        email: String,
        phoneNumber: String,
        address: String
    ): Boolean  {

        val updateData = mapOf(
            "companyName" to companyName,
            "email" to email,
            "phoneNumber" to phoneNumber,
            "address" to address
        )

        return withContext(Dispatchers.IO) {
            try {
                val response = api.updateProfile(updateData)


                if (response.isSuccessful) {
                    val currentProfile = offlineProfileRepository.getLatestProfile()
                    // Online update successful - save with synced status
                    currentProfile?.let { profile ->
                        val updatedProfile = Profile(
                            id = profile.id,
                            companyName = companyName,
                            email = email,
                            phoneNumber = phoneNumber,
                            nib = profile.nib,
                            address = address
                        )
                        offlineProfileRepository.saveProfile(updatedProfile)
                    }
                    true
                } else {
                    offlineProfileRepository.updateProfile(updateData)
                    true
                }
            } catch (e: Exception) {
                val updateSuccess = offlineProfileRepository.updateProfile(updateData)
                updateSuccess
            }
        }
    }

    suspend fun changePassword(
        currentPassword: String,
        newPassword: String
    ): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                val passwordData = mapOf(
                    "currentPassword" to currentPassword,
                    "newPassword" to newPassword
                )

                val response = api.changePassword(passwordData)
                response.isSuccessful
            } catch (e: Exception) {
                false
            }
        }
    }

    private suspend fun getOfflineProfile(): Profile? {
        return try {
            val offlineProfile = offlineProfileRepository.getLatestProfile()
            offlineProfile?.let {
                Profile(
                    id = it.id,
                    companyName = it.companyName,
                    email = it.email,
                    phoneNumber = it.phoneNumber,
                    nib = it.nib,
                    address = it.address
                )
            }
        } catch (e: Exception) {
            null
        }
    }
}

================================================================================

FILE 63: app\src\main\java\com\example\tumbuhnyata\data\repository\UploadRepository.kt
Lines: 551 | Size: 25076 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.repository

import android.content.Context
import android.net.Uri
import com.example.tumbuhnyata.data.api.DashboardApiService
import com.example.tumbuhnyata.data.model.UploadResponse
import com.example.tumbuhnyata.data.util.Resource
import com.example.tumbuhnyata.util.NetworkConnectivityUtil
import com.example.tumbuhnyata.di.NetworkModule
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.RequestBody.Companion.asRequestBody
import java.io.File
import java.io.FileOutputStream
import java.io.InputStream
import java.io.BufferedReader
import java.io.InputStreamReader
import com.example.tumbuhnyata.data.mapper.createOfflineEntity
import java.util.Calendar

class UploadRepository(
    private val dashboardApiService: DashboardApiService,
    private val context: Context,
    private val dashboardRepository: DashboardRepository? = null // Optional for dashboard refresh
) {
    private val profileRepository = NetworkModule.profileRepository
    private var currentCompanyId: Int? = null

    /**
     * Uploads a CSV file to the backend OR stores offline if no connection
     * ENHANCED: Better integration with new sync system and improved user feedback
     * @param fileUri The URI of the selected file
     * @return Resource wrapper containing upload result
     */
    suspend fun uploadCsvFile(fileUri: Uri): Resource<UploadResponse> {
        return withContext(Dispatchers.IO) {
            try {
                println("UploadRepository: === STARTING CSV UPLOAD PROCESS ===")
                
                // Convert URI to File
                val file = createFileFromUri(fileUri)
                if (file == null) {
                    println("UploadRepository: Failed to create file from URI")
                    return@withContext Resource.Error("Failed to process selected file")
                }

                // Validate file extension
                if (!file.name.endsWith(".csv", ignoreCase = true)) {
                    file.delete() // Clean up
                    println("UploadRepository: Invalid file extension: ${file.name}")
                    return@withContext Resource.Error("Please select a CSV file (.csv extension required)")
                }

                // Check network status and choose strategy
                val isOnline = NetworkConnectivityUtil.isOnline(context)
                println("UploadRepository: Network status: ${if (isOnline) "ONLINE" else "OFFLINE"}")

                if (isOnline) {
                    // ONLINE: Parse CSV locally first, then upload to server
                    uploadOnlineWithLocalParsing(file)
                } else {
                    // OFFLINE: Parse and store locally for later sync
                    uploadOfflineWithLocalStorage(file)
                }
            } catch (e: Exception) {
                println("UploadRepository: Critical error in upload process: ${e.message}")
                e.printStackTrace()
                Resource.Error("Upload failed: ${e.message}")
            }
        }
    }

    /**
     * Online upload strategy: Parse locally first for validation, then upload to server
     * This provides immediate feedback and ensures data consistency
     */
    private suspend fun uploadOnlineWithLocalParsing(file: File): Resource<UploadResponse> {
        return try {
            println("UploadRepository: ONLINE MODE - Using hybrid approach (local parsing + server upload)")
            
            // Step 1: Parse CSV locally for immediate validation and feedback
            val csvEntries = parseCsvFile(file)
            if (csvEntries.isEmpty()) {
                file.delete()
                return Resource.Error("No valid data found in CSV file")
            }
            
            println("UploadRepository: Local parsing successful - ${csvEntries.size} entries validated")
            
            // Step 2: Upload original file to server (backend will parse again for consistency)
            val serverResult = uploadToServer(file)
            
            when (serverResult) {
                is Resource.Success -> {
                    println("UploadRepository: Server upload successful, triggering cache refresh...")
                    // Trigger dashboard cache refresh to get the new data
                    try {
                        dashboardRepository?.refreshSubmissionsCache(null, null)
                        println("UploadRepository: Cache refresh completed")
                    } catch (e: Exception) {
                        println("UploadRepository: Cache refresh failed: ${e.message}")
                        // Don't fail the whole operation for cache refresh failure
                    }
                    serverResult
                }
                is Resource.Error -> {
                    println("UploadRepository: Server upload failed, falling back to offline storage...")
                    // Server failed, fall back to offline storage
                    storeLocallyForSync(csvEntries, file.name)
                }
                else -> serverResult
            }
            
        } catch (e: Exception) {
            file.delete()
            println("UploadRepository: Error in online upload process: ${e.message}")
            e.printStackTrace()
            Resource.Error("Online upload failed: ${e.message}")
        }
    }
    
    /**
     * Offline upload strategy: Parse and store locally for later sync
     */
    private suspend fun uploadOfflineWithLocalStorage(file: File): Resource<UploadResponse> {
        return try {
            println("UploadRepository: OFFLINE MODE - Storing data locally for later sync")
            
            // Parse CSV content
            val csvEntries = parseCsvFile(file)
            file.delete() // Clean up file after parsing
            
            if (csvEntries.isEmpty()) {
                return Resource.Error("No valid data found in CSV file")
            }

            // Store for later sync
            storeLocallyForSync(csvEntries, file.name)
            
        } catch (e: Exception) {
            file.delete()
            println("UploadRepository: Error in offline upload process: ${e.message}")
            e.printStackTrace()
            Resource.Error("Offline storage failed: ${e.message}")
        }
    }
    
    /**
     * Stores parsed CSV entries locally for later sync
     */
    private suspend fun storeLocallyForSync(csvEntries: List<com.example.tumbuhnyata.data.local.entity.CsrReportEntity>, fileName: String): Resource<UploadResponse> {
        return try {
            dashboardRepository?.let { repo ->
                val dashboardDao = repo.getDashboardDao()
                var savedCount = 0
                var failedCount = 0
                val saveErrors = mutableListOf<String>()
                
                println("UploadRepository: Storing ${csvEntries.size} entries locally...")
                
                csvEntries.forEachIndexed { index, entry ->
                    try {
                        println("UploadRepository: [${index + 1}/${csvEntries.size}] Attempting to save:")
                        println("  - Document: '${entry.documentName}'")
                        println("  - Company ID: ${entry.companyId}")
                        println("  - Year: ${entry.year}, Month: ${entry.month}")
                        println("  - Carbon Value: ${entry.carbonValue}")
                        println("  - Local ID: ${entry.localId}")
                        println("  - isLocalOnly: ${entry.isLocalOnly}, isSynced: ${entry.isSynced}")
                        
                        val entityId = dashboardDao.insertReport(entry)
                        if (entityId > 0) {
                            savedCount++
                            println("UploadRepository: [${index + 1}/${csvEntries.size}] ✓ Saved with ID: $entityId")
                        } else {
                            failedCount++
                            saveErrors.add("Failed to save entry ${index + 1}: ${entry.documentName} (returned ID: $entityId)")
                            println("UploadRepository: [${index + 1}/${csvEntries.size}] ✗ Failed to save: ${entry.documentName} (returned ID: $entityId)")
                        }
                    } catch (e: Exception) {
                        failedCount++
                        saveErrors.add("Exception saving entry ${index + 1}: ${e.message}")
                        println("UploadRepository: [${index + 1}/${csvEntries.size}] ✗ Exception: ${e.message}")
                        e.printStackTrace()
                    }
                }
                
                println("UploadRepository: === LOCAL STORAGE SUMMARY ===")
                println("UploadRepository: Total Entries: ${csvEntries.size}")
                println("UploadRepository: Successfully Saved: $savedCount")
                println("UploadRepository: Failed: $failedCount")
                println("UploadRepository: ================================")
                
                if (savedCount > 0) {
                    val message = if (failedCount > 0) {
                        "Partial success: $savedCount of ${csvEntries.size} records saved offline. Will sync when online."
                    } else {
                        "All $savedCount records saved offline successfully. Will sync when online."
                    }
                    
                    // Create success response
                    val mockResponse = UploadResponse(
                        success = true,
                        message = message,
                        submissionId = null,
                        processedRecords = savedCount,
                        errors = if (failedCount > 0) saveErrors else null
                    )
                    Resource.Success(mockResponse)
                } else {
                    Resource.Error("Failed to save any records locally: ${saveErrors.firstOrNull() ?: "Unknown error"}")
                }
                
            } ?: Resource.Error("Database not available for offline storage")
            
        } catch (e: Exception) {
            println("UploadRepository: Critical error in local storage: ${e.message}")
            e.printStackTrace()
            Resource.Error("Local storage failed: ${e.message}")
        }
    }

    /**
     * Uploads file to server (online mode)
     */
    private suspend fun uploadToServer(file: File): Resource<UploadResponse> {
        return try {
            // Create multipart body
            val requestFile = file.asRequestBody("text/csv".toMediaTypeOrNull())
            val multipartBody = MultipartBody.Part.createFormData("csvFile", file.name, requestFile)

            // Make API call
            val response = dashboardApiService.uploadCsvFile(multipartBody)

            // Clean up temporary file
            file.delete()

            if (response.isSuccessful) {
                val uploadResponse = response.body()
                if (uploadResponse != null) {
                    if (uploadResponse.success) {
                        // Upload berhasil - trigger refresh dashboard data
                        try {
                            dashboardRepository?.let { repo ->
                                println("UploadRepository: Upload successful, triggering dashboard refresh...")
                                // Refresh submissions cache dengan data terbaru
                                repo.refreshSubmissionsCache(null, null)
                                println("UploadRepository: Dashboard cache refreshed after upload")
                            }
                        } catch (e: Exception) {
                            println("UploadRepository: Failed to refresh dashboard after upload: ${e.message}")
                            // Don't fail the upload because of refresh failure
                        }
                        Resource.Success(uploadResponse)
                    } else {
                        Resource.Error(uploadResponse.message ?: "Upload failed")
                    }
                } else {
                    Resource.Error("No response from server")
                }
            } else {
                Resource.Error("Upload failed: ${response.message()}")
            }
        } catch (e: Exception) {
            file.delete() // Clean up on error
            Resource.Error("Upload failed: ${e.message}")
        }
    }

    /**
     * Parses CSV file content into CsrReportEntity list
     * FIXED: Improved multi-row parsing with comprehensive debugging
     */
    private suspend fun parseCsvFile(file: File): List<com.example.tumbuhnyata.data.local.entity.CsrReportEntity> {
        return withContext(Dispatchers.IO) {
            val entries = mutableListOf<com.example.tumbuhnyata.data.local.entity.CsrReportEntity>()
            
            try {
                println("UploadRepository: Starting CSV parsing for file: ${file.name}")
                println("UploadRepository: File size: ${file.length()} bytes")
                
                // Read file content with proper encoding detection
                val fileContent = file.readText(Charsets.UTF_8)
                println("UploadRepository: File content preview (first 300 chars): ${fileContent.take(300)}")
                
                // Split lines and filter empty ones
                val allLines = fileContent.split('\n', '\r').filter { it.trim().isNotEmpty() }
                println("UploadRepository: Total non-empty lines in file: ${allLines.size}")
                
                if (allLines.isEmpty()) {
                    println("UploadRepository: File is empty after splitting")
                    return@withContext emptyList()
                }
                
                // Show first few lines for debugging
                allLines.take(3).forEachIndexed { index, line ->
                    println("UploadRepository: Line ${index + 1}: '${line.trim()}'")
                }
                
                var processedDataLines = 0
                var skippedLines = 0
                var errorLines = 0
                
                // Load company ID once at the beginning
                val companyId = getCurrentCompanyId()
                println("UploadRepository: Using company ID: $companyId for all entries")
                
                // Process each line (skip header)
                allLines.forEachIndexed { index, line ->
                    val lineNumber = index + 1
                    val trimmedLine = line.trim()
                    
                    if (index == 0) {
                        println("UploadRepository: Skipping header line $lineNumber: '$trimmedLine'")
                        skippedLines++
                        return@forEachIndexed // Skip header
                    }
                    
                    if (trimmedLine.isEmpty()) {
                        println("UploadRepository: Skipping empty line $lineNumber")
                        skippedLines++
                        return@forEachIndexed
                    }
                    
                    println("UploadRepository: Processing data line $lineNumber: '${trimmedLine.take(150)}${if (trimmedLine.length > 150) "..." else ""}'")
                    
                    try {
                        val csvEntry = parseCsvLine(trimmedLine, file.name, lineNumber, companyId)
                        if (csvEntry != null) {
                            entries.add(csvEntry)
                            processedDataLines++
                            println("UploadRepository: ✓ Successfully parsed line $lineNumber -> Document: '${csvEntry.documentName}', Carbon: ${csvEntry.carbonValue}")
                        } else {
                            println("UploadRepository: ✗ Line $lineNumber resulted in null entry (validation failed)")
                            errorLines++
                        }
                    } catch (e: Exception) {
                        println("UploadRepository: ✗ Exception parsing line $lineNumber: ${e.message}")
                        e.printStackTrace()
                        errorLines++
                    }
                }
                
                println("UploadRepository: === CSV PARSING SUMMARY ===")
                println("UploadRepository: Total lines in file: ${allLines.size}")
                println("UploadRepository: Header lines skipped: 1")
                println("UploadRepository: Empty lines skipped: ${skippedLines - 1}") // -1 for header
                println("UploadRepository: Data lines processed successfully: $processedDataLines")
                println("UploadRepository: Data lines with errors: $errorLines")
                println("UploadRepository: Final parsed entries: ${entries.size}")
                println("UploadRepository: ================================")
                
                entries
                
            } catch (e: Exception) {
                println("UploadRepository: Critical error parsing CSV file: ${e.message}")
                e.printStackTrace()
                emptyList()
            }
        }
    }

    /**
     * Parses a single CSV line into CsrReportEntity
     * FIXED: Better CSV splitting and validation with comprehensive debugging
     */
    private fun parseCsvLine(line: String, fileName: String, lineNumber: Int, companyId: Int): com.example.tumbuhnyata.data.local.entity.CsrReportEntity? {
        try {
            // Handle different CSV formats (quoted and unquoted)
            val columns = if (line.contains("\"")) {
                // Handle quoted CSV (e.g., "value1","value2","value with, comma")
                parseQuotedCsv(line)
            } else {
                // Simple comma split for unquoted CSV
                line.split(",").map { it.trim() }
            }
            
            println("UploadRepository: Line $lineNumber -> Parsed ${columns.size} columns: $columns")
            
            // Validate minimum required columns (no longer need company_id column)
            if (columns.size < 3) {
                println("UploadRepository: ✗ Line $lineNumber has insufficient columns (need at least 3: year,month,carbon_value, got ${columns.size})")
                return null
            }
            
            // Use company ID passed from parent function
            val year = parseIntField(columns.getOrNull(0), "year", lineNumber) ?: Calendar.getInstance().get(Calendar.YEAR)
            val month = parseIntField(columns.getOrNull(1), "month", lineNumber)
            val carbonValue = parseFloatField(columns.getOrNull(2), "carbon_value", lineNumber) ?: 0f
            val documentType = parseStringField(columns.getOrNull(3), "document_type", lineNumber) ?: "data_emisi"
            val documentName = parseStringField(columns.getOrNull(4), "document_name", lineNumber) ?: "$fileName-line$lineNumber"
            val analysis = parseStringField(columns.getOrNull(5), "analysis", lineNumber)
            
            // Validate parsed values
            if (carbonValue <= 0) {
                println("UploadRepository: ✗ Line $lineNumber has invalid carbon_value: $carbonValue (must be > 0)")
                return null
            }
            
            if (year < 2000 || year > 2100) {
                println("UploadRepository: ✗ Line $lineNumber has invalid year: $year (must be 2000-2100)")
                return null
            }
            
            if (month != null && (month < 1 || month > 12)) {
                println("UploadRepository: ✗ Line $lineNumber has invalid month: $month (must be 1-12 or null)")
                return null
            }
            
            println("UploadRepository: ✓ Line $lineNumber validation passed -> company_id: $companyId, year: $year, month: $month, carbon_value: $carbonValue")
            
            // Create offline entity with proper flags
            return createOfflineEntity(
                companyId = companyId,
                year = year,
                month = month,
                carbonValue = carbonValue,
                documentType = documentType,
                documentName = documentName,
                documentPath = fileName, // Store original filename
                analysis = analysis
            )
            
        } catch (e: Exception) {
            println("UploadRepository: ✗ Exception parsing line $lineNumber: ${e.message}")
            e.printStackTrace()
            return null
        }
    }
    
    /**
     * Parses quoted CSV line (handles values with commas inside quotes)
     */
    private fun parseQuotedCsv(line: String): List<String> {
        val result = mutableListOf<String>()
        var current = StringBuilder()
        var inQuotes = false
        var i = 0
        
        while (i < line.length) {
            val char = line[i]
            when {
                char == '"' && !inQuotes -> {
                    inQuotes = true
                }
                char == '"' && inQuotes -> {
                    if (i + 1 < line.length && line[i + 1] == '"') {
                        // Escaped quote
                        current.append('"')
                        i++ // Skip next quote
                    } else {
                        inQuotes = false
                    }
                }
                char == ',' && !inQuotes -> {
                    result.add(current.toString().trim())
                    current.clear()
                }
                else -> {
                    current.append(char)
                }
            }
            i++
        }
        
        // Add the last field
        result.add(current.toString().trim())
        return result
    }
    
    /**
     * Helper function to parse integer fields with debugging
     */
    private fun parseIntField(value: String?, fieldName: String, lineNumber: Int): Int? {
        return try {
            val parsed = value?.trim()?.toIntOrNull()
            println("UploadRepository: Line $lineNumber -> $fieldName: '$value' -> $parsed")
            parsed
        } catch (e: Exception) {
            println("UploadRepository: Line $lineNumber -> Error parsing $fieldName '$value': ${e.message}")
            null
        }
    }
    
    /**
     * Helper function to parse float fields with debugging
     */
    private fun parseFloatField(value: String?, fieldName: String, lineNumber: Int): Float? {
        return try {
            val parsed = value?.trim()?.toFloatOrNull()
            println("UploadRepository: Line $lineNumber -> $fieldName: '$value' -> $parsed")
            parsed
        } catch (e: Exception) {
            println("UploadRepository: Line $lineNumber -> Error parsing $fieldName '$value': ${e.message}")
            null
        }
    }
    
    /**
     * Helper function to parse string fields with debugging
     */
    private fun parseStringField(value: String?, fieldName: String, lineNumber: Int): String? {
        val parsed = value?.trim()?.takeIf { it.isNotBlank() }
        println("UploadRepository: Line $lineNumber -> $fieldName: '$value' -> '$parsed'")
        return parsed
    }

    /**
     * Gets current company ID from profile/session
     * FIXED: Company ID now comes from logged-in user, not from CSV file
     */
    private suspend fun getCurrentCompanyId(): Int {
        if (currentCompanyId == null) {
            try {
                val profile = profileRepository.getUserProfile()
                currentCompanyId = profile?.id ?: 1 // Default to 1 if no profile
                println("UploadRepository: Loaded company ID from profile: $currentCompanyId")
            } catch (e: Exception) {
                println("UploadRepository: Failed to load profile, using default company ID = 1: ${e.message}")
                currentCompanyId = 1
            }
        }
        return currentCompanyId!!
    }

    /**
     * Converts URI to File for upload
     */
    private suspend fun createFileFromUri(uri: Uri): File? {
        return withContext(Dispatchers.IO) {
            try {
                val inputStream: InputStream? = context.contentResolver.openInputStream(uri)
                inputStream?.let { stream ->
                    val tempFile = File(context.cacheDir, "upload_${System.currentTimeMillis()}.csv")
                    val outputStream = FileOutputStream(tempFile)
                    
                    stream.copyTo(outputStream)
                    stream.close()
                    outputStream.close()
                    
                    tempFile
                }
            } catch (e: Exception) {
                e.printStackTrace()
                null
            }
        }
    }
} 

================================================================================

FILE 64: app\src\main\java\com\example\tumbuhnyata\data\repository\WorkshopRepository.kt
Lines: 95 | Size: 3089 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.repository

import com.example.tumbuhnyata.data.api.ProfileApi
import com.example.tumbuhnyata.data.api.WorkshopApiService
import com.example.tumbuhnyata.data.model.RegisterWorkshop
import com.example.tumbuhnyata.data.model.Workshop
import com.example.tumbuhnyata.data.model.recentWorkshops
import com.example.tumbuhnyata.data.model.recommendedWorkshops
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

class WorkshopRepository(
    private val api: WorkshopApiService,
    private val apiProfile: ProfileApi,
    private val offlineWorkshopRepository: OfflineWorkshopRepository
) {

    fun getAllWorkshops(): List<Workshop> {
        return recommendedWorkshops + recentWorkshops.filter { workshop ->
            !recommendedWorkshops.any { it.id == workshop.id }
        }
    }

    fun getWorkshopById(id: String): Workshop? {
        val allWorkshops = getAllWorkshops()
        return allWorkshops.find { it.id == id }
    }

    fun getRecommendedWorkshops(): List<Workshop> {
        return recommendedWorkshops
    }

    fun getRecentWorkshops(): List<Workshop> {
        return recentWorkshops
    }

    // FIXED: Removed automatic offline saving - this should be handled by the caller
    suspend fun registerWorkshopOnline(
        workshopId: String,
        companyName: String,
        email: String
    ): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                val registerWorkshopData = RegisterWorkshop(
                    workshop_id = workshopId,
                    company_name = companyName,
                    email = email
                )
                val response = api.registerWorkshop(registerWorkshopData)
                response.isSuccessful
            } catch (e: Exception) {
                // Return false instead of automatically saving offline
                // Let the caller (ViewModel) handle offline saving
                false
            }
        }
    }

    suspend fun hasPendingSyncRegistrations(): Boolean {
        return offlineWorkshopRepository.hasPendingSyncRegistrations()
    }

    suspend fun isDatabaseOnline(): Boolean {
        return try {
            apiProfile.getUserProfile()
            true
        } catch (e: Exception) {
            false
        }
    }

    suspend fun syncWorkshopHistoryFromServer(email: String): Boolean {
        return try {
            val response = api.getWorkshopHistory(email)
            if (response.isSuccessful && response.body() != null) {
                offlineWorkshopRepository.saveServerHistoryToLocal(response.body()!!)
                true
            } else false
        } catch (e: Exception) {
            false
        }
    }

    suspend fun deleteWorkshopOnline(workshopId: String): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                val response = api.deleteWorkshopRegistration(workshopId)
                response.isSuccessful
            } catch (e: Exception) {
                false
            }
        }
    }
}

================================================================================

FILE 65: app\src\main\java\com\example\tumbuhnyata\data\util\Resource.kt
Lines: 14 | Size: 463 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.data.util

/**
 * A generic class that holds a value with its loading status.
 * Used to wrap network responses and provide unified error handling.
 */
sealed class Resource<T>(
    val data: T? = null,
    val message: String? = null
) {
    class Success<T>(data: T) : Resource<T>(data)
    class Error<T>(message: String, data: T? = null) : Resource<T>(data, message)
    class Loading<T>(data: T? = null) : Resource<T>(data)
} 

================================================================================

FILE 66: app\src\main\java\com\example\tumbuhnyata\di\NetworkModule.kt
Lines: 113 | Size: 3793 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.di

import com.example.tumbuhnyata.TumbuhNyataApp
import com.example.tumbuhnyata.data.api.NotificationApi
import com.example.tumbuhnyata.data.api.ProfileApi
import com.example.tumbuhnyata.data.api.WorkshopApiService
import com.example.tumbuhnyata.data.local.dao.OfflineProfileDao
import com.example.tumbuhnyata.data.local.dao.OfflineWorkshopRegistrationDao
import com.example.tumbuhnyata.data.api.CsrHistoryApi
import com.example.tumbuhnyata.data.network.AuthInterceptor
import com.example.tumbuhnyata.data.repository.NotificationRepository
import com.example.tumbuhnyata.data.repository.ProfileRepository
import com.example.tumbuhnyata.data.repository.WorkshopRepository
import com.example.tumbuhnyata.data.repository.CsrHistoryRepository
import com.example.tumbuhnyata.data.repository.CsrHistoryRepositoryOffline
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import kotlin.lazy
import com.example.tumbuhnyata.data.local.AppDatabase
import com.example.tumbuhnyata.data.repository.OfflineProfileRepository
import com.example.tumbuhnyata.data.repository.OfflineWorkshopRepository

object NetworkModule {

    private val database by lazy {
        AppDatabase.getInstance(TumbuhNyataApp.appContext)
    }

    private val authInterceptor by lazy {
        AuthInterceptor(TumbuhNyataApp.appContext)
    }

    private val okHttpClient by lazy {
        val loggingInterceptor = HttpLoggingInterceptor().apply {
            level = HttpLoggingInterceptor.Level.BODY
        }

        OkHttpClient.Builder()
            .addInterceptor(loggingInterceptor)
            .addInterceptor(authInterceptor)
            .build()
    }

    private val retrofit by lazy {
        Retrofit.Builder()
                            .baseUrl("http://10.0.2.2:5000/")
            .addConverterFactory(GsonConverterFactory.create())
            .client(okHttpClient)
            .build()
    }

    val notificationApi: NotificationApi by lazy {
        retrofit.create(NotificationApi::class.java)
    }

    val notificationRepository: NotificationRepository by lazy {
        NotificationRepository(notificationApi)
    }

    val profileApi: ProfileApi by lazy {
        retrofit.create(ProfileApi::class.java)
    }

    val workshopApi: WorkshopApiService by lazy {
        retrofit.create(WorkshopApiService::class.java)
    }

    // Create offline repositories
    val offlineProfileRepository: OfflineProfileRepository by lazy {
        OfflineProfileRepository(database.offlineProfileDao(), profileApi)
    }

    val offlineWorkshopRepository: OfflineWorkshopRepository by lazy {
        OfflineWorkshopRepository(
            offlineWorkshopRegistrationDao = database.offlineWorkshopRegistrationDao(),
            workshopApiService = workshopApi
        )
    }

    val profileRepository: ProfileRepository by lazy {
        ProfileRepository(
            profileApi,
            offlineProfileRepository = offlineProfileRepository
        )
    }

    val workshopRepository: WorkshopRepository by lazy {
        WorkshopRepository(
            api = workshopApi,
            apiProfile = profileApi,
            offlineWorkshopRepository = offlineWorkshopRepository
        )
    }

    val csrHistoryApi: CsrHistoryApi by lazy {
        retrofit.create(CsrHistoryApi::class.java)
    }

    val csrHistoryRepository: CsrHistoryRepository by lazy {
        CsrHistoryRepository(csrHistoryApi)
    }

    val csrHistoryRepositoryOffline: CsrHistoryRepositoryOffline by lazy {
        CsrHistoryRepositoryOffline(
            api = csrHistoryApi,
            dao = database.csrHistoryDao(),
            context = TumbuhNyataApp.appContext
        )
    }

}

================================================================================

FILE 67: app\src\main\java\com\example\tumbuhnyata\navigation\NavGraph.kt
Lines: 445 | Size: 17383 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.navigation

import LanguagePreference
import androidx.compose.runtime.Composable
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.ui.home.HomeScreen
import com.example.tumbuhnyata.ui.login.LoginScreen
import com.example.tumbuhnyata.ui.profile.AboutScreen
import com.example.tumbuhnyata.ui.profile.ChangePassword
import com.example.tumbuhnyata.ui.profile.ChangePasswordSuccess
import com.example.tumbuhnyata.ui.profile.ProfileScreen
import com.example.tumbuhnyata.ui.profile.UpdateProfile
import com.example.tumbuhnyata.ui.profile.VerificationOne
import com.example.tumbuhnyata.ui.profile.VerificationSuccess
import com.example.tumbuhnyata.ui.profile.VerificationTwo
import com.example.tumbuhnyata.ui.register.AkunBerhasil
import com.example.tumbuhnyata.ui.register.OtpScreen
import com.example.tumbuhnyata.ui.register.RegisterScreen
import com.example.tumbuhnyata.ui.register.VerifikasiScreen
import com.example.tumbuhnyata.ui.notification.NotifikasiDetailScreen
import com.example.tumbuhnyata.ui.splashscreen.OnboardingScreen1
import com.example.tumbuhnyata.ui.splashscreen.OnboardingScreen2
import com.example.tumbuhnyata.ui.splashscreen.OnboardingScreen3
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.tumbuhnyata.ui.splashscreen.SplashScreen
import com.example.tumbuhnyata.ui.eventcsr.CsrSubmissionScreen
import com.example.tumbuhnyata.ui.eventcsr.CsrVerificationScreen
import com.example.tumbuhnyata.ui.eventcsr.CsrSuccessScreen
import com.google.gson.Gson
import com.example.tumbuhnyata.ui.splashscreen.OptionScreen
import com.example.tumbuhnyata.ui.workshop.DaftarWorkshop
import com.example.tumbuhnyata.ui.workshop.DeskripsiWorkshopScreen
import com.example.tumbuhnyata.ui.workshop.NewWorkshop
import com.example.tumbuhnyata.ui.workshop.RekomWorkshop
import com.example.tumbuhnyata.ui.workshop.WorkshopBerhasil
import com.example.tumbuhnyata.ui.workshop.WorkshopScreen
import com.example.tumbuhnyata.ui.dashboard.DashboardScreen
import com.example.tumbuhnyata.ui.dashboard.kpi.KpiDetailScreen
import com.example.tumbuhnyata.ui.dashboard.upload.UploadDataScreen
import com.example.tumbuhnyata.ui.dashboard.upload.UploadSuccessScreen
import androidx.navigation.NavType
import androidx.navigation.navArgument
import com.example.tumbuhnyata.di.NetworkModule
import com.example.tumbuhnyata.ui.riwayat.*
import com.example.tumbuhnyata.ui.Sertifikasi.SertifikasiScreen
import com.example.tumbuhnyata.ui.Sertifikasi.AjukanSertifikasiScreen
import com.example.tumbuhnyata.ui.Sertifikasi.SertifikasiAndaScreen
import com.example.tumbuhnyata.ui.Sertifikasi.RiwayatPengajuanScreen
import com.example.tumbuhnyata.ui.Sertifikasi.DetailSertifikasiScreen
import com.example.tumbuhnyata.ui.Sertifikasi.DokumenOne
import com.example.tumbuhnyata.ui.Sertifikasi.CertificationSuccessScreen
import com.example.tumbuhnyata.ui.dashboardkeuangan.DashboardKeuanganScreen
import com.example.tumbuhnyata.data.model.CsrData
import com.example.tumbuhnyata.ui.notification.NotificationScreen
import com.example.tumbuhnyata.ui.workshop.RiwayatWorkshopScreen
import com.example.tumbuhnyata.viewmodel.RiwayatViewModel
import com.example.tumbuhnyata.viewmodel.WorkshopViewModel
import com.example.tumbuhnyata.viewmodel.WorkshopViewModelFactory
import com.example.tumbuhnyata.data.model.CsrHistoryItem
import com.example.tumbuhnyata.ui.eventcsr.DraftListScreen
import com.example.tumbuhnyata.ui.eventcsr.DraftSuccessScreen
import com.example.tumbuhnyata.util.UserSessionManager
import com.example.tumbuhnyata.TumbuhNyataApp

@Composable
fun AppNavigation() {
    val navController = rememberNavController()

    NavHost(
        navController = navController,
        startDestination = "splash"
    ) {
        composable("splash") {
            SplashScreen(navController)
        }
        composable("onboarding") {
            OnboardingScreen1(navController)
        }
        composable("onboarding2") {
            OnboardingScreen2(navController)
        }
        composable("onboarding3") {
            OnboardingScreen3(navController)
        }
        composable("option") {
            OptionScreen(navController)
        }
        composable("register") {
            RegisterScreen(navController)
        }
        composable("login") {
            LoginScreen(navController)
        }
        composable("verifikasi") {
            VerifikasiScreen(navController)
        }
        composable("otp") {
            OtpScreen(navController)
        }
        composable("akunberhasil") {
            AkunBerhasil(navController)
        }

        // Notifikasi
        composable("notifikasi") {
            val userId = UserSessionManager.getUserId(TumbuhNyataApp.appContext).toString()
            NotificationScreen(
                userId = userId,
                onBackClick = { navController.popBackStack() }
            )
        }
        composable("notifikasi_detail") {
            NotifikasiDetailScreen(navController = navController)
        }

        // Profile
        composable("profile") {
            ProfileScreen(navController)
        }
        composable("about") {
            AboutScreen(navController)
        }
        composable("verification_one") {
            VerificationOne(navController)
        }
        composable("verification_two") {
            VerificationTwo(navController)
        }
        composable("verification_success") {
            VerificationSuccess(navController)
        }


        // Dashboard
        composable("dashboard") {
            DashboardScreen(navController = navController)
        }

        // KPI Detail
        composable(
            route = "kpi_detail/{kpiId}",
            arguments = listOf(navArgument("kpiId") {
                type = NavType.StringType
            })
        ) { backStackEntry ->
            val kpiId = backStackEntry.arguments?.getString("kpiId")
            requireNotNull(kpiId) { "kpiId parameter wasn't found. Please make sure it's set!" }
            KpiDetailScreen(navController = navController, kpiId = kpiId)
        }

        // Upload screens
        composable("upload_data") {
            UploadDataScreen(navController = navController)
        }
        composable("upload_success") {
            UploadSuccessScreen(navController = navController)
        }

        composable("workshop") {
            val viewModelFactory = WorkshopViewModelFactory(
                NetworkModule.workshopRepository,
                NetworkModule.profileRepository,
                NetworkModule.offlineProfileRepository,
                NetworkModule.offlineWorkshopRepository
            )

            val viewModel: WorkshopViewModel = viewModel(factory = viewModelFactory)

            WorkshopScreen(
                navController = navController,
                viewModel = viewModel
            )
        }


        composable("rekomendasiworkshop") {
            RekomWorkshop(navController)
        }
        composable("workshopterbaru") {
            NewWorkshop(navController)
        }
        composable("deskripsiworkshop/{workshopId}") { backStackEntry ->
            val workshopId = backStackEntry.arguments?.getString("workshopId") ?: ""
            val viewModelFactory = WorkshopViewModelFactory(
                NetworkModule.workshopRepository,
                NetworkModule.profileRepository,
                NetworkModule.offlineProfileRepository,
                NetworkModule.offlineWorkshopRepository
            )

            val viewModel: WorkshopViewModel = viewModel(factory = viewModelFactory)
            DeskripsiWorkshopScreen(navController, workshopId, viewModel = viewModel)
        }
        composable("daftarworkshop/{workshopId}") { backStackEntry ->
            val workshopId = backStackEntry.arguments?.getString("workshopId")
            val viewModelFactory = WorkshopViewModelFactory(
                NetworkModule.workshopRepository,
                NetworkModule.profileRepository,
                NetworkModule.offlineProfileRepository,
                NetworkModule.offlineWorkshopRepository
            )

            val viewModel: WorkshopViewModel = viewModel(factory = viewModelFactory)
            DaftarWorkshop(
                navController = navController,
                workshopId = workshopId,
                viewModel = viewModel
            )
        }
        composable("workshopberhasil") {
            WorkshopBerhasil(navController)
        }

        composable("riwayatworkshop") {
            val viewModelFactory = WorkshopViewModelFactory(
                NetworkModule.workshopRepository,
                NetworkModule.profileRepository,
                NetworkModule.offlineProfileRepository,
                NetworkModule.offlineWorkshopRepository
            )

            val viewModel: WorkshopViewModel = viewModel(factory = viewModelFactory)
            RiwayatWorkshopScreen(
                navController = navController,
                viewModel = viewModel
            )
        }

        // CSR Event screens
        composable("csr_submission") {
            CsrSubmissionScreen(navController)
        }
        composable(
            route = "csr_verification/{csrDataJson}",
            arguments = listOf(navArgument("csrDataJson") { type = NavType.StringType })
        ) { backStackEntry ->
            val csrDataJson = backStackEntry.arguments?.getString("csrDataJson")
            if (csrDataJson != null) {
                val csrData = Gson().fromJson(csrDataJson, CsrData::class.java)
                CsrVerificationScreen(navController, csrData)
            } else {
                // Optionally show an error or navigate back
                // navController.popBackStack()
            }
        }
        composable("csr_success") {
            CsrSuccessScreen(navController)
        }
        composable("draft_list") {
            DraftListScreen(navController)
        }
        composable("draft_success") {
            DraftSuccessScreen(navController)
        }

        // Home
        composable("home") {
            HomeScreen(navController)
        }

        // Invoice Screen
        composable("invoice") {
            InvoiceScreen(
                onBack = { navController.popBackStack() }
            )
        }

        // Riwayat screens
        composable("riwayat") {
            val riwayatViewModel = viewModel<RiwayatViewModel>()
            RiwayatScreen(
                navController = navController,
                riwayatViewModel = riwayatViewModel,
                onCsrCardClick = { csrItem: CsrHistoryItem ->
                    if (csrItem.agreed) {
                        if(csrItem.status.lowercase() == "program selesai") {
                            navController.navigate("SelesaiDetail/${csrItem.id}")
                        } else {
                            navController.navigate("ProgressDetail/${csrItem.id}")
                        }
                    } else {
                        navController.navigate("detailRiwayat/${csrItem.id}")
                    }
                },
                onLihatSemuaPerluTindakan = {
                    navController.navigate("perluTindakan")
                },
                onLihatSemuaDiterima = {
                    navController.navigate("diterima")
                }
            )
        }

        // Tambah Riwayat Screen
        composable("tambah_riwayat") {
            TambahRiwayatScreen(navController)
        }

        // Detail Riwayat Screen
        composable(
            route = "detailRiwayat/{csrId}",
            arguments = listOf(
                navArgument("csrId") { type = NavType.IntType }
            )
        ) { backStackEntry ->
            val csrId = backStackEntry.arguments?.getInt("csrId") ?: return@composable
            DetailRiwayatScreen(
                csrId = csrId,
                onBack = { navController.popBackStack() },
                onNavigateToInvoice = { navController.navigate("invoice") },
                onNavigateToUploadRevisi = { navController.navigate("upload_revisi") }
            )
        }

        // Progress Detail Screen
        composable(
            route = "ProgressDetail/{csrId}",
            arguments = listOf(
                navArgument("csrId") { type = NavType.IntType }
            )
        ) { backStackEntry ->
            val csrId = backStackEntry.arguments?.getInt("csrId") ?: return@composable
            ProgressDetailScreen(
                csrId = csrId,
                onBack = { navController.popBackStack() }
            )
        }

        // Selesai Detail Screen
        composable(
            route = "SelesaiDetail/{csrId}",
            arguments = listOf(
                navArgument("csrId") { type = NavType.IntType }
            )
        ) { backStackEntry ->
            val csrId = backStackEntry.arguments?.getInt("csrId") ?: return@composable
            SelesaiDetailScreen(
                csrId = csrId,
                onBack = { navController.popBackStack() }
            )
        }

        composable("perluTindakan") {
            val riwayatViewModel = viewModel<RiwayatViewModel>()
            PerluTindakanScreen(
                riwayatViewModel = riwayatViewModel,
                onBack = { navController.popBackStack() },
                onCsrCardClick = { csrItem: CsrHistoryItem ->
                    navController.navigate("detailRiwayat/${csrItem.id}")
                }
            )
        }

        composable("diterima") {
            val riwayatViewModel = viewModel<RiwayatViewModel>()
            DiterimaScreen(
                riwayatViewModel = riwayatViewModel,
                onBack = { navController.popBackStack() },
                onCsrCardClick = { csrItem: CsrHistoryItem ->
                    navController.navigate("detailRiwayat/${csrItem.id}")
                }
            )
        }

        // Upload Revisi Screen
        composable("upload_revisi") {
            UploadRevisiScreen(
                navController = navController,
                onBack = { navController.popBackStack() },
                onUpload = { fileName ->
                    // Handle file upload logic here without navigation
                }
            )
        }

        // Sertifikasi Routes
        composable("sertifikasi") {
            SertifikasiScreen(navController)
        }
        composable("ajukansertifikasi") {
            AjukanSertifikasiScreen(navController)
        }
        composable("sertifikasianda") {
            SertifikasiAndaScreen(navController)
        }
        composable("riwayatpengajuan") {
            RiwayatPengajuanScreen(navController)
        }
        composable("detailsertifikasi") {
            DetailSertifikasiScreen(navController)
        }
        composable(
            route = "dokumenone/{certificationId}/{certificationName}/{certificationDescription}/{certificationCredentialBody}/{certificationBenefits}/{certificationCost}",
            arguments = listOf(
                navArgument("certificationId") { type = NavType.StringType },
                navArgument("certificationName") { type = NavType.StringType },
                navArgument("certificationDescription") { type = NavType.StringType },
                navArgument("certificationCredentialBody") { type = NavType.StringType },
                navArgument("certificationBenefits") { type = NavType.StringType },
                navArgument("certificationCost") { type = NavType.StringType }
            )
        ) { backStackEntry ->
            val certificationId = backStackEntry.arguments?.getString("certificationId")
            val certificationName = backStackEntry.arguments?.getString("certificationName")
            val certificationDescription = backStackEntry.arguments?.getString("certificationDescription")
            val certificationCredentialBody = backStackEntry.arguments?.getString("certificationCredentialBody")
            val certificationBenefits = backStackEntry.arguments?.getString("certificationBenefits")
            val certificationCost = backStackEntry.arguments?.getString("certificationCost")
            
            DokumenOne(
                navController = navController,
                certificationId = certificationId,
                certificationName = certificationName,
                certificationDescription = certificationDescription,
                certificationCredentialBody = certificationCredentialBody,
                certificationBenefits = certificationBenefits,
                certificationCost = certificationCost
            )
        }
        composable("berhasil") {
            CertificationSuccessScreen(navController)
        }

        composable("dashboardkeuangan") {
            DashboardKeuanganScreen(navController)
        }

        composable("update_profile") {
            UpdateProfile(navController)
        }
        composable("change_password") {
            ChangePassword(navController)
        }
        composable("change_password_success") {
            ChangePasswordSuccess(navController)
        }
        composable("language_preference") {
            LanguagePreference(navController)
        }


    }
}

================================================================================

FILE 68: app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\AjukanSertifikasi.kt
Lines: 249 | Size: 9263 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.Sertifikasi

import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.material3.Text
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.compose.ui.draw.clip

// Data class for available certifications
data class AvailableCertification(
    val id: String,
    val name: String,
    val description: String,
    val credentialBody: String,
    val benefits: String,
    val cost: String,
    val imageRes: Int
)

@Composable
fun AjukanSertifikasiScreen(navController: NavController) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(start = 20.dp, top = 30.dp, end = 20.dp)
    ) {
        TopBarProfile(
            title = "Ajukan Sertifikasi",
            step = "",
            iconResId = R.drawable.btn_back,
            onBackClick = { navController.popBackStack() }
        )

        Spacer(modifier = Modifier.height(24.dp))

        Text(
            "Sertifikasi Tersedia",
            fontWeight = FontWeight.Bold,
            fontFamily = PoppinsFontFamily,
            fontSize = 21.sp,
            color = Color(0xFF1A4218)
        )

        Spacer(modifier = Modifier.height(16.dp))

        CertificationListSection(navController)
    }
}

@Composable
fun CertificationListSection(navController: NavController) {
    // Hardcoded data for available certifications
    val availableCertifications = listOf(
        AvailableCertification(
            id = "CSR_ISO_26000",
            name = "Sertifikat CSR ISO 26000",
            description = "Sertifikasi untuk tanggung jawab sosial perusahaan sesuai dengan standar ISO 26000. Meningkatkan reputasi perusahaan dalam aspek keberlanjutan dan tanggung jawab sosial.",
            credentialBody = "Lembaga Sertifikasi Nasional",
            benefits = "Meningkatkan kredibilitas perusahaan dalam praktik CSR dan keberlanjutan",
            cost = "1500000.0",
            imageRes = R.drawable.iso_26000
        ),
        AvailableCertification(
            id = "ENV_ISO_14001",
            name = "Environmental Management ISO 14001",
            description = "Sertifikasi sistem manajemen lingkungan yang membantu organisasi mengelola dampak lingkungan secara efektif dan berkelanjutan.",
            credentialBody = "International Standards Organization",
            benefits = "Mengurangi dampak lingkungan dan meningkatkan efisiensi operasional",
            cost = "3000000.0",
            imageRes = R.drawable.iso_14001
        ),
        AvailableCertification(
            id = "PROPER_CERT",
            name = "PROPER Certification",
            description = "Program Penilaian Peringkat Kinerja Perusahaan dalam Pengelolaan Lingkungan untuk mengukur ketaatan perusahaan terhadap peraturan lingkungan.",
            credentialBody = "Kementerian Lingkungan Hidup",
            benefits = "Meningkatkan reputasi perusahaan dalam pengelolaan lingkungan",
            cost = "2800000.0",
            imageRes = R.drawable.proper
        ),
        AvailableCertification(
            id = "ECOLABEL_CERT",
            name = "EcoLabel Certification",
            description = "Sertifikasi label ramah lingkungan yang mengakui produk atau layanan dengan dampak lingkungan minimal.",
            credentialBody = "Green Certification Body",
            benefits = "Mengakui komitmen perusahaan terhadap produk ramah lingkungan",
            cost = "2200000.0",
            imageRes = R.drawable.ecolabel
        ),
        AvailableCertification(
            id = "ISCC_CERT",
            name = "ISCC Sustainability Certification",
            description = "International Sustainability and Carbon Certification untuk memastikan keberlanjutan dalam rantai pasokan global.",
            credentialBody = "ISCC System GmbH",
            benefits = "Memastikan keberlanjutan rantai pasokan dan mengurangi jejak karbon",
            cost = "2700000.0",
            imageRes = R.drawable.iscc
        )
    )

    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
    ) {
        availableCertifications.forEach { certification ->
            AvailableCertificationCard(
                data = certification,
                onSelect = {
                    // Navigate to DokumenOne with certification data
                    navController.navigate(
                        "dokumenone/${certification.id}/${certification.name}/${certification.description}/${certification.credentialBody}/${certification.benefits}/${certification.cost}"
                    )
                }
            )
            Spacer(modifier = Modifier.height(16.dp))
        }
    }
}

@Composable
fun AvailableCertificationCard(
    data: AvailableCertification,
    onSelect: () -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { onSelect() },
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.Top
            ) {
                // Certificate image
                Image(
                    painter = painterResource(id = data.imageRes),
                    contentDescription = "Certificate",
                    contentScale = ContentScale.Crop,
                    modifier = Modifier
                        .size(80.dp)
                        .clip(RoundedCornerShape(12.dp))
                )

                Spacer(modifier = Modifier.width(16.dp))

                // Certificate information
                Column(
                    modifier = Modifier.weight(1f)
                ) {
                    Text(
                        text = data.name,
                        fontWeight = FontWeight.Bold,
                        fontFamily = PoppinsFontFamily,
                        fontSize = 16.sp,
                        color = Color(0xFF1A4218)
                    )
                    
                    Spacer(modifier = Modifier.height(4.dp))
                    
                    Text(
                        text = "Penerbit: ${data.credentialBody}",
                        fontFamily = PoppinsFontFamily,
                        fontSize = 12.sp,
                        color = Color.Gray
                    )
                    
                    Spacer(modifier = Modifier.height(4.dp))
                    
                    Text(
                        text = "Biaya: Rp ${String.format("%,.0f", data.cost.toDouble())}",
                        fontFamily = PoppinsFontFamily,
                        fontSize = 12.sp,
                        color = Color(0xFF1A4218),
                        fontWeight = FontWeight.Medium
                    )
                }
            }

            Spacer(modifier = Modifier.height(12.dp))

            // Description
            Text(
                text = data.description,
                fontFamily = PoppinsFontFamily,
                fontSize = 14.sp,
                color = Color(0xFF333333),
                lineHeight = 20.sp
            )

            Spacer(modifier = Modifier.height(8.dp))

            // Benefits
            Text(
                text = "Manfaat: ${data.benefits}",
                fontFamily = PoppinsFontFamily,
                fontSize = 12.sp,
                color = Color(0xFF666666),
                lineHeight = 16.sp
            )
            
            Spacer(modifier = Modifier.height(12.dp))
            
            // Click to apply hint
            Text(
                text = "👆 Klik untuk ajukan sertifikasi ini",
                fontFamily = PoppinsFontFamily,
                fontSize = 12.sp,
                color = Color(0xFF1A4218),
                fontWeight = FontWeight.Medium
            )
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewAjukanSertifikasiScreen() {
    val navController = rememberNavController()
    AjukanSertifikasiScreen(navController)
}

================================================================================

FILE 69: app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\Berhasil.kt
Lines: 137 | Size: 5004 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.Sertifikasi
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun CertificationSuccessScreen(navController: NavController) {
    Box(
        modifier = Modifier
            .fillMaxSize()
    ) {
        Image(
            painter = painterResource(id = R.drawable.bg_sukses), // Background image dari drawable
            contentDescription = "Background",
            modifier = Modifier.fillMaxSize()
        )

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(24.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            Image(
                painter = painterResource(id = R.drawable.gambar_sertifikasi), // Ilustrasi sertifikat
                contentDescription = "Sertifikat",
                modifier = Modifier
                    .size(180.dp)
                    .padding(bottom = 24.dp)
            )

            Text(
                text = "Pengajuan Sertifikasi\nBerhasil!",
                textAlign = TextAlign.Center,
                fontFamily = PoppinsFontFamily,
                fontSize = 25.sp,
                fontWeight = FontWeight.Bold,
                color = Color.White
            )

            Spacer(modifier = Modifier.height(16.dp))

            Text(
                text = "Pengajuan Anda telah diterima dan sedang\n" +
                        "dalam proses verifikasi dokumen oleh tim auditor",
                fontSize = 15.sp,
                fontFamily = PoppinsFontFamily,
                textAlign = TextAlign.Center,
                color = Color.White
            )

            Spacer(modifier = Modifier.height(8.dp))

            Text(
                text = "Estimasi waktu proses: 10–30 hari kerja",
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                textAlign = TextAlign.Center,
                color = Color.White
            )

            Spacer(modifier = Modifier.height(24.dp))

            Text(
                text = "Notifikasi Email: ",
                fontSize = 12.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color.White
            )
            Text(
                text = "Perusahaan akan menerima email konfirmasi dan\nlink untuk melacak status pengajuan",
                fontSize = 12.sp,
                fontFamily = PoppinsFontFamily,
                textAlign = TextAlign.Center,
                color = Color.White
            )

            Spacer(modifier = Modifier.height(5.dp))

            Button(
                onClick = { navController.navigate("riwayatpengajuan") },
                colors = ButtonDefaults.buttonColors(containerColor = Color.Black),
                shape = RoundedCornerShape(8.dp),
                modifier = Modifier
                    .fillMaxWidth()
                    .height(48.dp)
            ) {
                Text("Lihat Detail Riwayat", color = Color.White, fontSize = 16.sp, fontWeight = FontWeight.Bold,  fontFamily = PoppinsFontFamily)
            }
            

            Spacer(modifier = Modifier.height(12.dp))

            Button(
                onClick = { navController.navigate("home") },
                colors = ButtonDefaults.buttonColors(containerColor = Color.White),
                shape = RoundedCornerShape(8.dp),
                modifier = Modifier
                    .fillMaxWidth()
                    .height(48.dp)
            ) {
                Text("Kembali ke Beranda", color = Color.Black, fontSize = 16.sp, fontWeight = FontWeight.Bold,  fontFamily = PoppinsFontFamily)
            }
        }
    }
}

@Preview()
@Composable
fun CertificationSuccessScreenPreview() {
    val navController = rememberNavController()
    CertificationSuccessScreen(navController)
}


================================================================================

FILE 70: app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\CertificationComponents.kt
Lines: 112 | Size: 4053 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.Sertifikasi

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.data.local.entity.CertificationEntity
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun CertificationEntityCard(
    data: CertificationEntity,
    navController: NavController
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 1.dp)
            .clickable { 
                // Navigate to certification detail with ID
                navController.navigate("certification_detail/${data.id}")
            },
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(4.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.Top
        ) {
            // Status indicator
            Card(
                modifier = Modifier
                    .size(60.dp)
                    .padding(end = 16.dp),
                colors = CardDefaults.cardColors(
                    containerColor = when (data.status) {
                        "approved" -> Color(0xFF4CAF50)
                        "rejected" -> Color(0xFFF44336)
                        "in_review" -> Color(0xFFFF9800)
                        else -> Color(0xFF2196F3)
                    }
                ),
                elevation = CardDefaults.cardElevation(2.dp)
            ) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = data.status.uppercase().take(2),
                        color = Color.White,
                        fontWeight = FontWeight.Bold,
                        fontSize = 12.sp,
                        fontFamily = PoppinsFontFamily
                    )
                }
            }

            Column(modifier = Modifier.weight(1f)) {
                Text(
                    data.name, 
                    fontWeight = FontWeight.Bold, 
                    fontSize = 16.sp,
                    fontFamily = PoppinsFontFamily
                )
                Text(
                    data.credentialBody, 
                    fontSize = 12.sp, 
                    color = Color.Gray,
                    fontFamily = PoppinsFontFamily
                )
                Text(
                    "Status: ${data.status.uppercase()}", 
                    fontSize = 11.sp,
                    fontFamily = PoppinsFontFamily,
                    color = when (data.status) {
                        "approved" -> Color(0xFF4CAF50)
                        "rejected" -> Color(0xFFF44336)
                        "in_review" -> Color(0xFFFF9800)
                        else -> Color(0xFF2196F3)
                    }
                )
                Text(
                    "Cost: $${data.cost}", 
                    fontSize = 11.sp,
                    color = Color.Gray,
                    fontFamily = PoppinsFontFamily
                )
                if (!data.isSynced) {
                    Text(
                        "Pending sync...", 
                        fontSize = 10.sp,
                        color = Color(0xFFFF9800),
                        fontFamily = PoppinsFontFamily
                    )
                }
            }
        }
    }
} 

================================================================================

FILE 71: app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\DetailSertifikasi.kt
Lines: 160 | Size: 5295 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.Sertifikasi

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController

@Composable
fun DetailSertifikasiScreen(navController: NavController) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(start = 20.dp, top = 40.dp, end = 20.dp)
            .padding(vertical = 16.dp)
    ) {
        TopBarProfile(
            title = "Detail Sertifikasi",
            step = "",
            iconResId = R.drawable.btn_back,
            onBackClick = { navController.popBackStack() }
        )

        Spacer(modifier = Modifier.height(24.dp))

        // Logo ISO
        Image(
            painter = painterResource(id = R.drawable.iso_26000), // Ganti dengan drawable iso kamu
            contentDescription = "ISO Logo",
            modifier = Modifier
                .size(100.dp)
                .align(Alignment.CenterHorizontally),
            contentScale = ContentScale.Fit
        )

        Spacer(modifier = Modifier.height(24.dp))

        Text(
            text = "Nama Sertifikasi",
            fontWeight = FontWeight.Bold,
            fontFamily = PoppinsFontFamily,
            fontSize = 14.sp
        )
        Text(
            text = "ISO 26000 - Sustainability",
            fontFamily = PoppinsFontFamily,
            fontSize = 14.sp
        )

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Lembaga Kredensial",
            fontWeight = FontWeight.Bold,
            fontFamily = PoppinsFontFamily,
            fontSize = 14.sp
        )
        Text(
            text = "International Organization for Standardization (ISO)",
            fontFamily = PoppinsFontFamily,
            fontSize = 14.sp
        )

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Deskripsi",
            fontWeight = FontWeight.Bold,
            fontFamily = PoppinsFontFamily,
            fontSize = 14.sp
        )
        Text(
            text = "Standar global untuk tanggung jawab sosial perusahaan, mencakup tata kelola, hak asasi manusia, lingkungan, praktik ketenagakerjaan, dan keterlibatan masyarakat.",
            fontSize = 14.sp
        )

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Manfaat",
            fontWeight = FontWeight.Bold,
            fontFamily = PoppinsFontFamily,
            fontSize = 14.sp
        )
        Text(
            text = "1. Meningkatkan reputasi perusahaan\n" +
                    "2. Memastikan kepatuhan terhadap standar internasional\n" +
                    "3. Meningkatkan daya saing bisnis",
            fontFamily = PoppinsFontFamily,
            fontSize = 14.sp
        )

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Biaya",
            fontWeight = FontWeight.Bold,
            fontFamily = PoppinsFontFamily,
            fontSize = 14.sp
        )

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(Color(0xFFF5F5F5), shape = RoundedCornerShape(8.dp))
                .padding(16.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(text = "Rp", fontWeight = FontWeight.Bold)
                Text(
                    text = "25.000.000",
                    fontWeight = FontWeight.Bold,
                    fontFamily = PoppinsFontFamily,
                    fontSize = 18.sp
                )
            }
        }

        Spacer(modifier = Modifier.weight(1f))

        Button(
            onClick = { navController.navigate("dokumenone") },
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF2F4019)),
            shape = RoundedCornerShape(8.dp),
            modifier = Modifier
                .fillMaxWidth()
                .height(48.dp)
        ) {
            Text(text = "Ajukan Sekarang", color = Color.White, fontSize = 16.sp, fontWeight = FontWeight.Bold, fontFamily = PoppinsFontFamily)
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewDetailSertifikasiScreen() {
    val navController = rememberNavController()
    DetailSertifikasiScreen(navController)
}

================================================================================

FILE 72: app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\DokumenOne.kt
Lines: 344 | Size: 13141 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.Sertifikasi

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.data.factory.CertificationFactory
import com.example.tumbuhnyata.data.factory.CertificationViewModelFactory
import com.example.tumbuhnyata.viewmodel.AjukanSertifikasiViewModel
import java.text.SimpleDateFormat
import java.util.*

// Data class for certification options
data class CertificationOption(
    val id: String,
    val name: String,
    val description: String,
    val credentialBody: String,
    val benefits: String,
    val cost: String,
    val imageRes: Int
)

@Composable
fun DokumenOne(
    navController: NavController,
    certificationId: String? = null,
    certificationName: String? = null,
    certificationDescription: String? = null,
    certificationCredentialBody: String? = null,
    certificationBenefits: String? = null,
    certificationCost: String? = null
) {
    val context = LocalContext.current
    val certificationRepository = remember { CertificationFactory.createCertificationRepository(context) }
    val viewModelFactory = remember { CertificationViewModelFactory(certificationRepository) }
    val viewModel: AjukanSertifikasiViewModel = viewModel(factory = viewModelFactory)
    
    val state by viewModel.state.collectAsState()
    
    // Form fields state
    var fileCSR by remember { mutableStateOf<String?>(null) }
    var fileLingkungan by remember { mutableStateOf<String?>(null) }
    var fileImplementasi by remember { mutableStateOf<String?>(null) }
    var filePernyataan by remember { mutableStateOf<String?>(null) }

    val isBothFilesUploaded = fileCSR != null && fileLingkungan != null && fileImplementasi != null && filePernyataan != null
    
    // Function to submit certification with data from navigation
    fun submitCertificationWithData() {
        if (certificationName != null && certificationDescription != null && 
            certificationCredentialBody != null && certificationBenefits != null && 
            certificationCost != null) {
            
            // Set all form fields with data from navigation
            viewModel.updateFormField("name", certificationName)
            viewModel.updateFormField("description", certificationDescription)
            viewModel.updateFormField("credentialBody", certificationCredentialBody)
            viewModel.updateFormField("benefits", certificationBenefits)
            viewModel.updateFormField("cost", certificationCost)
            
            // Add hardcoded supporting documents as proper JSON array
            viewModel.clearSupportingDocuments()
            
            // Add each document separately (ViewModel should handle JSON array creation)
            viewModel.addSupportingDocument("https://example.com/csr_2024.pdf", "CSR_2024.pdf")
            viewModel.addSupportingDocument("https://example.com/kebijakan.pdf", "Kebijakan_Enviro.pdf")
            
            // Submit the certification
            viewModel.submitCertification()
        }
    }
    
    // Show success dialog when submission is successful
    if (state.submissionSuccess) {
        AlertDialog(
            onDismissRequest = { 
                viewModel.clearSubmissionStatus()
                navController.navigate("berhasil")
            },
            title = { Text("Success") },
            text = { Text(state.submissionMessage ?: "Certification application submitted successfully!") },
            confirmButton = {
                Button(
                    onClick = { 
                        viewModel.clearSubmissionStatus()
                        navController.navigate("berhasil")
                    }
                ) {
                    Text("OK")
                }
            }
        )
    }
    
    // Show error dialog when there's an error
    state.error?.let { error ->
        AlertDialog(
            onDismissRequest = { viewModel.clearError() },
            title = { Text("Error") },
            text = { Text(error) },
            confirmButton = {
                Button(onClick = { viewModel.clearError() }) {
                    Text("OK")
                }
            }
        )
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF8F8F8))
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(start = 20.dp, top = 40.dp, end = 20.dp)
        ) {
            TopBarProfile(
                title = "Verifikasi",
                step = "",
                iconResId = R.drawable.btn_back,
                onBackClick = { navController.popBackStack() }
            )

            Spacer(modifier = Modifier.height(50.dp))
            
            // Show selected certification info
            certificationName?.let { name ->
                Text(
                    text = "Sertifikasi Dipilih:",
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Medium,
                    color = Color(0xFF666666)
                )
                Text(
                    text = name,
                    fontSize = 18.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF1A4218),
                    modifier = Modifier.padding(bottom = 8.dp)
                )
                
                certificationCost?.let { cost ->
                    Text(
                        text = "Biaya: Rp ${String.format("%,.0f", cost.toDouble())}",
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Medium,
                        color = Color(0xFF1A4218)
                    )
                }
                
                Spacer(modifier = Modifier.height(24.dp))
            }
            
            Text(
                text = "Unggah Dokumen Pendukung",
                fontSize = 22.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(start = 2.dp)
            )
            Text(
                text = "Unggah dokumen pendukung untuk melanjutkan pengajuan sertifikasi",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF4B4B4B),
                modifier = Modifier.padding(start = 2.dp, top = 10.dp, end = 5.dp)
            )

            UploadField(
                fileName = fileCSR,
                placeholder = "Akta Pendirian",
                onUploadClick = { fileCSR = "CSR_Report_2023.pdf" }, // Simulasi upload
                onDelete = { fileCSR = null },
                modifier = Modifier.padding(top=40.dp)
            )

            UploadField(
                fileName = fileLingkungan,
                placeholder = "SKDP",
                onUploadClick = { fileLingkungan = "Green_Policy_Paragon.pdf" }, // Simulasi upload
                onDelete = { fileLingkungan = null },
                modifier = Modifier.padding(top=20.dp)
            )
            UploadField(
                fileName = fileImplementasi,
                placeholder = "Laporan Implementasi",
                onUploadClick = { fileImplementasi = "Project_TreePlanting.pdf" }, // Simulasi upload
                onDelete = { fileImplementasi = null },
                modifier = Modifier.padding(top=20.dp)
            )

            UploadField(
                fileName = filePernyataan,
                placeholder = "Surat Pernyataan",
                onUploadClick = { filePernyataan = "Compliance_Declaration.pdf" }, // Simulasi upload
                onDelete = { filePernyataan = null },
                modifier = Modifier.padding(top=20.dp)
            )

            Text(
                text = "*Jika perusahaan anda tidak mempunyai beberapa laporan di atas anda bisa mendownload template di sini",
                fontSize = 12.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF4B4B4B),
                modifier = Modifier.padding(start = 2.dp, top = 10.dp, end = 5.dp)
            )

            Spacer(modifier = Modifier.height(80.dp))

            Button(
                onClick = { 
                    if (isBothFilesUploaded) {
                        submitCertificationWithData()
                    }
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp)
                    .padding(start = 1.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(
                    if (isBothFilesUploaded) Color(0xFF27361F) else Color(0xFF989898)
                ),
                enabled = isBothFilesUploaded && !state.isSubmitting
            ) {
                if (state.isSubmitting) {
                    CircularProgressIndicator(
                        modifier = Modifier.size(20.dp),
                        color = Color.White
                    )
                } else {
                    Text(
                        text = "Ajukan Sertifikasi",
                        color = Color.White,
                        fontSize = 20.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        textAlign = TextAlign.Center
                    )
                }
            }
        }
    }
}

@Composable
fun UploadField(
    fileName: String?,
    placeholder: String,
    onUploadClick: () -> Unit,
    onDelete: () -> Unit,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier
            .fillMaxWidth()
    ) {

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp)
                .border(2.dp, Color(0xFFB9B9B9), shape = RoundedCornerShape(10.dp))
                .padding(horizontal = 16.dp)
                .clickable { onUploadClick() },
            contentAlignment = Alignment.CenterStart
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.fillMaxWidth()
            ) {
                Image(
                    painter = painterResource(id = if (fileName != null) R.drawable.ic_doc else R.drawable.ic_upload),
                    contentDescription = "Icon",
                    modifier = Modifier.size(24.dp)
                )
                Spacer(modifier = Modifier.width(12.dp))

                Text(
                    text = fileName ?: placeholder,
                    fontSize = 16.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = if (fileName != null) FontWeight.SemiBold else FontWeight.Normal,
                    color = if (fileName != null) Color(0xFF686868) else Color(0xFFB8B8B8),
                    modifier = Modifier.weight(1f)
                )

                if (fileName != null) {
                    Image(
                        painter = painterResource(id = R.drawable.ic_cancel),
                        contentDescription = "Delete",
                        modifier = Modifier
                            .size(20.dp)
                            .clickable { onDelete() }
                    )
                }
            }
        }
    }
}

@Preview
@Composable
fun PreviewDokumenOne() {
    DokumenOne(
        navController = rememberNavController(),
        certificationName = "Sertifikat CSR ISO 26000",
        certificationCost = "1500000.0"
    )
}

================================================================================

FILE 73: app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\RiwayatPengajuan.kt
Lines: 237 | Size: 8485 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.Sertifikasi

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.material3.Text
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.tumbuhnyata.data.local.entity.CertificationEntity
import com.example.tumbuhnyata.data.factory.CertificationFactory
import com.example.tumbuhnyata.data.factory.CertificationViewModelFactory
import com.example.tumbuhnyata.viewmodel.SertifikasiViewModel
import java.text.SimpleDateFormat
import java.util.*

@Composable
fun RiwayatPengajuanScreen(navController: NavController) {
    val context = LocalContext.current
    val certificationRepository = remember { CertificationFactory.createCertificationRepository(context) }
    val viewModelFactory = remember { CertificationViewModelFactory(certificationRepository) }
    val viewModel: SertifikasiViewModel = viewModel(factory = viewModelFactory)
    val state by viewModel.state.collectAsState()

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(start = 20.dp, top = 30.dp, end = 20.dp)
    ) {
        TopBarProfile(
            title = "Riwayat Pengajuan",
            step = "",
            iconResId = R.drawable.btn_back,
            onBackClick = { navController.popBackStack() }
        )

        Spacer(modifier = Modifier.height(24.dp))

        Text(
            "Riwayat Pengajuan Sertifikasi",
            fontWeight = FontWeight.Bold,
            fontFamily = PoppinsFontFamily,
            fontSize = 21.sp,
            color = Color(0xFF1A4218)
        )

        when {
            state.isLoading -> {
                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                    CircularProgressIndicator()
                }
            }
            state.error != null -> {
                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                    Text(text = state.error ?: "An error occurred")
                }
            }
            else -> {
                RiwayatPengajuanSection(state.certificationList)
            }
        }
    }
}

@Composable
fun RiwayatPengajuanSection(certificationList: List<CertificationEntity>) {
    Spacer(modifier = Modifier.height(8.dp))

    if (certificationList.isEmpty()) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .padding(32.dp),
            contentAlignment = Alignment.Center
        ) {
            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                Text(
                    "Belum ada riwayat pengajuan",
                    fontFamily = PoppinsFontFamily,
                    fontSize = 16.sp,
                    color = Color.Gray
                )
            }
        }
    } else {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .verticalScroll(rememberScrollState())
        ) {
            certificationList.forEach { certification ->
                RiwayatPengajuanCard(certification)
                Spacer(modifier = Modifier.height(12.dp))
            }
        }
    }
}

@Composable
fun RiwayatPengajuanCard(data: CertificationEntity) {
    val statusColor = when (data.status) {
        "submitted" -> Color(0xFF2196F3) // Blue
        "in_review" -> Color(0xFFFF9800) // Orange
        "approved" -> Color(0xFF4CAF50) // Green
        "rejected" -> Color(0xFFF44336) // Red
        else -> Color.Gray
    }
    
    val statusText = when (data.status) {
        "submitted" -> "Diajukan"
        "in_review" -> "Dalam Review"
        "approved" -> "Disetujui"
        "rejected" -> "Ditolak"
        else -> data.status
    }
    
    val imageRes = when {
        data.name.contains("ISO 26000", ignoreCase = true) -> R.drawable.iso_26000
        data.name.contains("ISO 14001", ignoreCase = true) -> R.drawable.iso_14001
        data.name.contains("PROPER", ignoreCase = true) -> R.drawable.proper
        data.name.contains("EcoLabel", ignoreCase = true) -> R.drawable.ecolabel
        data.name.contains("ISCC", ignoreCase = true) -> R.drawable.iscc
        else -> R.drawable.iso_26000 // Default
    }
    
    // Format submission date
    val formattedDate = try {
        val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
        val date = dateFormat.parse(data.submissionDate)
        val displayFormat = SimpleDateFormat("dd MMM yyyy", Locale.getDefault())
        displayFormat.format(date ?: Date())
    } catch (e: Exception) {
        data.submissionDate
    }

    Card(
        modifier = Modifier
            .fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
        shape = RoundedCornerShape(12.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Certificate icon
            Image(
                painter = painterResource(id = imageRes),
                contentDescription = "Certificate Icon",
                modifier = Modifier
                    .size(60.dp)
                    .padding(end = 16.dp)
            )

            // Certificate details
            Column(modifier = Modifier.weight(1f)) {
                Text(
                    text = data.name,
                    fontWeight = FontWeight.Bold,
                    fontFamily = PoppinsFontFamily,
                    fontSize = 16.sp,
                    color = Color(0xFF1A4218)
                )
                
                Spacer(modifier = Modifier.height(4.dp))
                
                Text(
                    text = "Status: $statusText",
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    color = statusColor,
                    fontWeight = FontWeight.Medium
                )
                
                Spacer(modifier = Modifier.height(2.dp))
                
                Text(
                    text = "Diajukan: $formattedDate",
                    fontFamily = PoppinsFontFamily,
                    fontSize = 12.sp,
                    color = Color.Gray
                )
                
                Spacer(modifier = Modifier.height(2.dp))
                
                Text(
                    text = "Biaya: ${String.format("%.0f", data.cost)}",
                    fontFamily = PoppinsFontFamily,
                    fontSize = 12.sp,
                    color = Color.Gray
                )
                
                // Show sync status if not synced
                if (!data.isSynced) {
                    Spacer(modifier = Modifier.height(2.dp))
                    Text(
                        text = "⏳ Belum tersinkron",
                        fontFamily = PoppinsFontFamily,
                        fontSize = 11.sp,
                        color = Color(0xFFFF9800)
                    )
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewRiwayatPengajuanScreen() {
    val navController = rememberNavController()
    RiwayatPengajuanScreen(navController)
}

================================================================================

FILE 74: app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\Sertifikasi.kt
Lines: 391 | Size: 12745 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.Sertifikasi

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.KeyboardArrowRight
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.draw.clip
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.ui.components.BottomNavigationBar

@Composable
fun SertifikasiScreen(navController: NavController) {
    Scaffold(
        bottomBar = {
            BottomNavigationBar(navController = navController)
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .padding(innerPadding)
                .fillMaxSize()
                .verticalScroll(rememberScrollState())
                .padding(16.dp)
        ) {
            Spacer(modifier = Modifier.height(24.dp))
            BannerSection(navController)
            Spacer(modifier = Modifier.height(24.dp))
            SertifikasiSection(navController)
            Spacer(modifier = Modifier.height(24.dp))
            RiwayatPengajuanSection(navController)
        }
    }
}

@Composable
fun BannerSection(navController: NavController) {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .height(140.dp)
            .clip(RoundedCornerShape(16.dp))
    ) {
        // Gambar background banner
        Image(
            painter = painterResource(id = R.drawable.banner_sertifikasi),
            contentDescription = "Banner Sertifikasi",
            contentScale = ContentScale.Crop,
            modifier = Modifier
                .matchParentSize()
        )

        // Teks & tombol di atas gambar
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.Center
        ) {
            Text(
                text = "Naikkan Kredibilitas",
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color.White
            )
            Text(
                text = "Perusahaan Anda",
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color.White
            )
            Spacer(modifier = Modifier.height(4.dp))
            Text(
                text = "Ajukan Sertifikasi Sekarang!",
                fontSize = 12.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
            )

            Spacer(modifier = Modifier.height(8.dp))

            Button(
                onClick = { navController.navigate("ajukansertifikasi") },
                shape = RoundedCornerShape(8.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color.White),
            ) {
                Text("Ajukan Sertifikasi", color = Color.Black, fontFamily = PoppinsFontFamily)
                Spacer(modifier = Modifier.width(4.dp))
                Icon(Icons.Default.Add, contentDescription = null, tint = Color.Black)
            }
        }
    }
}

data class Sertifikasi(
    val title: String,
    val code: String,
    val issued: String,
    val credentialId: String,
    val imageRes: Int
)

@Composable
fun SertifikasiSection(navController: NavController) {
    Text(
        "Sertifikasi Anda",
        fontWeight = FontWeight.Bold,
        fontFamily = PoppinsFontFamily,
        fontSize = 21.sp,
        color = Color(0xFF1A4218)
    )
    Spacer(modifier = Modifier.height(8.dp))

    // Hardcoded data for Sertifikasi Anda
    val sertifikasiList = listOf(
        Sertifikasi(
            title = "Sertifikat CSR ISO 26000",
            code = "CSR-ISO-26000",
            issued = "Lembaga Sertifikasi Nasional",
            credentialId = "CSR2024001",
            imageRes = R.drawable.iso_26000
        ),
        Sertifikasi(
            title = "Sertifikat Sustainable Development",
            code = "SD-ENV-2024",
            issued = "Green Certification Body",
            credentialId = "SD2024002",
            imageRes = R.drawable.proper
        ),
        Sertifikasi(
            title = "Environmental Management ISO 14001",
            code = "ENV-ISO-14001",
            issued = "International Standards Org",
            credentialId = "ENV2024003",
            imageRes = R.drawable.iso_14001
        )
    )

    sertifikasiList.take(3).forEach { sertifikasi ->
        SertifikasiCard(sertifikasi, navController)
        Spacer(modifier = Modifier.height(12.dp))
    }

    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Button(
            onClick = { navController.navigate("sertifikasianda") },
            modifier = Modifier
                .weight(1f)
                .fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(
                containerColor = Color.Transparent
            ),
            border = BorderStroke(1.dp, Color(0xFF1A4218))
        ) {
            Text(
                "Lihat Semua",
                color = Color(0xFF1A4218),
                fontFamily = PoppinsFontFamily
            )
        }
    }
}

@Composable
fun SertifikasiCard(data: Sertifikasi, navController: NavController) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .height(160.dp),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Gambar sertifikat
            Box(
                modifier = Modifier
                    .size(80.dp)
                    .clip(RoundedCornerShape(12.dp))
                    .background(Color(0xFFF5F5F5))
            ) {
                Image(
                    painter = painterResource(id = data.imageRes),
                    contentDescription = "Sertifikat",
                    contentScale = ContentScale.Crop,
                    modifier = Modifier.fillMaxSize()
                )
            }

            Spacer(modifier = Modifier.width(16.dp))

            // Informasi sertifikat
            Column(
                modifier = Modifier.weight(1f),
                verticalArrangement = Arrangement.Center
            ) {
                Text(
                    text = data.title,
                    fontWeight = FontWeight.Bold,
                    fontFamily = PoppinsFontFamily,
                    fontSize = 14.sp,
                    color = Color(0xFF1A4218)
                )
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = "Kode: ${data.code}",
                    fontFamily = PoppinsFontFamily,
                    fontSize = 12.sp,
                    color = Color.Gray
                )
                Spacer(modifier = Modifier.height(2.dp))
                Text(
                    text = "Penerbit: ${data.issued}",
                    fontFamily = PoppinsFontFamily,
                    fontSize = 12.sp,
                    color = Color.Gray
                )
                Spacer(modifier = Modifier.height(2.dp))
                Text(
                    text = "ID: ${data.credentialId}",
                    fontFamily = PoppinsFontFamily,
                    fontSize = 12.sp,
                    color = Color.Gray
                )
            }

            // Arrow icon
            Icon(
                Icons.Default.KeyboardArrowRight,
                contentDescription = "View Details",
                tint = Color(0xFF1A4218),
                modifier = Modifier.size(24.dp)
            )
        }
    }
}

data class Pengajuan(
    val status: String,
    val color: Color,
    val sertifikasi: String,
    val kategori: String,
    val pengajuan: String,
    val deadline: String
)

@Composable
fun RiwayatPengajuanSection(navController: NavController) {
    Text(
        "Riwayat Pengajuan",
        fontWeight = FontWeight.Bold,
        fontFamily = PoppinsFontFamily,
        fontSize = 21.sp,
        color = Color(0xFF1A4218)
    )
    Spacer(modifier = Modifier.height(8.dp))

    // Card riwayat
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .height(100.dp),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Icon atau status indicator
            Box(
                modifier = Modifier
                    .size(50.dp)
                    .clip(CircleShape)
                    .background(Color(0xFFE8F5E8)),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = "⏳",
                    fontSize = 20.sp
                )
            }

            Spacer(modifier = Modifier.width(16.dp))

            // Informasi pengajuan
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = "Sertifikat Environmental Management",
                    fontWeight = FontWeight.Bold,
                    fontFamily = PoppinsFontFamily,
                    fontSize = 14.sp,
                    color = Color(0xFF1A4218)
                )
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = "Status: Dalam Review",
                    fontFamily = PoppinsFontFamily,
                    fontSize = 12.sp,
                    color = Color(0xFFFF9800)
                )
                Text(
                    text = "Diajukan: 25 Nov 2024",
                    fontFamily = PoppinsFontFamily,
                    fontSize = 12.sp,
                    color = Color.Gray
                )
            }

            // Arrow icon
            Icon(
                Icons.Default.KeyboardArrowRight,
                contentDescription = "View Details",
                tint = Color(0xFF1A4218),
                modifier = Modifier.size(24.dp)
            )
        }
    }

    Spacer(modifier = Modifier.height(12.dp))

    // Tombol lihat semua riwayat
    TextButton(
        onClick = { navController.navigate("riwayatpengajuan") },
        modifier = Modifier.fillMaxWidth()
    ) {
        Text(
            "Lihat Semua Riwayat",
            color = Color(0xFF1A4218),
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.Medium
        )
        Spacer(modifier = Modifier.width(4.dp))
        Icon(
            Icons.Default.KeyboardArrowRight,
            contentDescription = null,
            tint = Color(0xFF1A4218),
            modifier = Modifier.size(16.dp)
        )
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewSertifikasiScreen() {
    val navController = rememberNavController()
    SertifikasiScreen(navController)
}

================================================================================

FILE 75: app\src\main\java\com\example\tumbuhnyata\ui\Sertifikasi\SertifikasiAnda.kt
Lines: 153 | Size: 5371 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.Sertifikasi

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.KeyboardArrowRight
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.material3.Text
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController

@Composable
fun SertifikasiAndaScreen(
    navController: NavController
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(start = 20.dp, top = 40.dp, end = 20.dp)
    ) {
        TopBarProfile(
            title = "Sertifikasi Anda",
            step = "",
            iconResId = R.drawable.btn_back,
            onBackClick = { navController.popBackStack() }
        )

        Spacer(modifier = Modifier.height(24.dp))
        SertifikasiAndaSection()
    }
}

data class SertifikasiAnda(
    val title: String,
    val code: String,
    val issued: String,
    val credentialId: String,
    val imageRes: Int
)

@Composable
fun SertifikasiAndaSection() {
    val sertifikasiList = listOf(
        SertifikasiAnda(
            title = "Environmental Management System",
            code = "ISO 14001",
            issued = "Issued Jun 2024 - Expires Jun 2027",
            credentialId = "Credential ID ABC123XYZ",
            imageRes = R.drawable.iso_14001
        ),
        SertifikasiAnda(
            title = "Social Responsibility",
            code = "ISO 26000",
            issued = "Issued Feb 2023 - Expires Feb 2026",
            credentialId = "Credential ID DEF456LMN",
            imageRes = R.drawable.iso_26000
        ),
        SertifikasiAnda(
                title = "Carbon Footprint Certification",
        code = "ISCC",
        issued = "Issued Feb 2023 - Expires Feb 2026",
        credentialId = "Credential ID DEF456LMN",
        imageRes = R.drawable.iscc
        )
    )

    Spacer(modifier = Modifier.height(8.dp))

    sertifikasiList.forEach {
        SertifikasiAndaCard(it)
        Spacer(modifier = Modifier.height(12.dp))
    }
}


@Composable
fun SertifikasiAndaCard(data: SertifikasiAnda) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 1.dp),
        colors = CardDefaults.cardColors(containerColor = Color.Transparent),
        elevation = CardDefaults.cardElevation(0.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.Top
        ) {
            Image(
                painter = painterResource(id = data.imageRes),
                contentDescription = "Sertifikasi Icon",
                modifier = Modifier
                    .size(78.dp)
                    .padding(end = 16.dp),
                contentScale = ContentScale.Fit
            )

            Column(modifier = Modifier.weight(1f)) {
                Text(data.title, fontWeight = FontWeight.Bold, fontFamily = PoppinsFontFamily, fontSize = 17.sp)
                Text(data.code, fontSize = 14.sp, fontFamily = PoppinsFontFamily, color = Color.Gray)
                Text(data.issued, fontFamily = PoppinsFontFamily, fontSize = 12.sp)
                Text(data.credentialId, fontFamily = PoppinsFontFamily, fontSize = 12.sp, color = Color.Gray)
                Spacer(modifier = Modifier.height(4.dp))
                Button(
                    onClick = { /* show credential */ },
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFFF8F8F8),
                        contentColor = Color(0xFF4B4B4B)
                    ),
                    shape = RoundedCornerShape(5.dp),
                    border = BorderStroke(1.dp, Color(0xFF4B4B4B))
                ) {
                    Text("show credential", fontFamily = PoppinsFontFamily, color = Color(0xFF4B4B4B), fontSize = 12.sp)
                    Icon(
                        Icons.Default.KeyboardArrowRight,
                        contentDescription = null,
                        tint = Color(0xFF4B4B4B)
                    )
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewSertifikasiAndaScreen() {
    val navController = rememberNavController()
    SertifikasiAndaScreen(navController)
}

================================================================================

FILE 76: app\src\main\java\com\example\tumbuhnyata\ui\component\ErrorSnackbar.kt
Lines: 54 | Size: 1589 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.component

import androidx.compose.material3.SnackbarDuration
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.SnackbarResult
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.remember
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.launch

@Composable
fun ErrorSnackbar(
    error: String?,
    onDismiss: () -> Unit,
    onRetry: () -> Unit,
    snackbarHostState: SnackbarHostState = remember { SnackbarHostState() }
) {
    error?.let {
        LaunchedEffect(error) {
            val result = snackbarHostState.showSnackbar(
                message = error,
                actionLabel = "Coba Lagi",
                duration = SnackbarDuration.Long
            )
            when (result) {
                SnackbarResult.ActionPerformed -> onRetry()
                SnackbarResult.Dismissed -> onDismiss()
            }
        }
    }
    
    SnackbarHost(hostState = snackbarHostState)
}

fun showErrorSnackbar(
    scope: CoroutineScope,
    snackbarHostState: SnackbarHostState,
    message: String,
    actionLabel: String = "Coba Lagi",
    onAction: () -> Unit = {}
) {
    scope.launch {
        val result = snackbarHostState.showSnackbar(
            message = message,
            actionLabel = actionLabel,
            duration = SnackbarDuration.Long
        )
        if (result == SnackbarResult.ActionPerformed) {
            onAction()
        }
    }
} 

================================================================================

FILE 77: app\src\main\java\com\example\tumbuhnyata\ui\component\SuccessDialog.kt
Lines: 74 | Size: 2534 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.component

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import com.example.tumbuhnyata.R

@Composable
fun SuccessDialog(
    message: String,
    onDismiss: () -> Unit
) {
    Dialog(onDismissRequest = onDismiss) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            shape = RoundedCornerShape(8.dp),
            colors = CardDefaults.cardColors(containerColor = Color.White)
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Image(
                    painter = painterResource(id = R.drawable.ic_download),
                    contentDescription = "Success",
                    modifier = Modifier.size(48.dp)
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Text(
                    text = message,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Medium,
                    fontFamily = poppins,
                    textAlign = TextAlign.Center
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Button(
                    onClick = onDismiss,
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(8.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF2C3E1F)
                    )
                ) {
                    Text(
                        text = "Ok",
                        fontFamily = poppins,
                        fontWeight = FontWeight.SemiBold
                    )
                }
            }
        }
    }
} 

================================================================================

FILE 78: app\src\main\java\com\example\tumbuhnyata\ui\components\BottomNavBarProfile.kt
Lines: 75 | Size: 2966 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun BottomNavBarProfile(selectedItem: Int, onItemSelected: (Int) -> Unit) {
    val items = listOf(
        NavigationItem("Beranda", R.drawable.ic_navbar_home),
        NavigationItem("Sertifikasi", R.drawable.ic_navbar_certification),
        NavigationItem("Workshop", R.drawable.ic_navbar_workshop),
        NavigationItem("Profil", R.drawable.ic_navbar_profile)
    )

    Surface(
        modifier = Modifier
            .fillMaxWidth()
            .height(100.dp)
            .padding(top = 2.dp),
        color = Color.White,
        shadowElevation = 20.dp,
        shape = RoundedCornerShape(topStart = 20.dp, topEnd = 20.dp),
    ) {
        Row(
            modifier = Modifier.fillMaxSize(),
            horizontalArrangement = Arrangement.SpaceAround,
            verticalAlignment = Alignment.CenterVertically
        ) {
            items.forEachIndexed { index, item ->
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    modifier = Modifier
                        .weight(1f)
                        .clickable { onItemSelected(index) }
                        .padding(vertical = 20.dp)
                        .width(98.dp)
                ) {
                    Icon(
                        painter = painterResource(id = item.icon),
                        contentDescription = item.label,
                        tint = if (index == selectedItem) Color(0xFF27361F) else Color(0xFF888888),
                        modifier = Modifier.size(30.dp)
                    )

                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = item.label,
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        letterSpacing = 0.sp,
                        textAlign = TextAlign.Center,
                        lineHeight = 10.sp,
                        fontWeight = if (index == selectedItem) FontWeight.Medium else FontWeight.Normal,
                        color = if (index == selectedItem) Color(0xFF27361F) else Color(0xFF888888)
                    )
                }
            }
        }
    }
}

data class NavigationItem(val label: String, val icon: Int)

================================================================================

FILE 79: app\src\main\java\com\example\tumbuhnyata\ui\components\BottomNavigationBar.kt
Lines: 58 | Size: 2421 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.size
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import androidx.navigation.compose.currentBackStackEntryAsState
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.model.BottomNavItem
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun BottomNavigationBar(navController: NavController) {
    val items = listOf(
        BottomNavItem("Beranda", "home", R.drawable.ic_unhome, R.drawable.ic_home),
        BottomNavItem("Sertifikasi", "sertifikasi", R.drawable.ic_unsertif, R.drawable.ic_sertif),
        BottomNavItem("Workshop", "workshop", R.drawable.ic_unwork, R.drawable.ic_work),
        BottomNavItem("Profil", "profile", R.drawable.ic_unprofile, R.drawable.ic_profile)
    )

    val navBackStackEntry = navController.currentBackStackEntryAsState().value
    val currentRoute = navBackStackEntry?.destination?.route

    NavigationBar(
        containerColor = Color.White
    ) {
        items.forEach { item ->
            val isSelected = currentRoute == item.route
            NavigationBarItem(
                icon = {
                    Image(
                        painter = painterResource(id = if (isSelected) item.selectedIconRes else item.unselectedIconRes),
                        contentDescription = item.label,
                        modifier = Modifier.size(24.dp)
                    )
                },
                label = { Text(item.label, fontFamily = PoppinsFontFamily, color = if (isSelected) Color(0xFF27361F) else Color(0xFF888888)) },
                selected = isSelected,
                onClick = {
                    if (currentRoute != item.route) {
                        navController.navigate(item.route) {
                            launchSingleTop = true
                            restoreState = true
                            popUpTo(navController.graph.startDestinationId) {
                                saveState = true
                            }
                        }
                    }
                }
            )
        }
    }
}


================================================================================

FILE 80: app\src\main\java\com\example\tumbuhnyata\ui\components\CsrCard.kt
Lines: 271 | Size: 9492 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.component

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.DeleteOutline
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.model.CsrHistoryItem
import com.example.tumbuhnyata.data.model.SubStatus
import com.example.tumbuhnyata.data.model.getSubStatusEmoji
import com.example.tumbuhnyata.data.model.statusToSubStatus
import java.text.SimpleDateFormat
import java.util.Locale

val poppins = FontFamily(
    Font(R.font.poppins_regular, FontWeight.Normal),
    Font(R.font.poppins_medium, FontWeight.Medium),
    Font(R.font.poppins_semibold, FontWeight.SemiBold),
    Font(R.font.poppins_bold, FontWeight.Bold)
)

@Composable
fun CsrCard(
    item: CsrHistoryItem, 
    onClick: () -> Unit = {},
    onDelete: ((CsrHistoryItem) -> Unit)? = null
) {
    var showDeleteDialog by remember { mutableStateOf(false) }
    
    val subStatus = statusToSubStatus(item.status)

    Row(
        modifier = Modifier
            .clickable { onClick() }
            .padding(horizontal = 16.dp, vertical = 6.dp)
            .fillMaxWidth()
            .height(IntrinsicSize.Min)
    ) {
        // Strip warna kiri
        Box(
            modifier = Modifier
                .width(20.dp)
                .fillMaxHeight()
                .clip(RoundedCornerShape(topStart = 6.dp, bottomStart = 6.dp))
                .background(Color(android.graphics.Color.parseColor(subStatus.colorHex)))
        )

        // Konten utama kartu
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(
                    color = Color.White,
                    shape = RoundedCornerShape(topEnd = 6.dp, bottomEnd = 6.dp)
                )
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
            ) {
                Text(
                    text = item.programName,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold,
                    fontFamily = poppins
                )
                Text(
                    text = item.partnerName,
                    fontSize = 14.sp,
                    color = Color.Gray,
                    fontFamily = poppins
                )
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "Status : ${formatStatus(subStatus)} ${getSubStatusEmoji(subStatus)}",
                    fontSize = 14.sp,
                    fontWeight = FontWeight.SemiBold,
                    fontFamily = poppins
                )

                Spacer(modifier = Modifier.height(8.dp))
                Divider(color = Color.LightGray, thickness = 0.5.dp)
                Spacer(modifier = Modifier.height(12.dp))

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    // Kategori
                    Column(
                        modifier = Modifier.weight(1f)
                    ) {
                        Text(
                            "Kategori",
                            fontSize = 12.sp,
                            fontWeight = FontWeight.SemiBold,
                            fontFamily = poppins
                        )
                        Text(item.category, fontSize = 14.sp, fontFamily = poppins)
                    }

                    Spacer(modifier = Modifier.width(8.dp))
                    Box(
                        modifier = Modifier
                            .fillMaxHeight()
                            .width(0.5.dp)
                            .background(Color.LightGray)
                    )

                    // Lokasi
                    Spacer(modifier = Modifier.width(8.dp))
                    Column(
                        modifier = Modifier.weight(1f)
                    ) {
                        Text(
                            "Lokasi",
                            fontSize = 12.sp,
                            fontWeight = FontWeight.SemiBold,
                            fontFamily = poppins
                        )
                        Text(item.location, fontSize = 14.sp, fontFamily = poppins)
                    }

                    Spacer(modifier = Modifier.width(8.dp))
                    Box(
                        modifier = Modifier
                            .fillMaxHeight()
                            .width(0.5.dp)
                            .background(Color.LightGray)
                    )

                    // Periode
                    Spacer(modifier = Modifier.width(8.dp))
                    Column(
                        modifier = Modifier.weight(1f)
                    ) {
                        Text(
                            "Periode",
                            fontSize = 12.sp,
                            fontWeight = FontWeight.SemiBold,
                            fontFamily = poppins
                        )
                        Text(formatPeriod(item.startDate, item.endDate), fontSize = 14.sp, fontFamily = poppins)
                    }
                }
            }
            
            // Delete icon di pojok kanan atas
            if (onDelete != null) {
                IconButton(
                    onClick = { showDeleteDialog = true },
                    modifier = Modifier
                        .align(Alignment.TopEnd)
                        .size(40.dp)
                ) {
                    Icon(
                        imageVector = Icons.Default.DeleteOutline,
                        contentDescription = "Hapus CSR",
                        tint = Color(0xFFE74C3C),
                        modifier = Modifier.size(24.dp)
                    )
                }
            }
        }
    }
    
    // Confirmation Dialog
    if (showDeleteDialog) {
        AlertDialog(
            onDismissRequest = { showDeleteDialog = false },
            title = {
                Text(
                    text = "Konfirmasi Hapus",
                    fontFamily = poppins,
                    fontWeight = FontWeight.Bold
                )
            },
            text = {
                Text(
                    text = "Apakah Anda yakin ingin menghapus CSR \"${item.programName}\"? Tindakan ini tidak dapat dibatalkan.",
                    fontFamily = poppins,
                    textAlign = TextAlign.Justify
                )
            },
            confirmButton = {
                TextButton(
                    onClick = {
                        onDelete?.invoke(item)
                        showDeleteDialog = false
                    }
                ) {
                    Text(
                        "Hapus",
                        color = Color(0xFFE74C3C),
                        fontFamily = poppins,
                        fontWeight = FontWeight.SemiBold
                    )
                }
            },
            dismissButton = {
                TextButton(
                    onClick = { showDeleteDialog = false }
                ) {
                    Text(
                        "Batal",
                        color = Color.Gray,
                        fontFamily = poppins
                    )
                }
            }
        )
    }
}

private fun formatStatus(subStatus: SubStatus): String {
    return subStatus.name.replace("_", " ").lowercase()
        .replaceFirstChar { it.uppercase() }
}

private fun formatPeriod(startDate: String, endDate: String): String {
    return try {
        val inputFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
        val outputFormat = SimpleDateFormat("dd MMM yy", Locale("id"))
        
        val start = inputFormat.parse(startDate)?.let { outputFormat.format(it) } ?: startDate
        val end = inputFormat.parse(endDate)?.let { outputFormat.format(it) } ?: endDate
        
        "$start - $end"
    } catch (e: Exception) {
        "$startDate - $endDate"
    }
}

@Composable
fun CsrCardPreview() {
    val previewItem = CsrHistoryItem(
        id = 1,
        userId = 1,
        programName = "Penghijauan Hutan Kaltim",
        category = "Lingkungan",
        description = "Penanaman 1000 pohon",
        location = "Kalimantan",
        partnerName = "PT. Hijau Sejati",
        startDate = "2025-05-12",
        endDate = "2025-05-20",
        budget = "290887100",
        proposalUrl = null,
        legalityUrl = null,
        agreed = true,
        status = "pending",
        createdAt = "2025-05-01T15:13:50.000Z"
    )
    CsrCard(item = previewItem)
}

================================================================================

FILE 81: app\src\main\java\com\example\tumbuhnyata\ui\components\DeskripsiWorkshop.kt
Lines: 195 | Size: 6767 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import com.example.tumbuhnyata.data.model.Workshop
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import java.text.NumberFormat
import java.util.*

@Composable
fun DeskripsiWorkshop(navController: NavController, workshop: Workshop, workshopId: String,) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
    ) {
        Box(
            modifier = Modifier
                .fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            Image(
                painter = painterResource(id = workshop.imageRes),
                contentDescription = "Poster Workshop",
                contentScale = ContentScale.Crop,
                modifier = Modifier
                    .size(317.dp, 352.dp)
                    .padding(16.dp)
            )
        }

        Column(modifier = Modifier.padding(horizontal = 16.dp)) {
            Spacer(modifier = Modifier.height(24.dp))

            Text(
                text = "Nama Workshop",
                fontWeight = FontWeight.Bold,
                fontFamily = PoppinsFontFamily,
                color = Color(0xFF1E1E1E),
                fontSize = 17.sp
            )
            Text(
                text = workshop.title,
                fontFamily = PoppinsFontFamily,
                fontSize = 17.sp,
                color = Color.DarkGray
            )

            Spacer(modifier = Modifier.height(17.dp))

            Text(
                text = "Deskripsi",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1E1E1E),
                fontSize = 17.sp
            )
            Text(
                text = workshop.deskripsi,
                fontFamily = PoppinsFontFamily,
                fontSize = 14.sp,
                textAlign = TextAlign.Justify,
                color = Color(0xFF4B4B4B)
            )

            Spacer(modifier = Modifier.height(17.dp))

            Text(
                text = "Instruktur",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1E1E1E),
                fontSize = 17.sp
            )
            Text(
                text = workshop.speaker,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Medium,
                fontSize = 17.sp,
                color = Color(0xFF4B4B4B)
            )

            Spacer(modifier = Modifier.height(17.dp))

            Text(
                text = "Tanggal",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1E1E1E),
                fontSize = 17.sp
            )
            Text(
                text = workshop.tanggal,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.SemiBold,
                fontSize = 17.sp,
                color = Color(0xFF4B4B4B)
            )

            Spacer(modifier = Modifier.height(17.dp))

            Text(
                text = "Materi",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1E1E1E),
                fontSize = 17.sp
            )
            workshop.materi.forEachIndexed { index, materi ->
                Text(
                    text = "${index + 1}. $materi",
                    fontFamily = PoppinsFontFamily,
                    fontSize = 17.sp,
                    textAlign = TextAlign.Justify,
                    color = Color(0xFF4B4B4B)
                )
            }

            Spacer(modifier = Modifier.height(17.dp))

            Text(
                text = "Biaya",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF4B4B4B),
                fontSize = 17.sp
            )
            Spacer(modifier = Modifier.height(7.dp))

            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp)
                    .background(Color(0xFFE9E9E9), shape = RoundedCornerShape(10.dp))
                    .padding(horizontal = 16.dp, vertical = 12.dp),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text(
                    text = "Rp",
                    fontFamily = PoppinsFontFamily,
                    fontSize = 21.sp,
                    fontWeight = FontWeight.ExtraBold,
                    color = Color(0xFF4B4B4B)
                )
                Text(
                    text = NumberFormat.getNumberInstance(Locale("id", "ID")).format(workshop.biaya),
                    fontSize = 21.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.ExtraBold,
                    color = Color(0xFF4B4B4B)
                )
            }

            Spacer(modifier = Modifier.height(23.dp))

            Button(
                onClick = { navController.navigate("daftarworkshop/$workshopId") },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF27361F))
            )  {
                Text(
                    text = "Daftar Sekarang",
                    color = Color.White,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    fontSize = 17.sp
                )
            }
            Spacer(modifier = Modifier.height(17.dp))
        }
    }
}



================================================================================

FILE 82: app\src\main\java\com\example\tumbuhnyata\ui\components\EmptyStateCard.kt
Lines: 130 | Size: 4160 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material.icons.filled.CloudOff
import androidx.compose.material.icons.filled.Inbox
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.ui.component.poppins

@Composable
fun EmptyStateCard(
    title: String,
    subtitle: String,
    icon: ImageVector = Icons.Default.Inbox,
    onRetry: (() -> Unit)? = null,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier
            .fillMaxWidth()
            .padding(16.dp),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(
            containerColor = Color.White
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(24.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            Icon(
                imageVector = icon,
                contentDescription = null,
                modifier = Modifier.size(64.dp),
                tint = Color(0xFF9E9E9E)
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            Text(
                text = title,
                fontSize = 16.sp,
                fontWeight = FontWeight.SemiBold,
                fontFamily = poppins,
                color = Color(0xFF333333),
                textAlign = TextAlign.Center
            )
            
            Spacer(modifier = Modifier.height(8.dp))
            
            Text(
                text = subtitle,
                fontSize = 14.sp,
                fontFamily = poppins,
                color = Color(0xFF666666),
                textAlign = TextAlign.Center,
                lineHeight = 20.sp
            )
            
            if (onRetry != null) {
                Spacer(modifier = Modifier.height(16.dp))
                
                OutlinedButton(
                    onClick = onRetry,
                    colors = ButtonDefaults.outlinedButtonColors(
                        contentColor = Color(0xFF2C3E1F)
                    ),
                    border = androidx.compose.foundation.BorderStroke(
                        1.dp, 
                        Color(0xFF2C3E1F)
                    )
                ) {
                    Icon(
                        imageVector = Icons.Default.Refresh,
                        contentDescription = null,
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "Coba Lagi",
                        fontFamily = poppins,
                        fontWeight = FontWeight.Medium
                    )
                }
            }
        }
    }
}

@Composable
fun EmptyDataState(
    modifier: Modifier = Modifier
) {
    EmptyStateCard(
        title = "Belum Ada Data",
        subtitle = "Data CSR akan muncul di sini setelah Anda menambahkan atau menerima CSR",
        icon = Icons.Default.Inbox,
        modifier = modifier
    )
}

@Composable
fun NoConnectionEmptyState(
    onRetry: () -> Unit,
    modifier: Modifier = Modifier
) {
    EmptyStateCard(
        title = "Tidak Ada Koneksi",
        subtitle = "Periksa koneksi internet Anda dan coba lagi",
        icon = Icons.Default.CloudOff,
        onRetry = onRetry,
        modifier = modifier
    )
} 

================================================================================

FILE 83: app\src\main\java\com\example\tumbuhnyata\ui\components\InputField.kt
Lines: 40 | Size: 1572 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp

@Composable
fun InputField(value: String, onValueChange: (String) -> Unit, iconRes: Int, label: String, keyboardType: KeyboardType = KeyboardType.Text) {
    OutlinedTextField(
        value = value,
        onValueChange = onValueChange,
        leadingIcon = {
            Image(
                painter = painterResource(id = iconRes),
                contentDescription = "$label Icon",
                modifier = Modifier.size(24.dp)
            )
        },
        placeholder = { Text(label) },
        modifier = Modifier.fillMaxWidth().background(Color.White),
        shape = RoundedCornerShape(16.dp),
        colors = TextFieldDefaults.colors(
            focusedIndicatorColor = Color(0xFF27361F),
            unfocusedIndicatorColor = Color.Gray,
            unfocusedContainerColor = Color.White,
            focusedContainerColor = Color.White
        )
    )
}

================================================================================

FILE 84: app\src\main\java\com\example\tumbuhnyata\ui\components\SectionHeader.kt
Lines: 58 | Size: 2166 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowForward
import androidx.compose.material.icons.filled.KeyboardArrowRight
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun SectionHeader(title: String, onLihatSemua: () -> Unit) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 8.dp),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(
            text = title,
            fontWeight = FontWeight.Bold,
            fontSize = 16.sp,
            fontFamily = PoppinsFontFamily
        )
        TextButton(onClick = onLihatSemua) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                Text("Lihat Semua", fontFamily = PoppinsFontFamily, color = Color(0xFF525E4C) )
                Icon(
                    imageVector = Icons.Filled.KeyboardArrowRight,
                    contentDescription = "Lihat Semua",
                    modifier = Modifier.size(16.dp) ,
                    tint = Color(0xFF525E4C)
                )
            }
        }
    }
}
@androidx.compose.ui.tooling.preview.Preview
@Composable
fun PreviewSectionHeader() {
    SectionHeader(title = "Judul Bagian", onLihatSemua = { /*TODO*/ })
}

================================================================================

FILE 85: app\src\main\java\com\example\tumbuhnyata\ui\components\SectionWithTittle.kt
Lines: 41 | Size: 1270 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.compose.material3.*
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.Alignment
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp


@Composable
fun SectionWithTitle(title: String, onSeeAllClick: () -> Unit) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 12.dp),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            title,
            fontSize = 25.sp,
            fontFamily = PoppinsFontFamily,
            color = Color(0xFF27361F),
            fontWeight = FontWeight.ExtraBold
        )

        Text(
            "Lihat Semua >",
            fontSize = 12.sp,
            fontFamily = PoppinsFontFamily,
            color = Color(0xFF525E4C),
            modifier = Modifier.clickable { onSeeAllClick() }
        )
    }
}


================================================================================

FILE 86: app\src\main\java\com\example\tumbuhnyata\ui\components\SeeAllButton.kt
Lines: 32 | Size: 991 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun SeeAllButton(onClick: () -> Unit) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 8.dp),
        horizontalArrangement = Arrangement.End
    ) {
        TextButton(onClick = onClick) {
            Text("Lihat Semua", fontFamily = PoppinsFontFamily)
        }
    }
}

@androidx.compose.ui.tooling.preview.Preview
@Composable
fun PreviewSeeAllButton() {
    SeeAllButton(onClick = { /*TODO*/ })
}

================================================================================

FILE 87: app\src\main\java\com\example\tumbuhnyata\ui\components\SyncStatusIndicator.kt
Lines: 135 | Size: 4807 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Sync
import androidx.compose.material.icons.filled.CloudOff
import androidx.compose.material.icons.filled.CheckCircle
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun SyncStatusIndicator(
    unsyncedCount: Int,
    isSyncing: Boolean,
    onSyncClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    if (unsyncedCount > 0 || isSyncing) {
        Card(
            modifier = modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp, vertical = 8.dp),
            shape = RoundedCornerShape(12.dp),
            colors = CardDefaults.cardColors(
                containerColor = if (isSyncing) Color(0xFFFFF3CD) else Color(0xFFE3F2FD)
            )
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        imageVector = if (isSyncing) Icons.Default.Sync else Icons.Default.CloudOff,
                        contentDescription = null,
                        tint = if (isSyncing) Color(0xFF856404) else Color(0xFF1976D2),
                        modifier = Modifier.size(20.dp)
                    )
                    
                    Spacer(modifier = Modifier.width(8.dp))
                    
                    Column {
                        Text(
                            text = if (isSyncing) "Menyinkronkan..." else "Data Belum Tersinkron",
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Medium,
                            color = if (isSyncing) Color(0xFF856404) else Color(0xFF1976D2)
                        )
                        
                        if (!isSyncing && unsyncedCount > 0) {
                            Text(
                                text = "$unsyncedCount item belum tersinkron",
                                fontSize = 12.sp,
                                color = Color(0xFF666666)
                            )
                        }
                    }
                }
                
                if (!isSyncing) {
                    TextButton(
                        onClick = onSyncClick,
                        colors = ButtonDefaults.textButtonColors(
                            contentColor = Color(0xFF1976D2)
                        )
                    ) {
                        Text(
                            text = "SINKRON",
                            fontSize = 12.sp,
                            fontWeight = FontWeight.Bold
                        )
                    }
                } else {
                    CircularProgressIndicator(
                        modifier = Modifier.size(16.dp),
                        strokeWidth = 2.dp,
                        color = Color(0xFF856404)
                    )
                }
            }
        }
    }
}

@Composable
fun OfflineModeIndicator(
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 8.dp),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFFF8D7DA)
        )
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Icon(
                imageVector = Icons.Default.CloudOff,
                contentDescription = null,
                tint = Color(0xFF721C24),
                modifier = Modifier.size(20.dp)
            )
            
            Spacer(modifier = Modifier.width(8.dp))
            
            Text(
                text = "Mode Offline - Menampilkan data lokal",
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF721C24)
            )
        }
    }
} 

================================================================================

FILE 88: app\src\main\java\com\example\tumbuhnyata\ui\components\TopBarProfile.kt
Lines: 53 | Size: 1586 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.graphics.Color
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun TopBarProfile(
    title: String,
    step: String,
    iconResId: Int,
    onBackClick: () -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .height(40.dp),
        verticalAlignment = Alignment.CenterVertically,
    ) {
        Image(
            painter = painterResource(id = iconResId),
            contentDescription = "Icon Back",
            modifier = Modifier
                .size(32.dp)
                .clickable { onBackClick() }
        )
        Spacer(modifier = Modifier.width(15.dp))
        Text(
            text = title,
            fontSize = 28.sp,
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.ExtraBold
        )
        Spacer(modifier = Modifier.width(100.dp))
        Text(
            text = step,
            fontSize = 13.sp,
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.Bold,
            color = Color(0xFF686868)
        )
    }
}

================================================================================

FILE 89: app\src\main\java\com\example\tumbuhnyata\ui\components\WorkshopCard.kt
Lines: 99 | Size: 3775 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.data.model.Workshop

@Composable
fun WorkshopCard(
    workshop: Workshop,
    onClick: () -> Unit
) {
    Card(
        modifier = Modifier
            .size(261.dp, 207.dp)
            .clickable(onClick = onClick)
            .border(
                width = 1.dp,
                color = Color(0xFFE2E2E2),
                shape = RoundedCornerShape(10.dp)
            ),
        shape = RoundedCornerShape(10.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column {
            Image(
                painter = painterResource(id = workshop.imageRes),
                contentDescription = "Workshop image",
                contentScale = ContentScale.Crop,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(102.dp)
            )

            Column(modifier = Modifier.padding(12.dp)) {
                Text(
                    text = workshop.title,
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    color = Color(0xFF1E1E1E),
                    fontWeight = FontWeight.Bold,
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )
                Text(
                    text = workshop.speaker,
                    fontSize = 12.sp,
                    fontFamily = PoppinsFontFamily,
                    color = Color(0xFF4B4B4B),
                    fontWeight = FontWeight.SemiBold
                )
                Spacer(modifier = Modifier.height(22.dp))

                Row(
                    horizontalArrangement = Arrangement.SpaceBetween,
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text(
                        text = workshop.date,
                        fontFamily = PoppinsFontFamily,
                        fontSize = 12.sp,
                        color = Color(0xFF4B4B4B)
                    )
                    Box(
                        modifier = Modifier
                            .background(
                                color = if (workshop.isOnline) Color(0xFF4B4B4B) else Color(0xFFE2E2E2),
                                shape = RoundedCornerShape(5.dp)
                            )
                            .padding(horizontal = 8.dp, vertical = 4.dp)
                    ) {
                        Text(
                            text = if (workshop.isOnline) "Online" else "Offline",
                            fontSize = 12.sp,
                            fontFamily = PoppinsFontFamily,
                            color = if (workshop.isOnline) Color(0xFFE2E2E2) else Color(0xFF4B4B4B),
                            fontWeight = FontWeight.Medium
                        )
                    }
                }
            }
        }
    }
}

================================================================================

FILE 90: app\src\main\java\com\example\tumbuhnyata\ui\components\WorkshopListItem.kt
Lines: 113 | Size: 4118 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.components

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.runtime.Composable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.data.model.Workshop
import androidx.compose.ui.graphics.Color
import androidx.compose.material3.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun WorkshopListItem(
    workshop: Workshop,
    onClick: () -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .height(155.dp)
            .border(1.dp, Color(0xFFB9B9B9), RoundedCornerShape(10.dp))
            .clickable { onClick() } ,
        shape = RoundedCornerShape(10.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Row(
            modifier = Modifier
                .height(IntrinsicSize.Min)
                .padding(end=12.dp)
        ) {
            Image(
                painter = painterResource(id = workshop.imageRes),
                contentDescription = "Workshop image",
                contentScale = ContentScale.Crop,
                modifier = Modifier
                    .width(140.dp)
                    .fillMaxHeight()
            )

            Spacer(modifier = Modifier.width(12.dp))

            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 12.dp)
            ) {
                Text(
                    text = workshop.title,
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    color = Color(0xFF1E1E1E),
                    fontWeight = FontWeight.Bold,
                    maxLines = 2,
                    overflow = TextOverflow.Ellipsis
                )
                Spacer(modifier = Modifier.height(8.dp))

                Text(
                    text = workshop.speaker,
                    fontSize = 12.sp,
                    fontFamily = PoppinsFontFamily,
                    color = Color(0xFF4B4B4B),
                    fontWeight = FontWeight.SemiBold
                )

                Spacer(modifier = Modifier.weight(1f))

                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 4.dp),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Text(
                        text = workshop.date,
                        fontSize = 12.sp,
                        fontFamily = PoppinsFontFamily,
                        color = Color(0xFF4B4B4B)
                    )

                    Box(
                        modifier = Modifier
                            .background(
                                color = if (workshop.isOnline) Color(0xFF4B4B4B) else Color(0xFFE2E2E2),
                                shape = RoundedCornerShape(5.dp)
                            )
                            .padding(horizontal = 8.dp, vertical = 4.dp)
                    ) {
                        Text(
                            text = if (workshop.isOnline) "Online" else "Offline",
                            fontSize = 12.sp,
                            fontFamily = PoppinsFontFamily,
                            color = if (workshop.isOnline) Color(0xFFE2E2E2) else Color(0xFF4B4B4B),
                            fontWeight = FontWeight.Medium
                        )
                    }
                }
            }
        }
    }
}



================================================================================

FILE 91: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\DashboardScreen.kt
Lines: 229 | Size: 9784 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.collectAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.dashboard.components.KPIItem
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.DashboardViewModel
import com.example.tumbuhnyata.viewmodel.DashboardState

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DashboardScreen(
    navController: NavController,
    viewModel: DashboardViewModel = viewModel()
) {
    val uiState by viewModel.uiState.collectAsState()

    Scaffold(
        containerColor = Color.White,
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = "Dashboard",
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        fontSize = 25.sp,
                        color = Color.Black
                    )
                },
                navigationIcon = {
                    IconButton(
                        onClick = { navController.navigateUp() },
                        modifier = Modifier.padding(start = 4.dp)
                    ) {
                        Box(
                            modifier = Modifier
                                .size(32.dp)
                                .clip(CircleShape)
                                .background(Color(0xFF27361F)),
                            contentAlignment = Alignment.Center
                        ) {
                            Image(
                                painter = painterResource(id = R.drawable.arrow_left),
                                contentDescription = "Back",
                                modifier = Modifier.size(16.dp),
                                contentScale = ContentScale.Fit
                            )
                        }
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = Color.Transparent,
                    titleContentColor = Color.Black,
                    navigationIconContentColor = Color.White
                )
            )
        }
    ) { paddingValues ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            when {
                uiState.isLoading -> {
                    CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))
                }

                uiState.error != null -> {
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(16.dp),
                        verticalArrangement = Arrangement.Center,
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text(
                            text = "Oops! Terjadi Kesalahan", 
                            style = MaterialTheme.typography.titleMedium,
                            textAlign = TextAlign.Center
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            text = uiState.error ?: "Error tidak diketahui.",
                            style = MaterialTheme.typography.bodyMedium,
                            textAlign = TextAlign.Center
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Button(
                            onClick = { viewModel.loadDashboardItems() },
                            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF27361F))
                        ) {
                            Text("Coba Lagi")
                        }
                    }
                }

                !uiState.isLoading && uiState.error == null && uiState.kpiItems.isEmpty() -> {
                     Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(16.dp),
                        verticalArrangement = Arrangement.Center,
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Image(
                            painter = painterResource(id = R.drawable.ic_carbonfootprint),
                            contentDescription = "Tidak ada data",
                            modifier = Modifier.size(100.dp) 
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Text(
                            text = "Tidak Ada Data KPI",
                            style = MaterialTheme.typography.titleMedium,
                            textAlign = TextAlign.Center
                        )
                         Text(
                            text = "Belum ada data KPI untuk ditampilkan saat ini.",
                            style = MaterialTheme.typography.bodyMedium,
                            textAlign = TextAlign.Center
                        )
                         Spacer(modifier = Modifier.height(16.dp))
                         Button(
                            onClick = { viewModel.loadDashboardItems() },
                            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF27361F))
                        ) {
                            Text("Muat Ulang")
                        }
                    }
                }

                else -> {
                    Column(
                        modifier = Modifier.fillMaxSize()
                    ) {
                        Text(
                            "KPI (Key Performance Indicator)",
                            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),
                            fontWeight = FontWeight(800),
                            fontSize = 18.sp,
                            color = Color(0xFF27361F)
                        )

                        LazyVerticalGrid(
                            columns = GridCells.Fixed(2),
                            contentPadding = PaddingValues(16.dp),
                            horizontalArrangement = Arrangement.spacedBy(16.dp),
                            verticalArrangement = Arrangement.spacedBy(16.dp),
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            items(uiState.kpiItems) { kpiItem ->
                                KPIItem(
                                    title = kpiItem.title,
                                    topIcon = kpiItem.topIcon,
                                    statusText = kpiItem.statusText,
                                    statusPercentageValue = kpiItem.statusPercentageValue,
                                    isUp = kpiItem.isUp,
                                    value = kpiItem.value,
                                    unit = kpiItem.unit,
                                    targetValue = kpiItem.targetValue,
                                    onClick = { navController.navigate(kpiItem.onClickRoute) }
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

//@Preview(showBackground = true, name = "Dashboard Loading")
//@Composable
//fun DashboardScreenPreviewLoading() {
//    val mockViewModel = DashboardViewModel(Application())
//    DashboardScreen(navController = rememberNavController() /*, viewModel = mockViewModel */)
//}

@Preview(showBackground = true, name = "Dashboard Error")
@Composable
fun DashboardScreenPreviewError() {
    DashboardScreen(navController = rememberNavController())
}

@Preview(showBackground = true, name = "Dashboard No Data")
@Composable
fun DashboardScreenPreviewNoData() {
    DashboardScreen(navController = rememberNavController())
}

@Preview(showBackground = true, backgroundColor = 0xFFFFFFFF, name = "Dashboard Loaded Data")
@Composable
fun DashboardScreenPreview() {
    DashboardScreen(navController = rememberNavController())
}


================================================================================

FILE 92: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\components\KPIItem.kt
Lines: 227 | Size: 8159 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.components

import androidx.annotation.DrawableRes
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowDownward
import androidx.compose.material.icons.filled.ArrowUpward
import androidx.compose.material.icons.filled.Info
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun KPIItem(
    modifier: Modifier = Modifier,
    title: String,
    @DrawableRes topIcon: Int,
    statusText: String,
    statusPercentageValue: String,
    isUp: Boolean,
    value: String,
    unit: String,
    targetLabel: String = "Target:",
    targetValue: String,
    contentColor: Color = Color.White,
    mainValueColor: Color = Color(0xFFE6FD4B),
    statusBackgroundColor: Color = Color.White.copy(alpha = 0.15f),
    arrowDownColor: Color = Color.Red,
    onClick: () -> Unit
) {
    val gradientBrush = Brush.verticalGradient(
        colors = listOf(Color(0xFF5A7C47), Color(0xFF415A33))
    )
    val cardShape = RoundedCornerShape(10.dp)

    val dynamicStatusIndicatorColor = if (statusText.trim() == "100% target") {
        Color(0xFF8BC34A)
    } else {
        Color(0xFFE2C731)
    }

    val arrowIcon = if (isUp) Icons.Filled.ArrowUpward else Icons.Filled.ArrowDownward
    val arrowColor = if (isUp) contentColor else arrowDownColor

    Card(
        modifier = modifier
            .size(width = 169.dp, height = 198.dp)
            .background(brush = gradientBrush, shape = cardShape)
            .clickable(onClick = onClick),
        shape = cardShape,
        colors = CardDefaults.cardColors(
            containerColor = Color.Transparent,
            contentColor = contentColor
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)
    ) {
        Column(
            modifier = Modifier
                .padding(start = 14.dp, top = 14.dp, end = 14.dp, bottom = 14.dp)
                .fillMaxHeight(),
            verticalArrangement = Arrangement.spacedBy(10.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = title,
                    fontSize = 10.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold
                )
                Spacer(Modifier.weight(1f))
                Icon(
                    painter = painterResource(id = topIcon),
                    contentDescription = "$title icon",
                    modifier = Modifier.size(14.dp)
                )
            }

            HorizontalDivider(
                thickness = 1.dp,
                color = contentColor.copy(alpha = 0.5f)
            )

            Box(
                modifier = Modifier.fillMaxWidth(),
                contentAlignment = Alignment.Center
            ) {
                Surface(
                    modifier = Modifier.height(25.dp),
                    shape = RoundedCornerShape(50),
                    color = statusBackgroundColor,
                    contentColor = contentColor
                ) {
                    Row(
                        modifier = Modifier.padding(horizontal = 12.dp),
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(6.dp)
                    ) {
                        Box(
                            modifier = Modifier
                                .size(8.dp)
                                .background(dynamicStatusIndicatorColor, CircleShape)
                        )
                        Text(
                            text = statusText,
                            fontFamily = PoppinsFontFamily,
                            fontSize = 10.sp
                        )
                        Spacer(Modifier.weight(1f))
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.spacedBy(2.dp)
                        ) {
                            Icon(
                                imageVector = arrowIcon,
                                contentDescription = if (isUp) "Arrow Up" else "Arrow Down",
                                modifier = Modifier.size(12.dp),
                                tint = arrowColor
                            )
                            Text(
                                text = statusPercentageValue,
                                fontFamily = PoppinsFontFamily,
                                fontSize = 10.sp,
                                color = contentColor
                            )
                        }
                    }
                }
            }

            Spacer(Modifier.height(8.dp))

            Row(
                verticalAlignment = Alignment.Bottom
            ) {
                Text(
                    text = value,
                    fontSize = 25.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    lineHeight = 26.sp,
                    color = mainValueColor
                )
                Spacer(Modifier.width(4.dp))
                Text(
                    text = unit,
                    fontFamily = PoppinsFontFamily,
                    fontSize = 10.sp,
                    modifier = Modifier.padding(bottom = 2.dp)
                )
            }

            Column {
                Text(
                    text = targetLabel,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    fontSize = 12.sp
                )
                Text(
                    text = targetValue,
                    fontFamily = PoppinsFontFamily,
                    fontSize = 10.sp
                )
            }
        }
    }
}

@Preview(showBackground = true, backgroundColor = 0xFFEEEEEE, name = "KPI 100% Target")
@Composable
private fun KPIItemPreviewGreen() {
    KPIItem(
        title = "Carbon Footprint",
        topIcon = android.R.drawable.ic_dialog_info,
        statusText = "100% target",
        statusPercentageValue = "5%",
        isUp = true,
        value = "12.300",
        unit = "kg CO₂e",
        targetValue = "10.000 kg CO₂e",
        onClick = { }
    )
}

@Preview(showBackground = true, backgroundColor = 0xFFEEEEEE, name = "KPI <100% Target Down")
@Composable
private fun KPIItemPreviewYellowRed() {
    KPIItem(
        title = "Water Usage",
        topIcon = android.R.drawable.ic_dialog_info,
        statusText = "95% target",
        statusPercentageValue = "2%",
        isUp = false,
        value = "8.500",
        unit = "Liters",
        targetValue = "8.000 Liters",
        onClick = { }
    )
}


================================================================================

FILE 93: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\KPIDetailScreen.kt
Lines: 535 | Size: 19579 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.kpi

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.KeyboardArrowLeft
import androidx.compose.material.icons.automirrored.filled.KeyboardArrowRight
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.*
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.text.*
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import androidx.compose.runtime.*
import com.example.tumbuhnyata.ui.dashboard.kpi.components.KpiFilterSwitch
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.compose.foundation.Image
import androidx.compose.foundation.border
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.ui.draw.clip
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import kotlin.math.roundToInt
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.remember
import com.patrykandpatrick.vico.core.cartesian.data.CartesianChartModelProducer
import com.patrykandpatrick.vico.core.cartesian.data.lineSeries
import com.patrykandpatrick.vico.core.cartesian.data.columnSeries
import com.example.tumbuhnyata.ui.dashboard.kpi.components.VicoLineChart
import com.example.tumbuhnyata.ui.dashboard.kpi.components.VicoBarChart
import kotlinx.coroutines.runBlocking
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.compose.runtime.getValue
import androidx.compose.runtime.collectAsState

data class KpiDetails(
    val id: String,
    val title: String,
    val unit: String,
    val year: Int,
    val yearlyChartData: List<Float>,
    val fiveYearChartData: List<Float>,
    val averageValue: String,
    val minValue: String,
    val analysis: String
)

@OptIn(ExperimentalMaterial3Api::class, ExperimentalTextApi::class)
@Composable
fun KpiDetailScreen(
    navController: NavController,
    kpiId: String,
    viewModel: KPIDetailViewModel = viewModel()
) {
    val uiState by viewModel.uiState.collectAsState()
    var selectedYear by remember { mutableStateOf(2025) } // Start with 2024 since that's where our data is

    // Initial load and reload when kpiId or selectedYear changes
    LaunchedEffect(kpiId, selectedYear) {
        println("KpiDetailScreen: Loading data for kpiId=$kpiId, year=$selectedYear")
        viewModel.loadKPIDetails(kpiId, year = selectedYear) // Let ViewModel handle companyId
    }

    Scaffold(
        containerColor = Color.White,
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = uiState.kpiDetails?.title ?: "KPI Detail",
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        fontSize = 20.sp,
                    )
                },
                navigationIcon = {
                    IconButton(
                        onClick = { navController.navigateUp() },
                        modifier = Modifier.padding(start = 4.dp)
                    ) {
                        Box(
                            modifier = Modifier
                                .size(32.dp)
                                .clip(CircleShape)
                                .background(Color(0xFF27361F)),
                            contentAlignment = Alignment.Center
                        ) {
                            Image(
                                painter = painterResource(id = R.drawable.arrow_left),
                                contentDescription = "Back",
                                modifier = Modifier.size(16.dp),
                                contentScale = ContentScale.Fit
                            )
                        }
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = Color.Transparent,
                    titleContentColor = MaterialTheme.colorScheme.onSurface
                )
            )
        }
    ) { paddingValues ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            when {
                uiState.isLoading -> {
                    CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))
                }

                uiState.error != null -> {
                    // Show no data state with upload option
                    NoDataStateContent(
                        navController = navController,
                        kpiId = kpiId,
                        selectedYear = selectedYear,
                        onRetry = { viewModel.retryLoadKPIDetails(kpiId, year = selectedYear) }
                    )
                }

                uiState.kpiDetails != null -> {
                    KpiDetailContent(
                        navController = navController,
                        kpiDetails = uiState.kpiDetails!!,
                        selectedYear = selectedYear,
                        onYearChange = { newYear -> selectedYear = newYear }
                    )
                }

                else -> {
                    // Initial state - should not happen with proper loading state
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(16.dp),
                        verticalArrangement = Arrangement.Center,
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Text(
                            text = "Memuat data KPI...",
                            style = MaterialTheme.typography.bodyMedium,
                            textAlign = TextAlign.Center
                        )
                    }
                }
            }
        }
    }
}

@Composable
private fun KpiDetailContent(
    navController: NavController,
    kpiDetails: KpiDetails,
    selectedYear: Int,
    onYearChange: (Int) -> Unit
) {
    var selectedFilter by remember { mutableStateOf("Tahunan") }
    val filterOptions = listOf("Tahunan", "5 Tahun")

    val lineModelProducer = remember { CartesianChartModelProducer() }
    val columnModelProducer = remember { CartesianChartModelProducer() }

    LaunchedEffect(kpiDetails.yearlyChartData, selectedFilter) {
        if (selectedFilter == "Tahunan") {
            println("Updating Line Chart data: ${kpiDetails.yearlyChartData}")
            lineModelProducer.runTransaction {
                lineSeries {
                    series(kpiDetails.yearlyChartData.map { it.toDouble() })
                }
            }
        }
    }

    LaunchedEffect(kpiDetails.fiveYearChartData, selectedFilter) {
        if (selectedFilter == "5 Tahun") {
            println("Updating Column Chart data: ${kpiDetails.fiveYearChartData}")
            columnModelProducer.runTransaction {
                columnSeries {
                    series(kpiDetails.fiveYearChartData.map { it.toDouble() })
                }
            }
        }
    }

    Column(
        modifier = Modifier
            .padding(horizontal = 16.dp)
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
    ) {
        Spacer(modifier = Modifier.height(16.dp))

        KpiFilterSwitch(
            options = filterOptions,
            selectedOption = selectedFilter,
            onOptionSelected = { selectedFilter = it },
            selectedBackgroundColor = Color(0xFF27361F),
            unselectedContentColor = Color(0xFF27361F),
            unselectedBackgroundColor = Color(0xFFe9ebe9)
        )

        Spacer(modifier = Modifier.height(16.dp))

        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.Center
        ) {
            IconButton(onClick = { onYearChange(selectedYear - 1) }) {
                Icon(Icons.AutoMirrored.Filled.KeyboardArrowLeft, contentDescription = "Previous Year")
            }
            Text(
                text = if (selectedFilter == "Tahunan") selectedYear.toString() else "5 Tahun Terakhir",
                fontSize = 16.sp,
                fontWeight = FontWeight.Medium,
                modifier = Modifier.padding(horizontal = 16.dp)
            )
            IconButton(onClick = { onYearChange(selectedYear + 1) }, enabled = selectedFilter == "Tahunan") {
                Icon(Icons.AutoMirrored.Filled.KeyboardArrowRight, contentDescription = "Next Year")
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = if (selectedFilter == "Tahunan") "Tren ${kpiDetails.title} Tahunan" else "Tren ${kpiDetails.title} 5 Tahun",
            style = MaterialTheme.typography.titleMedium,
            modifier = Modifier.padding(bottom = 8.dp)
        )

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(200.dp)
        ) {
            if (selectedFilter == "Tahunan") {
                VicoLineChart(
                    modelProducer = lineModelProducer,
                    modifier = Modifier.fillMaxSize()
                )
            } else {
                VicoBarChart(
                    modelProducer = columnModelProducer,
                    modifier = Modifier.fillMaxSize()
                )
            }
        }

        Spacer(modifier = Modifier.height(24.dp))

        Button(
            onClick = { navController.navigate("upload_data") },
            modifier = Modifier
                .fillMaxWidth()
                .height(48.dp)
                .border(1.dp, Color.Gray, RoundedCornerShape(50)),
            colors = ButtonDefaults.buttonColors(
                containerColor = Color.White,
                contentColor = Color(0xFF27361F),
                disabledContentColor = Color.Gray,
                disabledContainerColor = Color.Transparent
            ),
            shape = RoundedCornerShape(50)
        ) {
            Box {
                Icon(
                    painter = painterResource(id = R.drawable.ic_tambahdata),
                    contentDescription = "Add Data",
                    modifier = Modifier.size(ButtonDefaults.IconSize),
                    tint = Color.Unspecified
                )
            }
            Spacer(modifier = Modifier.size(ButtonDefaults.IconSpacing))
            Text("Tambah Data")
        }

        Spacer(modifier = Modifier.height(24.dp))

        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            KpiStatCapsule(
                modifier = Modifier.weight(1f),
                icon = painterResource(id = R.drawable.ic_tachometer_average),
                value = kpiDetails.averageValue,
                unit = kpiDetails.unit,
                label = "Rata-rata"
            )
            KpiStatCapsule(
                modifier = Modifier.weight(1f),
                icon = painterResource(id = R.drawable.angle_double_small_down),
                value = kpiDetails.minValue,
                unit = kpiDetails.unit,
                label = "Terkecil"
            )
        }

        Spacer(modifier = Modifier.height(24.dp))

        Text(
            text = "Analisis",
            style = MaterialTheme.typography.titleMedium,
            modifier = Modifier.padding(bottom = 8.dp)
        )
        Text(
            text = kpiDetails.analysis,
            style = MaterialTheme.typography.bodyMedium,
            modifier = Modifier.padding(bottom = 16.dp)
        )
    }
}

@Composable
private fun NoDataStateContent(
    navController: NavController,
    kpiId: String,
    selectedYear: Int,
    onRetry: () -> Unit
) {
    var selectedFilter by remember { mutableStateOf("Tahunan") }
    val filterOptions = listOf("Tahunan", "5 Tahun")

    Column(
        modifier = Modifier
            .padding(horizontal = 16.dp)
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
    ) {
        Spacer(modifier = Modifier.height(16.dp))

        // Keep the filter switch (disabled state)
        KpiFilterSwitch(
            options = filterOptions,
            selectedOption = selectedFilter,
            onOptionSelected = { /* Disabled */ },
            selectedBackgroundColor = Color(0xFF989898), // Disabled color
            unselectedContentColor = Color(0xFF989898),
            unselectedBackgroundColor = Color(0xFFe9ebe9)
        )

        Spacer(modifier = Modifier.height(16.dp))

        // Keep year selector (disabled state)
        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.Center
        ) {
            IconButton(onClick = { /* Disabled */ }, enabled = false) {
                Icon(Icons.AutoMirrored.Filled.KeyboardArrowLeft, contentDescription = "Previous Year")
            }
            Text(
                text = if (selectedFilter == "Tahunan") selectedYear.toString() else "5 Tahun Terakhir",
                fontSize = 16.sp,
                fontWeight = FontWeight.Medium,
                color = Color.Gray, // Disabled color
                modifier = Modifier.padding(horizontal = 16.dp)
            )
            IconButton(onClick = { /* Disabled */ }, enabled = false) {
                Icon(Icons.AutoMirrored.Filled.KeyboardArrowRight, contentDescription = "Next Year")
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Tren KPI Tahunan",
            style = MaterialTheme.typography.titleMedium,
            color = Color.Gray, // Disabled color
            modifier = Modifier.padding(bottom = 8.dp)
        )

        // Replace chart with no data message
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(200.dp)
                .background(
                    Color(0xFFF5F5F5),
                    RoundedCornerShape(12.dp)
                ),
            contentAlignment = Alignment.Center
        ) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center
            ) {
                Image(
                    painter = painterResource(id = R.drawable.ic_carbonfootprint),
                    contentDescription = "No Data",
                    modifier = Modifier.size(48.dp),
                    colorFilter = ColorFilter.tint(Color.Gray)
                )
                
                Spacer(modifier = Modifier.height(12.dp))
                
                Text(
                    text = "Anda Belum Memiliki Data",
                    style = MaterialTheme.typography.titleSmall,
                    color = Color.Gray,
                    textAlign = TextAlign.Center
                )
                
                Text(
                    text = "Upload data untuk melihat grafik KPI",
                    style = MaterialTheme.typography.bodySmall,
                    color = Color.Gray,
                    textAlign = TextAlign.Center
                )
            }
        }

        Spacer(modifier = Modifier.height(24.dp))

        // Keep the upload button (main CTA)
        Button(
            onClick = { navController.navigate("upload_data") },
            modifier = Modifier
                .fillMaxWidth()
                .height(48.dp),
            colors = ButtonDefaults.buttonColors(
                containerColor = Color(0xFF27361F),
                contentColor = Color.White
            ),
            shape = RoundedCornerShape(12.dp)
        ) {
            Icon(
                painter = painterResource(id = R.drawable.ic_tambahdata),
                contentDescription = "Add Data",
                modifier = Modifier.size(ButtonDefaults.IconSize),
                tint = Color.Unspecified
            )
            Spacer(modifier = Modifier.size(ButtonDefaults.IconSpacing))
            Text(
                text = "Tambah Data",
                fontWeight = FontWeight.Bold
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        // Secondary actions
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            OutlinedButton(
                onClick = { navController.navigateUp() },
                modifier = Modifier.weight(1f),
                colors = ButtonDefaults.outlinedButtonColors(
                    contentColor = Color(0xFF27361F)
                )
            ) {
                Text("Kembali")
            }
            
            OutlinedButton(
                onClick = onRetry,
                modifier = Modifier.weight(1f),
                colors = ButtonDefaults.outlinedButtonColors(
                    contentColor = Color(0xFF27361F)
                )
            ) {
                Text("Refresh")
            }
        }

        Spacer(modifier = Modifier.height(24.dp))

        // Disabled stats section to maintain layout
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            KpiStatCapsule(
                modifier = Modifier.weight(1f),
                icon = painterResource(id = R.drawable.ic_tachometer_average),
                value = "0",
                unit = "Unit",
                label = "Rata-rata",
                isDisabled = true
            )
            KpiStatCapsule(
                modifier = Modifier.weight(1f),
                icon = painterResource(id = R.drawable.angle_double_small_down),
                value = "0",
                unit = "Unit",
                label = "Terkecil",
                isDisabled = true
            )
        }

        Spacer(modifier = Modifier.height(24.dp))

        Text(
            text = "Analisis",
            style = MaterialTheme.typography.titleMedium,
            color = Color.Gray,
            modifier = Modifier.padding(bottom = 8.dp)
        )
        Text(
            text = "Belum ada data untuk dianalisis. Silakan upload data terlebih dahulu untuk melihat analisis KPI.",
            style = MaterialTheme.typography.bodyMedium,
            color = Color.Gray,
            modifier = Modifier.padding(bottom = 16.dp)
        )
    }
}

@Preview(showBackground = true, backgroundColor = 0xFFFFFFFF)
@Composable
private fun KpiDetailScreenPreview() {
    KpiDetailScreen(
        navController = rememberNavController(),
        kpiId = "carbon_footprint"
    )
}


================================================================================

FILE 94: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\KPIDetailViewModel.kt
Lines: 111 | Size: 4825 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.kpi

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.api.DashboardApiService
import com.example.tumbuhnyata.data.local.AppDatabase
import com.example.tumbuhnyata.data.repository.DashboardRepository
import com.example.tumbuhnyata.data.repository.Resource
import com.example.tumbuhnyata.data.network.RetrofitInstance
import com.example.tumbuhnyata.di.NetworkModule
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.launch

// Data class sesuai struktur KpiDetails di KpiDetailScreen
data class KPIDetailState(
    val kpiDetails: KpiDetails? = null,
    val isLoading: Boolean = false,
    val error: String? = null
)

class KPIDetailViewModel(application: Application) : AndroidViewModel(application) {
    private val _uiState = MutableStateFlow(KPIDetailState(isLoading = true))
    val uiState: StateFlow<KPIDetailState> = _uiState.asStateFlow()

    // Manual DI untuk Repository (sama seperti DashboardViewModel)
    private val dashboardRepository: DashboardRepository
    private val profileRepository = NetworkModule.profileRepository
    private var currentCompanyId: Int? = null

    init {
        // Inisialisasi manual repository
        val dashboardApi = RetrofitInstance.dashboardApi
        val dashboardDao = AppDatabase.getInstance(application).dashboardDao()
        dashboardRepository = DashboardRepository(dashboardApi, dashboardDao, application.applicationContext)
        
        // Load company ID from profile
        loadCompanyId()
    }

    private fun loadCompanyId() {
        viewModelScope.launch {
            try {
                val profile = profileRepository.getUserProfile()
                currentCompanyId = profile?.id ?: 1 // Default to 1 if no profile
                println("KPIDetailViewModel: Using companyId = $currentCompanyId")
            } catch (e: Exception) {
                println("KPIDetailViewModel: Failed to load profile, using default companyId = 1")
                currentCompanyId = 1
            }
        }
    }

    fun loadKPIDetails(kpiId: String, companyId: Int? = null, year: Int? = null) {
        viewModelScope.launch {
            // Use provided year or default to current year
            val actualYear = year ?: java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)
            
            // FIXED: Ensure company ID is loaded before API call
            val actualCompanyId = companyId ?: run {
                // If currentCompanyId is null, load it synchronously
                if (currentCompanyId == null) {
                    try {
                        val profile = profileRepository.getUserProfile()
                        currentCompanyId = profile?.id ?: 1
                        println("KPIDetailViewModel: Loaded companyId synchronously = $currentCompanyId")
                    } catch (e: Exception) {
                        println("KPIDetailViewModel: Failed to load profile synchronously, using default companyId = 1")
                        currentCompanyId = 1
                    }
                }
                currentCompanyId ?: 1
            }
            
            println("KPIDetailViewModel: Loading KPI details for kpiId=$kpiId, companyId=$actualCompanyId, year=$actualYear")
            
            dashboardRepository.getKpiDetail(kpiId, actualCompanyId, actualYear)
                .collect { resource ->
                    when (resource) {
                        is Resource.Loading -> {
                            _uiState.value = _uiState.value.copy(
                                isLoading = true,
                                error = null
                            )
                        }
                        is Resource.Success -> {
                            _uiState.value = KPIDetailState(
                                isLoading = false,
                                kpiDetails = resource.data,
                                error = null
                            )
                        }
                        is Resource.Error -> {
                            _uiState.value = KPIDetailState(
                                isLoading = false,
                                kpiDetails = null, // No more dummy data fallback
                                error = resource.message
                            )
                        }
                    }
                }
        }
    }

    fun retryLoadKPIDetails(kpiId: String, companyId: Int? = null, year: Int? = null) {
        loadKPIDetails(kpiId, companyId, year)
    }
} 

================================================================================

FILE 95: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\components\KPIBarChart.kt
Lines: 141 | Size: 6037 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.kpi.components

// Adapted from Vico Compose sample code.
// Original copyright © 2025 Patryk Goworowski and Patrick Michalik.
// Licensed under Apache 2.0: https://www.apache.org/licenses/LICENSE-2.0

import android.text.Layout
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.patrykandpatrick.vico.compose.cartesian.CartesianChartHost
import com.patrykandpatrick.vico.compose.cartesian.axis.rememberAxisGuidelineComponent
import com.patrykandpatrick.vico.compose.cartesian.axis.rememberBottom
import com.patrykandpatrick.vico.compose.cartesian.axis.rememberStart
import com.patrykandpatrick.vico.compose.cartesian.layer.rememberColumnCartesianLayer
import com.patrykandpatrick.vico.compose.cartesian.marker.rememberDefaultCartesianMarker
import com.patrykandpatrick.vico.compose.cartesian.rememberCartesianChart
import com.patrykandpatrick.vico.compose.common.component.fixed
import com.patrykandpatrick.vico.compose.common.component.rememberShapeComponent
import com.patrykandpatrick.vico.compose.common.component.rememberTextComponent
import com.patrykandpatrick.vico.compose.common.fill
import com.patrykandpatrick.vico.compose.common.insets
import com.patrykandpatrick.vico.compose.common.shape.markerCorneredShape
import com.patrykandpatrick.vico.core.cartesian.axis.HorizontalAxis
import com.patrykandpatrick.vico.core.cartesian.axis.VerticalAxis
import com.patrykandpatrick.vico.core.cartesian.data.CartesianChartModelProducer
import com.patrykandpatrick.vico.core.cartesian.data.columnSeries
import com.patrykandpatrick.vico.core.cartesian.layer.ColumnCartesianLayer
import com.patrykandpatrick.vico.core.cartesian.marker.CartesianMarker
import com.patrykandpatrick.vico.core.cartesian.marker.ColumnCartesianLayerMarkerTarget
import com.patrykandpatrick.vico.core.cartesian.marker.DefaultCartesianMarker
import com.patrykandpatrick.vico.core.common.LayeredComponent
import com.patrykandpatrick.vico.core.common.component.ShapeComponent
import com.patrykandpatrick.vico.core.common.component.TextComponent
import com.patrykandpatrick.vico.core.common.shape.CorneredShape
import kotlinx.coroutines.runBlocking
import kotlin.math.roundToInt

@Composable
fun VicoBarChart(
    modelProducer: CartesianChartModelProducer,
    modifier: Modifier = Modifier,
) {
    val column = rememberColumnCartesianLayer(
        columnProvider = ColumnCartesianLayer.ColumnProvider.series(
            com.patrykandpatrick.vico.compose.common.component.rememberLineComponent(
                fill = fill(Color(0xFF27361F)),
                thickness = 8.dp
            )
        )
    )

    CartesianChartHost(
        chart =
            rememberCartesianChart(
                column,
                startAxis = VerticalAxis.rememberStart(),
                bottomAxis = HorizontalAxis.rememberBottom(),
                marker = rememberBarChartMarker()
            ),
        modelProducer = modelProducer,
        modifier = modifier,
    )
}

@Composable
internal fun rememberBarChartMarker(
    valueFormatter: DefaultCartesianMarker.ValueFormatter = DefaultCartesianMarker.ValueFormatter { _, targets ->
        val target = targets.filterIsInstance<ColumnCartesianLayerMarkerTarget>().firstOrNull()
        val value = target?.columns?.firstOrNull()?.entry?.y ?: 0f
        val valueDouble = value.toDouble()
        valueDouble.roundToInt().toString()
    },
    showIndicator: Boolean = true,
): CartesianMarker {
    val labelBackgroundShape = markerCorneredShape(CorneredShape.Corner.Rounded)
    val labelBackground =
        rememberShapeComponent(
            fill = fill(MaterialTheme.colorScheme.background),
            shape = labelBackgroundShape,
            strokeThickness = 1.dp,
            strokeFill = fill(MaterialTheme.colorScheme.outline),
        )
    val label =
        rememberTextComponent(
            color = MaterialTheme.colorScheme.onSurface,
            textAlignment = Layout.Alignment.ALIGN_CENTER,
            padding = insets(8.dp, 4.dp),
            background = labelBackground,
            minWidth = TextComponent.MinWidth.fixed(40.dp),
        )
    val indicatorFrontComponent =
        rememberShapeComponent(fill(MaterialTheme.colorScheme.surface), CorneredShape.Pill)
    val guideline = rememberAxisGuidelineComponent()

    return rememberDefaultCartesianMarker(
        label = label,
        valueFormatter = valueFormatter,
        indicator =
            if (showIndicator) {
                { color ->
                    LayeredComponent(
                        back = ShapeComponent(fill(color.copy(alpha = 0.15f)), CorneredShape.Pill),
                        front =
                            LayeredComponent(
                                back = ShapeComponent(fill = fill(color), shape = CorneredShape.Pill),
                                front = indicatorFrontComponent,
                                padding = insets(5.dp),
                            ),
                        padding = insets(10.dp),
                    )
                }
            } else {
                null
            },
        indicatorSize = 36.dp,
        guideline = guideline,
    )
}


@Preview(showBackground = true, backgroundColor = 0xFFFFFFFF)
@Composable
private fun VicoBarChartPreview() {
    val modelProducer = remember { CartesianChartModelProducer() }
    runBlocking {
        modelProducer.runTransaction {
            columnSeries { series(500f, 600f, 750f, 680f, 820f) }
        }
    }
    Box(modifier = Modifier.height(200.dp).fillMaxWidth()) {
        VicoBarChart(modelProducer = modelProducer)
    }
}


================================================================================

FILE 96: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\components\KPILineChart.kt
Lines: 133 | Size: 5580 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.kpi.components

// Adapted from Vico Compose sample code.
// Original copyright © 2025 Patryk Goworowski and Patrick Michalik.
// Licensed under Apache 2.0: https://www.apache.org/licenses/LICENSE-2.0


import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.patrykandpatrick.vico.compose.cartesian.CartesianChartHost
import com.patrykandpatrick.vico.compose.cartesian.* 
import com.patrykandpatrick.vico.compose.cartesian.axis.rememberBottom
import com.patrykandpatrick.vico.compose.cartesian.axis.rememberStart
import com.patrykandpatrick.vico.compose.cartesian.layer.rememberLine
import com.patrykandpatrick.vico.compose.cartesian.layer.rememberLineCartesianLayer
import com.patrykandpatrick.vico.compose.common.fill
import com.patrykandpatrick.vico.core.cartesian.axis.HorizontalAxis
import com.patrykandpatrick.vico.core.cartesian.axis.VerticalAxis
import com.patrykandpatrick.vico.core.cartesian.data.CartesianChartModelProducer
import com.patrykandpatrick.vico.core.cartesian.data.lineSeries
import com.patrykandpatrick.vico.core.cartesian.layer.LineCartesianLayer
import kotlinx.coroutines.runBlocking
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import android.text.Layout
import androidx.compose.material3.MaterialTheme
import com.patrykandpatrick.vico.compose.cartesian.axis.rememberAxisGuidelineComponent
import com.patrykandpatrick.vico.compose.cartesian.marker.rememberDefaultCartesianMarker
import com.patrykandpatrick.vico.compose.common.component.fixed
import com.patrykandpatrick.vico.compose.common.component.rememberShapeComponent
import com.patrykandpatrick.vico.compose.common.component.rememberTextComponent
import com.patrykandpatrick.vico.compose.common.insets
import com.patrykandpatrick.vico.compose.common.shape.markerCorneredShape
import com.patrykandpatrick.vico.core.cartesian.marker.CartesianMarker
import com.patrykandpatrick.vico.core.cartesian.marker.DefaultCartesianMarker
import com.patrykandpatrick.vico.core.common.LayeredComponent
import com.patrykandpatrick.vico.core.common.component.ShapeComponent
import com.patrykandpatrick.vico.core.common.component.TextComponent
import com.patrykandpatrick.vico.core.common.shape.CorneredShape

@Composable
internal fun VicoLineChart(
    modelProducer: CartesianChartModelProducer,
    modifier: Modifier = Modifier,
) {
    val line = LineCartesianLayer.rememberLine(
        fill = LineCartesianLayer.LineFill.single(fill(Color(0xFF27361F))),
        areaFill = null
    )

    CartesianChartHost(
        chart = rememberCartesianChart(
            rememberLineCartesianLayer(
                lineProvider = LineCartesianLayer.LineProvider.series(line)
            ),
            startAxis = VerticalAxis.rememberStart(),
            bottomAxis = HorizontalAxis.rememberBottom(),
            marker = rememberMarker()
        ),
        modelProducer = modelProducer,
        modifier = modifier
    )
}

@Preview(showBackground = true)
@Composable
private fun VicoLineChartPreview() {
    val modelProducer = remember { CartesianChartModelProducer() }
    runBlocking {
        modelProducer.runTransaction {
            lineSeries { series(13, 8, 7, 12, 0, 1, 15, 14, 0, 11, 6, 12, 0, 11, 12, 11) }
        }
    }
    Box(modifier = Modifier.height(200.dp).fillMaxWidth()) {
        VicoLineChart(modelProducer = modelProducer)
    }
}

@Composable
internal fun rememberMarker(
    valueFormatter: DefaultCartesianMarker.ValueFormatter =
        DefaultCartesianMarker.ValueFormatter.default(),
    showIndicator: Boolean = true,
): CartesianMarker {
    val labelBackgroundShape = markerCorneredShape(CorneredShape.Corner.Rounded)
    val labelBackground =
        rememberShapeComponent(
            fill = fill(MaterialTheme.colorScheme.background),
            shape = labelBackgroundShape,
            strokeThickness = 1.dp,
            strokeFill = fill(MaterialTheme.colorScheme.outline),
        )
    val label =
        rememberTextComponent(
            color = MaterialTheme.colorScheme.onSurface,
            textAlignment = Layout.Alignment.ALIGN_CENTER,
            padding = insets(8.dp, 4.dp),
            background = labelBackground,
            minWidth = TextComponent.MinWidth.fixed(40.dp),
        )
    val indicatorFrontComponent =
        rememberShapeComponent(fill(MaterialTheme.colorScheme.surface), CorneredShape.Pill)
    val guideline = rememberAxisGuidelineComponent()
    return rememberDefaultCartesianMarker(
        label = label,
        valueFormatter = valueFormatter,
        indicator =
        if (showIndicator) {
            { color ->
                LayeredComponent(
                    back = ShapeComponent(fill(color.copy(alpha = 0.15f)), CorneredShape.Pill),
                    front =
                    LayeredComponent(
                        back = ShapeComponent(fill = fill(color), shape = CorneredShape.Pill),
                        front = indicatorFrontComponent,
                        padding = insets(5.dp),
                    ),
                    padding = insets(10.dp),
                )
            }
        } else {
            null
        },
        indicatorSize = 36.dp,
        guideline = guideline,
    )
}

================================================================================

FILE 97: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\components\KpiFilterSwitch.kt
Lines: 75 | Size: 2678 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.kpi.components

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun KpiFilterSwitch(
    modifier: Modifier = Modifier,
    options: List<String>,
    selectedOption: String,
    onOptionSelected: (String) -> Unit,
    selectedBackgroundColor: Color = MaterialTheme.colorScheme.primary,
    selectedContentColor: Color = MaterialTheme.colorScheme.onPrimary,
    unselectedBackgroundColor: Color = MaterialTheme.colorScheme.surfaceVariant,
    unselectedContentColor: Color = MaterialTheme.colorScheme.onSurfaceVariant
) {
    Surface(
        modifier = modifier,
        shape = RoundedCornerShape(50),
        color = unselectedBackgroundColor,
        tonalElevation = 2.dp
    ) {
        Row(
            modifier = Modifier
                .padding(4.dp)
                .fillMaxWidth()
        ) {
            options.forEach { option ->
                val isSelected = option == selectedOption
                Button(
                    onClick = { onOptionSelected(option) },
                    modifier = Modifier
                        .weight(1f)
                        .height(36.dp),
                    shape = RoundedCornerShape(50),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = if (isSelected) selectedBackgroundColor else Color.Transparent,
                        contentColor = if (isSelected) selectedContentColor else unselectedContentColor
                    ),
                    elevation = null,
                    contentPadding = PaddingValues(horizontal = 16.dp)
                ) {
                    Text(
                        text = option,
                        fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal,
                        fontSize = 12.sp
                    )
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
private fun KpiFilterSwitchPreview() {
    var selected by remember { mutableStateOf("Tahunan") }
    val options = listOf("Tahunan", "5 Tahun")

    Column(modifier = Modifier.padding(16.dp)) {
        KpiFilterSwitch(
            options = options,
            selectedOption = selected,
            onOptionSelected = { selected = it }
        )
    }
}


================================================================================

FILE 98: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\kpi\components\KpiStatCapsule.kt
Lines: 126 | Size: 4674 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.kpi

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowDownward
import androidx.compose.material.icons.filled.Info
import androidx.compose.material.icons.filled.Speed
import androidx.compose.material.icons.filled.TrendingUp
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ColorFilter
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R

@Composable
fun KpiStatCapsule(
    modifier: Modifier = Modifier,
    icon: Painter,
    value: String,
    unit: String,
    label: String,
    containerColor: Color = Color.White,
    contentColor: Color = Color(0xFF27361F),
    iconBackgroundColor: Color = Color(0xFF27361F),
    iconColor: Color = Color.White,
    isDisabled: Boolean = false
) {
    Card(
        modifier = modifier,
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(
            containerColor = if (isDisabled) Color(0xFFF5F5F5) else containerColor,
            contentColor = if (isDisabled) Color.Gray else contentColor
        ),
        border = BorderStroke(1.dp, if (isDisabled) Color(0xFFE8E8E8) else Color(0xFFE2E2E2)),
        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 12.dp, vertical = 10.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(6.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                Box(
                    modifier = Modifier
                        .size(24.dp)
                        .clip(RoundedCornerShape(6.dp))
                        .background(if (isDisabled) Color(0xFFCCCCCC) else iconBackgroundColor)
                        .padding(4.dp),
                    contentAlignment = Alignment.Center
                ) {
                    Image(
                        painter = icon,
                        contentDescription = null,
                        modifier = Modifier.size(20.dp),
                        contentScale = ContentScale.Fit,
                        colorFilter = ColorFilter.tint(if (isDisabled) Color.Gray else iconColor)
                    )
                }
                Row(verticalAlignment = Alignment.Bottom) {
                    Text(
                        text = value,
                        fontWeight = FontWeight.Bold,
                        fontSize = 20.sp
                    )
                    Spacer(Modifier.width(4.dp))
                    Text(
                        text = unit,
                        fontSize = 10.sp,
                        modifier = Modifier.padding(bottom = 2.dp)
                    )
                }
            }
            Text(
                text = label,
                fontSize = 12.sp,
                modifier = Modifier.padding(start = 4.dp)
            )
        }
    }
}

@Preview(showBackground = true, backgroundColor = 0xFFFFFFFF)
@Composable
private fun KpiStatCapsulePreview() {
    val rataIcon = painterResource(id = R.drawable.ic_tachometer_average)
    val terkecilIcon = painterResource(id = R.drawable.angle_double_small_down)
    Row(
        modifier = Modifier.padding(16.dp).fillMaxWidth(),
        horizontalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        KpiStatCapsule(
            modifier = Modifier.weight(1f),
            icon = rataIcon,
            value = "139",
            unit = "kg CO₂e",
            label = "Rata-rata"
        )
        KpiStatCapsule(
            modifier = Modifier.weight(1f),
            icon = terkecilIcon,
            value = "68",
            unit = "kg CO₂e",
            label = "Terkecil"
        )
    }
}


================================================================================

FILE 99: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\upload\UploadDataScreen.kt
Lines: 317 | Size: 12131 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.upload

import android.net.Uri
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.util.Resource
import com.example.tumbuhnyata.ui.dashboard.upload.components.DocumentUploadItem
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.UploadViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun UploadDataScreen(
    navController: NavController,
    uploadViewModel: UploadViewModel = viewModel()
) {
    val uploadState by uploadViewModel.uploadState.collectAsState()
    val context = LocalContext.current

    // File picker launcher
    val filePickerLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.GetContent()
    ) { uri: Uri? ->
        uri?.let { selectedUri ->
            // Get file name from URI
            val fileName = getFileNameFromUri(context, selectedUri) ?: "data_file.csv"
            uploadViewModel.selectFile(selectedUri, fileName)
        }
    }

    // Handle upload result
    LaunchedEffect(uploadState.uploadResult) {
        when (val result = uploadState.uploadResult) {
            is Resource.Success -> {
                // Navigate to success screen
                navController.navigate("upload_success") {
                    popUpTo("upload_data") { inclusive = true }
                }
            }
            is Resource.Error -> {
                // Error will be shown in UI, no need to navigate
            }
            else -> {}
        }
    }

    Scaffold(
        containerColor = Color.White,
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = "Dashboard",
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        fontSize = 25.sp,
                        color = Color.Black
                    )
                },
                navigationIcon = {
                    IconButton(
                        onClick = { navController.navigateUp() },
                        modifier = Modifier.padding(start = 4.dp)
                    ) {
                        Box(
                            modifier = Modifier
                                .size(32.dp)
                                .clip(CircleShape)
                                .background(Color(0xFF27361F)),
                            contentAlignment = Alignment.Center
                        ) {
                            Image(
                                painter = painterResource(id = R.drawable.arrow_left),
                                contentDescription = "Back",
                                modifier = Modifier.size(16.dp),
                                contentScale = ContentScale.Fit
                            )
                        }
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = Color.Transparent,
                    titleContentColor = Color.Black,
                    navigationIconContentColor = Color.White
                )
            )
        },
        bottomBar = {
            Button(
                onClick = { uploadViewModel.uploadFile() },
                enabled = uploadState.isUploadEnabled && !uploadState.isLoading,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 12.dp)
                    .height(48.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF27361F),
                    contentColor = Color(0xFFFAFAFA),
                    disabledContainerColor = Color(0xFF989898),
                    disabledContentColor = Color(0xFFFAFAFA)
                ),
                shape = RoundedCornerShape(10.dp)
            ) {
                if (uploadState.isLoading) {
                    CircularProgressIndicator(
                        modifier = Modifier.size(16.dp),
                        color = Color.White,
                        strokeWidth = 2.dp
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "Uploading...",
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        fontSize = 17.sp
                    )
                } else {
                    Text(
                        text = "Unggah Data",
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        fontSize = 17.sp
                    )
                }
            }
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .padding(horizontal = 16.dp)
                .fillMaxSize()
                .verticalScroll(rememberScrollState()) 
        ) {

            Text(
                text = "Upload Data File",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                fontSize = 25.sp,
                color = Color.Black,
            )

            Spacer(modifier = Modifier.height(8.dp))

                                Text(
                        text = "* Upload file CSV berisi data emisi karbon (maksimal 10MB)",
                        fontFamily = PoppinsFontFamily,
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant,
                        modifier = Modifier.padding(bottom = 8.dp)
                    )
                    
                    Text(
                        text = "* Company ID akan otomatis diambil dari akun yang login",
                        fontFamily = PoppinsFontFamily,
                        style = MaterialTheme.typography.bodySmall,
                        color = Color(0xFF27361F),
                        modifier = Modifier.padding(bottom = 16.dp)
                    )

            // CSV Format Guide
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 24.dp),
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFFF5F5F5)
                )
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "Format CSV yang diperlukan:",
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.SemiBold,
                        fontSize = 14.sp,
                        color = Color.Black,
                        modifier = Modifier.padding(bottom = 8.dp)
                    )
                    
                    val csvColumns = listOf(
                        "year", "month", "carbon_value",
                        "document_type", "document_name", "analysis"
                    )
                    
                    csvColumns.forEach { column ->
                        Text(
                            text = "• $column",
                            fontFamily = PoppinsFontFamily,
                            fontSize = 12.sp,
                            color = Color(0xFF666666),
                            modifier = Modifier.padding(start = 8.dp, bottom = 2.dp)
                        )
                    }
                }
            }

            // Single CSV file upload
            DocumentUploadItem(
                label = "Data File (.csv)",
                placeholderText = "Pilih file CSV data emisi",
                selectedFileName = uploadState.selectedFileName,
                onSelectClick = {
                    filePickerLauncher.launch("*/*")
                },
                onRemoveClick = {
                    uploadViewModel.clearSelectedFile()
                },
                modifier = Modifier.padding(bottom = 16.dp)
            )

            // Error message
            uploadState.uploadResult?.let { result ->
                if (result is Resource.Error) {
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(bottom = 16.dp),
                        colors = CardDefaults.cardColors(
                            containerColor = Color(0xFFFFEBEE)
                        )
                    ) {
                        Row(
                            modifier = Modifier
                                .padding(16.dp)
                                .fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = result.message ?: "Upload failed",
                                color = Color(0xFFD32F2F),
                                fontFamily = PoppinsFontFamily,
                                style = MaterialTheme.typography.bodyMedium,
                                modifier = Modifier.weight(1f)
                            )
                            TextButton(
                                onClick = { uploadViewModel.clearUploadResult() }
                            ) {
                                Text(
                                    text = "Dismiss",
                                    color = Color(0xFFD32F2F),
                                    fontFamily = PoppinsFontFamily
                                )
                            }
                        }
                    }
                }
            }

            Spacer(modifier = Modifier.height(16.dp))
        }
    }
}

/**
 * Helper function to get file name from URI
 */
private fun getFileNameFromUri(context: android.content.Context, uri: Uri): String? {
    var fileName: String? = null
    
    if (uri.scheme == "content") {
        val cursor = context.contentResolver.query(uri, null, null, null, null)
        cursor?.use {
            if (it.moveToFirst()) {
                val nameIndex = it.getColumnIndex(android.provider.OpenableColumns.DISPLAY_NAME)
                if (nameIndex != -1) {
                    fileName = it.getString(nameIndex)
                }
            }
        }
    }
    
    if (fileName == null) {
        fileName = uri.path?.let {
            val cut = it.lastIndexOf('/')
            if (cut != -1) {
                it.substring(cut + 1)
            } else {
                it
            }
        }
    }
    
    return fileName
}

@Preview(showBackground = true)
@Composable
private fun UploadDataScreenPreview() {
    UploadDataScreen(navController = rememberNavController())
}


================================================================================

FILE 100: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\upload\UploadSuccessScreen.kt
Lines: 164 | Size: 6027 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.upload

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.zIndex
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun UploadSuccessScreen(navController: NavController) {
    val gradientBrush = Brush.verticalGradient(
        colorStops = arrayOf(
            0.0f to Color(0xFF5A7C47),
            0.48f to Color(0xFF415A33),
            1.0f to Color(0xFF27361F)
        )
    )

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(gradientBrush),
        contentAlignment = Alignment.Center
    ) {

        Image(
            painter = painterResource(id = R.drawable.background_sc),
            contentDescription = "Background",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        Box(
            modifier = Modifier.fillMaxSize()
        ) {
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .fillMaxHeight(0.8f)
                    .align(Alignment.Center),
                contentAlignment = Alignment.Center
            ) {

                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    modifier = Modifier
                        .padding(horizontal = 32.dp)
                        .zIndex(1f)
                ) {

                    Icon(
                        painter = painterResource(id = R.drawable.ic_pembaruandatasplashlogo),
                        contentDescription = "Success",
                        modifier = Modifier.size(190.dp),
                        tint = Color.Unspecified
                    )

                    Spacer(modifier = Modifier.height(24.dp))

                    Text(
                        text = "Data CSV Berhasil\nDiunggah",
                        fontSize = 22.sp,
                        fontFamily = PoppinsFontFamily,
                        color = Color.White,
                        textAlign = TextAlign.Center,
                        fontWeight = FontWeight.Bold,
                        lineHeight = 28.sp
                    )

                    Spacer(modifier = Modifier.height(16.dp))

                    Text(
                        text = "File CSV telah berhasil diunggah dan sedang\ndiproses untuk analisis emisi karbon",
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        color = Color.White.copy(alpha = 0.8f),
                        textAlign = TextAlign.Center,
                        lineHeight = 20.sp
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    Text(
                        text = "Data akan muncul di dashboard dalam beberapa saat",
                        fontSize = 12.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color.White.copy(alpha = 0.8f),
                        textAlign = TextAlign.Center
                    )
                }
            }

            Column(
                horizontalAlignment = Alignment.Start,
                modifier = Modifier
                    .fillMaxWidth()
                    .align(Alignment.BottomCenter)
                    .padding(horizontal = 32.dp, vertical = 16.dp)
            ) {

                Text(
                    text = "Informasi: Dashboard akan diperbarui secara otomatis dengan data terbaru dari file CSV yang telah diunggah",
                    fontSize = 10.sp,
                    fontFamily = PoppinsFontFamily,
                    color = Color.White.copy(alpha = 0.7f),
                    textAlign = TextAlign.Left,
                    lineHeight = 14.sp,
                    modifier = Modifier.padding(bottom = 16.dp)
                )
                

                Button(
                    onClick = {
                        navController.navigate("dashboard") {
                            popUpTo("dashboard") { inclusive = true }
                            launchSingleTop = true
                        }
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(48.dp),
                    shape = RoundedCornerShape(10.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF151E11).copy(alpha = 0.8f)
                    )
                ) {
                    Text(
                        text = "Kembali ke Dashboard",
                        color = Color.White,
                        fontSize = 17.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold
                    )
                }
                
                Spacer(modifier = Modifier.height(8.dp))
            }
        }
    }
}

@Preview(showBackground = true, backgroundColor = 0xFF415A33)
@Composable
fun UploadSuccessScreenPreview() {
    UploadSuccessScreen(navController = rememberNavController())
}


================================================================================

FILE 101: app\src\main\java\com\example\tumbuhnyata\ui\dashboard\upload\components\DocumentUploadItem.kt
Lines: 153 | Size: 6282 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboard.upload.components

import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Close
import androidx.compose.material.icons.filled.InsertDriveFile // Icon for selected file
import androidx.compose.material.icons.filled.UploadFile // Icon for upload action
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun DocumentUploadItem(
    modifier: Modifier = Modifier,
    label: String,
    placeholderText: String,
    selectedFileName: String?, // Null if no file selected, filename otherwise
    onSelectClick: () -> Unit, // Action to trigger file selection
    onRemoveClick: () -> Unit // Action to remove selected file
) {
    val shape = RoundedCornerShape(8.dp)
    val hasFileSelected = selectedFileName != null

    Column(modifier = modifier) {
        // Label Text (e.g., "Laporan CSR")
        Text(
            text = label,
            fontFamily = PoppinsFontFamily,
            style = MaterialTheme.typography.titleSmall,
            fontWeight = FontWeight.Medium,
            modifier = Modifier.padding(bottom = 6.dp)
        )

        // Clickable Upload Area Box
        Surface(
            modifier = Modifier
                .fillMaxWidth()
                .height(56.dp) // Fixed height for the box
                .clip(shape) // Apply clipping before border and clickable
                .border( // Apply border
                    width = 1.dp,
                    color = MaterialTheme.colorScheme.outline,
                    shape = shape
                )
                .clickable(
                    enabled = !hasFileSelected, // Only clickable if no file is selected
                    onClick = onSelectClick
                ),
            shape = shape,
            color = Color.Transparent // Make surface transparent, border provides outline
        ) {
            Row(
                modifier = Modifier
                    .padding(horizontal = 16.dp)
                    .fillMaxSize(), // Fill the Surface
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween // Space out content
            ) {
                if (hasFileSelected) {
                    // --- State when file IS selected ---
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier.weight(1f) // Allow text to take space and ellipsize
                    ) {
                        Icon(
                            imageVector = Icons.Filled.InsertDriveFile,
                            contentDescription = null,
                            tint = Color(0xFF686868),
                            modifier = Modifier.size(20.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = selectedFileName ?: "", // Should not be null here, but safe call
                            fontFamily = PoppinsFontFamily,
                            style = MaterialTheme.typography.bodyMedium,
                            maxLines = 1,
                            overflow = TextOverflow.Ellipsis
                        )
                    }
                    // Remove Button
                    IconButton(
                        onClick = onRemoveClick,
                        modifier = Modifier.size(24.dp) // Smaller touch target is okay here
                    ) {
                        Icon(
                            imageVector = Icons.Filled.Close,
                            contentDescription = "Remove File",
                            tint = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                } else {
                    // --- State when NO file is selected ---
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        Icon(
                            imageVector = Icons.Filled.UploadFile,
                            contentDescription = null,
                            tint = Color(0xFFB9B9B9), // Use primary color for icon
                            modifier = Modifier.size(20.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = placeholderText,
                            fontFamily = PoppinsFontFamily,
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.onSurfaceVariant // Dimmed placeholder color
                        )
                    }
                    // No remove button needed here
                }
            }
        }
    }
}

@Preview(showBackground = true, widthDp = 360)
@Composable
private fun DocumentUploadItemPreview_Empty() {
    Column(Modifier.padding(16.dp)) {
        DocumentUploadItem(
            label = "Laporan CSR",
            placeholderText = "Laporan",
            selectedFileName = null,
            onSelectClick = {},
            onRemoveClick = {}
        )
    }
}

@Preview(showBackground = true, widthDp = 360)
@Composable
private fun DocumentUploadItemPreview_Selected() {
    Column(Modifier.padding(16.dp)) {
        DocumentUploadItem(
            label = "Sertifikasi CSR",
            placeholderText = "Sertifikasi",
            selectedFileName = "Sertifikasi ISO 9001-2024 Rev B Long Name.pdf",
            onSelectClick = {},
            onRemoveClick = {}
        )
    }
}


================================================================================

FILE 102: app\src\main\java\com\example\tumbuhnyata\ui\dashboardkeuangan\DashboardComponents.kt
Lines: 93 | Size: 2630 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboardkeuangan

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*

import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.tooling.preview.Preview

@Composable
fun InfoBox(title: String, value: String, amount: String) {
    Column(
        modifier = Modifier
            .padding(8.dp)
            .background(Color.White, shape = RoundedCornerShape(12.dp))
            .padding(12.dp)
    ) {
        Text(text = title, fontSize = 14.sp)
        Text(text = value, fontSize = 20.sp, fontWeight = FontWeight.Bold)
        Text(text = amount, fontSize = 12.sp)
    }
}

@Composable
fun StatusBox(label: String, amount: String, bgColor: Color) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp)
            .background(bgColor.copy(alpha = 0.1f), shape = RoundedCornerShape(12.dp))
            .padding(12.dp)
    ) {
        Text(text = label, fontSize = 14.sp)
        Text(text = amount, fontSize = 18.sp, fontWeight = FontWeight.Bold)
    }
}

@Composable
fun PopupDownloadSuccess(onDismiss: () -> Unit) {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Black.copy(alpha = 0.5f)),
        contentAlignment = Alignment.Center
    ) {
        Column(
            modifier = Modifier
                .background(Color.White, shape = RoundedCornerShape(16.dp))
                .padding(24.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text("Berhasil Mengunduh\nLaporan Keuangan", fontSize = 16.sp)
            Spacer(modifier = Modifier.height(16.dp))
            Button(onClick = { onDismiss() }) {
                Text("Ok")
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewInfoBox() {
    InfoBox(
        title = "Total CSR",
        value = "Rp 3.187.450.725",
        amount = "2 Program CSR"
    )
}

@Preview(showBackground = true)
@Composable
fun PreviewStatusBox() {
    StatusBox(
        label = "Program Selesai",
        amount = "Rp 1.231.779.900",
        bgColor = Color(0xFF2196F3)
    )
}

@Preview(showBackground = true)
@Composable
fun PreviewPopupDownloadSuccess() {
    PopupDownloadSuccess(onDismiss = {})
}



================================================================================

FILE 103: app\src\main\java\com\example\tumbuhnyata\ui\dashboardkeuangan\DashboardKeuanganScreen.kt
Lines: 483 | Size: 19591 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboardkeuangan

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.DashboardKeuanganViewModel
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.ui.input.nestedscroll.nestedScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.ui.window.Dialog
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController

@Composable
fun DashboardKeuanganScreen(
    navController: NavController = rememberNavController(),
    viewModel: DashboardKeuanganViewModel = DashboardKeuanganViewModel()
) {
    val categories = viewModel.categories
    val total = viewModel.total
    var showPopup by remember { mutableStateOf(false) }
    val scrollState = rememberScrollState()

    Scaffold(
        contentWindowInsets = WindowInsets.safeDrawing
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .padding(innerPadding)
                .fillMaxSize()
                .background(Color.White)
                .verticalScroll(rememberScrollState())
                .padding(16.dp)
        ) {
            // Header with back button
            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Image(
                    painter = painterResource(id = R.drawable.btn_back),
                    contentDescription = "Kembali",
                    modifier = Modifier
                        .size(32.dp)
                        .clickable { navController.navigateUp() }
                )
                Spacer(modifier = Modifier.width(16.dp))
                Text(
                    text = "Dashboard Keuangan",
                    fontSize = 25.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.ExtraBold,
                    color = Color.Black
                )
            }
            
            Text(
                text = buildAnnotatedString {
                    append("Semua laporan keuangan pada dashboard ini merupakan pengeluaran program CSR anda pada Tumbuh Nyata ")
                    withStyle(style = SpanStyle(fontWeight = FontWeight.Bold)) {
                        append("(Anggaran + Biaya Jasa)")
                    }
                },
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.Black,
                modifier = Modifier.padding(top = 8.dp, bottom = 16.dp)
            )

            // Download Button
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(195.dp)
                    .padding(vertical = 16.dp),
                shape = RoundedCornerShape(12.dp),
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFF27361F)
                )
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Column(
                        modifier = Modifier.weight(1f)
                    ) {
                        Text(
                            text = "Unduh Laporan Keuangan",
                            fontSize = 14.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Bold,
                            color = Color.White
                        )
                        Text(
                            text = "CSR Anda Sekarang",
                            fontSize = 14.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Bold,
                            color = Color.White
                        )
                        Spacer(modifier = Modifier.height(4.dp))
                        Text(
                            text = "Pantau dan kelola lebih mudah",
                            fontSize = 12.sp,
                            fontFamily = PoppinsFontFamily,
                            color = Color.White,
                        )
                        Button(
                            onClick = { showPopup = true },
                            modifier = Modifier
                                .padding(top = 8.dp)
                                .height(32.dp),
                            shape = RoundedCornerShape(8.dp),
                            colors = ButtonDefaults.buttonColors(
                                containerColor = Color.White
                            )
                        ) {
                            Text(
                                text = "Download",
                                fontSize = 12.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Bold,
                                color = Color(0xFF27361F)
                            )
                        }
                    }
                    
                    Image(
                        painter = painterResource(id = R.drawable.ic_dbkeuangan_folder),
                        contentDescription = "Folder",
                        modifier = Modifier.width(87.dp).height(81.dp)
                    )
                }
            }

            // Total Section
            Text(
                text = "Total",
                fontSize = 25.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.ExtraBold ,
                color = Color(0xFF4B4B4B)
            )
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                shape = RoundedCornerShape(12.dp),
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFF27361F)
                )
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "Rp",
                        fontSize = 21.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.ExtraBold,
                        color = Color.White
                    )
                    Text(
                        text = String.format("%,.0f", total),
                        fontSize = 21.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.ExtraBold,
                        color = Color(0xFFEBFD6F)
                    )
                }
            }

            // Category Cards with border
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 16.dp),
                horizontalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                categories.forEach { category ->
                    Card(
                        modifier = Modifier.weight(1f),
                        shape = RoundedCornerShape(12.dp),
                        colors = CardDefaults.cardColors(containerColor = Color.White),
                        border = BorderStroke(1.dp, Color(0xFFB9B9B9))
                    ) {
                        Column(
                            modifier = Modifier.padding(16.dp)
                        ) {
                            Row(
                                verticalAlignment = Alignment.CenterVertically,
                                horizontalArrangement = Arrangement.spacedBy(4.dp)
                            ) {
                                Text(
                                    text = category.name,
                                    fontSize = 17.sp,
                                    fontFamily = PoppinsFontFamily,
                                    fontWeight = FontWeight.Bold,
                                    color = Color(0xFF686868)
                                )
                                Icon(
                                    painter = painterResource(
                                        id = if (category.name == "Sosial") R.drawable.ic_social
                                        else R.drawable.ic_environment
                                    ),
                                    contentDescription = category.name,
                                    modifier = Modifier.size(16.dp),
                                    tint = category.color
                                )
                            }
                            Text(
                                text = if (category.name == "Sosial") "12" else "9",
                                fontSize = 36.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Bold
                            )
                            Text(
                                text = "Rp ${String.format("%,.0f", category.amount)}",
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Bold,
                                color = Color.Black
                            )
                        }
                    }
                }
            }

            // Pie Chart Card with border
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                shape = RoundedCornerShape(12.dp),
                colors = CardDefaults.cardColors(containerColor = Color.White),
                border = BorderStroke(1.dp, Color(0xFFB9B9B9))
            ) {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp)
                ) {
                    DynamicPieChart(categories = categories)
                }
            }

            // Status Boxes with borders
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                // Selesai Box
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(12.dp),
                    border = BorderStroke(1.dp, Color(0xFFB9B9B9))
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(
                                brush = Brush.horizontalGradient(
                                    colors = listOf(
                                        Color(0xFFF8F8F8),
                                        Color(0xFF989898)
                                    )
                                )
                            )
                            .padding(16.dp)
                    ) {
                        Column {
                            Text(
                                text = "Selesai ✅",
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                color = Color.Black
                            )
                            Text(
                                text = "Rp 886.240.100",
                                fontSize = 18.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Bold,
                                color = Color.Black
                            )
                        }
                    }
                }

                // Progress Box
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(12.dp),
                    border = BorderStroke(1.dp, Color(0xFFB9B9B9))
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(
                                brush = Brush.horizontalGradient(
                                    colors = listOf(
                                        Color(0xFFF8F8F8),
                                        Color(0xFFFFD95D)
                                    )
                                )
                            )
                            .padding(16.dp)
                    ) {
                        Column {
                            Text(
                                text = "Progress ⏳",
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                color = Color.Black
                            )
                            Text(
                                text = "Rp 1.732.890.150",
                                fontSize = 18.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Bold,
                                color = Color.Black
                            )
                        }
                    }
                }

                // Mendatang Box
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(12.dp),
                    border = BorderStroke(1.dp, Color(0xFFB9B9B9))
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(
                                brush = Brush.horizontalGradient(
                                    colors = listOf(
                                        Color(0xFFF8F8F8),
                                        Color(0xFF9CDEFF)
                                    )
                                )
                            )
                            .padding(16.dp)
                    ) {
                        Column {
                            Text(
                                text = "Mendatang ⏱️",
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                color = Color.Black
                            )
                            Text(
                                text = "Rp 568.320.475",
                                fontSize = 18.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Bold,
                                color = Color.Black
                            )
                        }
                    }
                }
            }

            // Add some bottom padding
            Spacer(modifier = Modifier.height(16.dp))
        }
    }

    if (showPopup) {
        Dialog(
            onDismissRequest = { showPopup = false }
        ) {
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp),
                shape = RoundedCornerShape(16.dp),
                colors = CardDefaults.cardColors(
                    containerColor = Color.White
                )
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(24.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = "Download",
                        fontSize = 12.sp,
                        fontFamily = PoppinsFontFamily,
                        color = Color(0xFF27361F)
                    )
                    Spacer(modifier = Modifier.height(16.dp))
                    Image(
                        painter = painterResource(id = R.drawable.ic_db_download_success),
                        contentDescription = "Success",
                        modifier = Modifier.size(80.dp)
                    )
                    Spacer(modifier = Modifier.height(16.dp))
                    Text(
                        text = "Berhasil Mengunduh",
                        fontSize = 16.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color.Black
                    )
                    Text(
                        text = "Laporan Keuangan",
                        fontSize = 16.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color.Black
                    )
                    Spacer(modifier = Modifier.height(24.dp))
                    Button(
                        onClick = { showPopup = false },
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(48.dp),
                        shape = RoundedCornerShape(8.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFF27361F)
                        )
                    ) {
                        Text(
                            text = "Ok",
                            fontSize = 14.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Bold,
                            color = Color.White
                        )
                    }
                }
            }
        }
    }
}

@Preview(
    name = "Dashboard Keuangan Screen",
    showBackground = true,
    backgroundColor = 0xFFFFFFFF,
    showSystemUi = true
)
@Composable
fun PreviewDashboardKeuanganScreen() {
    MaterialTheme {
        DashboardKeuanganScreen()
    }
}


================================================================================

FILE 104: app\src\main\java\com\example\tumbuhnyata\ui\dashboardkeuangan\PieChart.kt
Lines: 129 | Size: 4458 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.dashboardkeuangan

import androidx.compose.foundation.Canvas
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.Alignment
import androidx.compose.ui.geometry.Size
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.data.model.CsrCategory
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import kotlin.math.roundToInt
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.draw.clip

@Composable
fun DynamicPieChart(categories: List<CsrCategory>) {
    val total = categories.sumOf { it.amount.toDouble() }.toFloat()
    val angles = categories.map { (it.amount / total * 360f) }
    val percentages = categories.map { ((it.amount / total) * 100).roundToInt() }

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp)
    ) {
        // Legend at the top
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp),
            horizontalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            categories.forEach { category ->
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier.padding(vertical = 4.dp)
                ) {
                    Box(
                        modifier = Modifier
                            .size(10.dp)
                            .clip(RoundedCornerShape(2.dp))
                            .background(category.color)
                    )
                    Spacer(modifier = Modifier.width(6.dp))
                    Text(
                        text = category.name,
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        color = Color.Black
                    )
                }
            }
        }

        // Pie Chart with percentages
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(160.dp),
            contentAlignment = Alignment.Center
        ) {
            Canvas(
                modifier = Modifier
                    .size(140.dp)
            ) {
                val canvasSize = Size(size.width, size.height)
                var startAngle = -90f
                
                categories.forEachIndexed { index, category ->
                    drawArc(
                        color = category.color,
                        startAngle = startAngle,
                        sweepAngle = angles[index],
                        useCenter = true,
                        size = canvasSize
                    )
                    startAngle += angles[index]
                }
            }

            // Percentage texts
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.CenterStart
            ) {
                Text(
                    text = "${percentages[1]}%",
                    fontSize = 20.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    color = categories[1].color,
                    modifier = Modifier.padding(start = 24.dp)
                )
            }
            
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.CenterEnd
            ) {
                Text(
                    text = "${percentages[0]}%",
                    fontSize = 20.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    color = categories[0].color,
                    modifier = Modifier.padding(end = 24.dp)
                )
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewDynamicPieChart() {
    val previewCategories = listOf(
        CsrCategory("Sosial", 1955670784f, Color(0xFF4285F4)),
        CsrCategory("Lingkungan", 1231779840f, Color(0xFF8AB4F8))
    )
    DynamicPieChart(categories = previewCategories)
}



================================================================================

FILE 105: app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\CsrSubmissionScreen.kt
Lines: 828 | Size: 32049 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.eventcsr

import androidx.compose.animation.AnimatedContent
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import android.net.Uri
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.material3.DatePicker
import androidx.compose.material3.DatePickerDialog
import androidx.compose.ui.tooling.preview.Preview
import androidx.navigation.compose.rememberNavController
import java.text.SimpleDateFormat
import java.util.*
import com.google.gson.Gson
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.tumbuhnyata.viewmodel.CsrSubmissionViewModel
import com.example.tumbuhnyata.data.model.CsrData

@Composable
fun CsrSubmissionScreen(navController: NavController) {
    val viewModel: CsrSubmissionViewModel = viewModel()
    var step by remember { mutableStateOf(1) }

    Scaffold()
    { innerPadding ->
        Column(
            modifier = Modifier
                .padding(innerPadding)
                .fillMaxSize()
                .background(Color.White),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // Header with back button and step indicator
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
            ) {
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // Back button
                    Image(
                        painter = painterResource(id = R.drawable.btn_back),
                        contentDescription = "Kembali",
                        modifier = Modifier
                            .size(32.dp)
                            .clickable { navController.navigateUp() }
                    )

                    Text(
                        text = "Ajukan CSR",
                        fontSize = 20.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color.Black
                    )

                    Text(
                        text = "Langkah $step/4",
                        fontSize = 16.sp,
                        fontFamily = PoppinsFontFamily,
                        color = Color.Gray
                    )
                }
            }

            // Content based on current step
            AnimatedContent(targetState = step, label = "CSR Steps") { currentStep ->
                when (currentStep) {
                    1 -> StepOne(
                        programName = viewModel.programName.value,
                        selectedCategory = viewModel.category.value,
                        description = viewModel.description.value,
                        onProgramNameChange = { viewModel.programName.value = it },
                        onCategoryChange = { viewModel.category.value = it },
                        onDescriptionChange = { viewModel.description.value = it },
                        onNext = { step++ },
                        navController = navController
                    )

                    2 -> StepTwo(
                        location = viewModel.location.value,
                        partnerName = viewModel.partnerName.value,
                        startDate = viewModel.startDate.value,
                        endDate = viewModel.endDate.value,
                        budget = viewModel.budget.value,
                        onLocationChange = { viewModel.location.value = it },
                        onPartnerNameChange = { viewModel.partnerName.value = it },
                        onStartDateChange = { viewModel.startDate.value = it },
                        onEndDateChange = { viewModel.endDate.value = it },
                        onBudgetChange = { viewModel.budget.value = it },
                        onNext = { step++ }
                    )

                    3 -> StepThree { step++ }
                    4 -> StepFour(navController = navController, viewModel = viewModel) { step++ }
                }
            }
        }
    }
}
    @Composable
    fun StepOne(
        programName: String,
        selectedCategory: String,
        description: String,
        onProgramNameChange: (String) -> Unit,
        onCategoryChange: (String) -> Unit,
        onDescriptionChange: (String) -> Unit,
        onNext: () -> Unit,
        navController: NavController
    ) {
        var showCategoryDropdown by remember { mutableStateOf(false) }

        val categories =
            listOf("Lingkungan", " Pendidikan", "Kesehatan", "Ekonomi", "Sosial Budaya")
        val viewModel: CsrSubmissionViewModel = viewModel()
        val isFormValid = viewModel.isFormStepOneValid(description)

        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            // Program Name
            OutlinedTextField(
                value = programName,
                onValueChange = onProgramNameChange,
                label = { Text("Nama Program", fontFamily = PoppinsFontFamily) },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                shape = RoundedCornerShape(15.dp),
                colors = OutlinedTextFieldDefaults.colors(
                    unfocusedBorderColor = Color.Gray,
                    focusedBorderColor = Color(0xFF3A5A40)
                )
            )

            Text(
                text = "*Tuliskan nama kegiatan dengan pendek dan ringkas",
                fontSize = 12.sp,
                color = Color.Gray,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier.padding(bottom = 16.dp)
            )

            // Category Dropdown
            Box(modifier = Modifier.fillMaxWidth()) {
                OutlinedTextField(
                    value = selectedCategory,
                    onValueChange = { },
                    label = { Text("Kategori", fontFamily = PoppinsFontFamily) },
                    readOnly = true,
                    modifier = Modifier
                        .fillMaxWidth()
                        .clickable { showCategoryDropdown = true },
                    trailingIcon = {
                        IconButton(
                            onClick = { showCategoryDropdown = true }
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_dropdown),
                                contentDescription = "Dropdown",
                                modifier = Modifier.size(24.dp)
                            )
                        }
                    },
                    shape = RoundedCornerShape(15.dp),
                    colors = OutlinedTextFieldDefaults.colors(
                        unfocusedBorderColor = Color.Gray,
                        focusedBorderColor = Color(0xFF3A5A40)
                    )
                )

                DropdownMenu(
                    expanded = showCategoryDropdown,
                    onDismissRequest = { showCategoryDropdown = false }
                ) {
                    categories.forEach { category ->
                        DropdownMenuItem(
                            text = {
                                Text(
                                    text = category,
                                    fontFamily = PoppinsFontFamily,
                                    fontSize = 16.sp
                                )
                            },
                            onClick = {
                                onCategoryChange(category)
                                showCategoryDropdown = false
                            }
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Description
            OutlinedTextField(
                value = description,
                onValueChange = {
                    if (it.length <= 2000) {
                        onDescriptionChange(it)
                    }
                },
                label = { Text("Deskripsi", fontFamily = PoppinsFontFamily) },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(120.dp),
                shape = RoundedCornerShape(15.dp),
                colors = OutlinedTextFieldDefaults.colors(
                    unfocusedBorderColor = Color.Gray,
                    focusedBorderColor = Color(0xFF3A5A40)
                ),
                supportingText = {
                    Text(
                        text = "${description.length}/2000",
                        modifier = Modifier.fillMaxWidth(),
                        textAlign = TextAlign.End,
                        fontFamily = PoppinsFontFamily
                    )
                }
            )

            Text(
                text = "*Deskripsikan secara singkat program anda dengan menuliskan tujuan dan sasaran program secara singkat",
                fontSize = 12.sp,
                color = Color.Gray,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier.padding(bottom = 16.dp)
            )

            Spacer(modifier = Modifier.weight(1f))

            // Next Button
            Button(
                onClick = onNext,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (isFormValid) Color(0xFF27361F) else Color.Gray,
                    contentColor = Color.White
                ),
                enabled = isFormValid
            ) {
                Text(
                    text = "Selanjutnya",
                    fontSize = 17.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold
                )
            }

            Spacer(modifier = Modifier.height(8.dp)) // Add a small spacer

            // View Drafts Button
            Button(
                onClick = { navController.navigate("draft_list") },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color.Gray,
                    contentColor = Color.White
                )
            ) {
                Text(
                    text = "Lihat Draft",
                    fontSize = 17.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }

    @OptIn(ExperimentalMaterial3Api::class)
    @Composable
    fun StepTwo(
        location: String,
        partnerName: String,
        startDate: String,
        endDate: String,
        budget: String,
        onLocationChange: (String) -> Unit,
        onPartnerNameChange: (String) -> Unit,
        onStartDateChange: (String) -> Unit,
        onEndDateChange: (String) -> Unit,
        onBudgetChange: (String) -> Unit,
        onNext: () -> Unit
    ) {
        var showDatePicker by remember { mutableStateOf(false) }
        var isSelectingStartDate by remember { mutableStateOf(true) }

        val datePickerState = rememberDatePickerState()
        val viewModel: CsrSubmissionViewModel = viewModel()
        val isFormValid = viewModel.isFormStepTwoValid()

        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            // Location Search
            OutlinedTextField(
                value = location,
                onValueChange = onLocationChange,
                label = { Text("Lokasi Pelaksanaan", fontFamily = PoppinsFontFamily) },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                leadingIcon = {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_event_loc1),
                        contentDescription = "Location",
                        modifier = Modifier.size(24.dp)
                    )
                },
                shape = RoundedCornerShape(15.dp),
                colors = OutlinedTextFieldDefaults.colors(
                    unfocusedBorderColor = Color.Gray,
                    focusedBorderColor = Color(0xFF3A5A40)
                )
            )

            Spacer(modifier = Modifier.height(16.dp))

            // Partner Name
            OutlinedTextField(
                value = partnerName,
                onValueChange = onPartnerNameChange,
                label = { Text("Nama Mitra (Jika Ada)", fontFamily = PoppinsFontFamily) },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                shape = RoundedCornerShape(15.dp),
                colors = OutlinedTextFieldDefaults.colors(
                    unfocusedBorderColor = Color.Gray,
                    focusedBorderColor = Color(0xFF3A5A40)
                )
            )

            Text(
                text = "*Apabila nama mitra kosong, maka kami akan mencarikan mitra untuk program CSR anda",
                fontSize = 12.sp,
                color = Color.Gray,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier.padding(bottom = 16.dp)
            )

            // Program Period
            Text(
                text = "Periode Program",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Medium,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                // Start Date
                OutlinedTextField(
                    value = startDate,
                    onValueChange = { },
                    label = { Text("Mulai", fontFamily = PoppinsFontFamily) },
                    modifier = Modifier
                        .weight(1f)
                        .padding(end = 8.dp),
                    readOnly = true,
                    trailingIcon = {
                        IconButton(
                            onClick = {
                                isSelectingStartDate = true
                                showDatePicker = true
                            }
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_event_calendar1),
                                contentDescription = "Calendar",
                                modifier = Modifier.size(24.dp)
                            )
                        }
                    },
                    shape = RoundedCornerShape(15.dp),
                    colors = OutlinedTextFieldDefaults.colors(
                        unfocusedBorderColor = Color.Gray,
                        focusedBorderColor = Color(0xFF3A5A40)
                    )
                )

                // End Date
                OutlinedTextField(
                    value = endDate,
                    onValueChange = { },
                    label = { Text("Berakhir", fontFamily = PoppinsFontFamily) },
                    modifier = Modifier
                        .weight(1f)
                        .padding(start = 8.dp),
                    readOnly = true,
                    trailingIcon = {
                        IconButton(
                            onClick = {
                                isSelectingStartDate = false
                                showDatePicker = true
                            }
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_event_calendar1),
                                contentDescription = "Calendar",
                                modifier = Modifier.size(24.dp)
                            )
                        }
                    },
                    shape = RoundedCornerShape(15.dp),
                    colors = OutlinedTextFieldDefaults.colors(
                        unfocusedBorderColor = Color.Gray,
                        focusedBorderColor = Color(0xFF3A5A40)
                    )
                )
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Budget with number validation
            OutlinedTextField(
                value = budget,
                onValueChange = { newValue ->
                    if (newValue.all { it.isDigit() }) {
                        onBudgetChange(newValue)
                    }
                },
                label = { Text("Anggaran", fontFamily = PoppinsFontFamily) },
                modifier = Modifier.fillMaxWidth(),
                leadingIcon = {
                    Text(
                        text = "Rp",
                        modifier = Modifier.padding(start = 16.dp),
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Medium
                    )
                },
                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                shape = RoundedCornerShape(15.dp),
                colors = OutlinedTextFieldDefaults.colors(
                    unfocusedBorderColor = Color.Gray,
                    focusedBorderColor = Color(0xFF3A5A40)
                )
            )

            Spacer(modifier = Modifier.weight(1f))

            // Next Button
            Button(
                onClick = onNext,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (isFormValid) Color(0xFF27361F) else Color.Gray,
                    contentColor = Color.White
                ),
                enabled = isFormValid
            ) {
                Text(
                    text = "Selanjutnya",
                    fontSize = 17.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold
                )
            }
        }

        if (showDatePicker) {
            DatePickerDialog(
                onDismissRequest = { showDatePicker = false },
                confirmButton = {
                    TextButton(
                        onClick = {
                            datePickerState.selectedDateMillis?.let { millis ->
                                val formattedDate = SimpleDateFormat(
                                    "dd MMM yyyy",
                                    Locale.getDefault()
                                ).format(Date(millis))
                                if (isSelectingStartDate) {
                                    onStartDateChange(formattedDate)
                                } else {
                                    onEndDateChange(formattedDate)
                                }
                            }
                            showDatePicker = false
                        }
                    ) {
                        Text("OK")
                    }
                },
                dismissButton = {
                    TextButton(
                        onClick = { showDatePicker = false }
                    ) {
                        Text("Cancel")
                    }
                }
            ) {
                DatePicker(
                    state = datePickerState
                )
            }
        }
    }

    @Composable
    fun StepThree(onNext: () -> Unit) {
        var proposalFile by remember { mutableStateOf<String?>(null) }
        var legalityFile by remember { mutableStateOf<String?>(null) }

        val isFormValid = proposalFile != null && legalityFile != null

        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            Text(
                text = "Unggah Dokumen Pendukung",
                fontSize = 20.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            Text(
                text = "Unggah dokumen pendukung untuk melanjutkan pengajuan CSR perusahaan anda",
                fontSize = 14.sp,
                color = Color.Gray,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier.padding(bottom = 24.dp)
            )

            // Proposal Upload
            Text(
                text = "Proposal Rancangan",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Medium,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            OutlinedCard(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable(enabled = proposalFile == null) {
                        proposalFile = "Proposal Rancangan.pdf"
                    }
                    .padding(vertical = 8.dp),
                shape = RoundedCornerShape(15.dp),
                border = BorderStroke(1.dp, Color.Gray)
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(12.dp)
                    ) {
                        Icon(
                            painter = painterResource(
                                id = if (proposalFile == null) R.drawable.ic_upload
                                else R.drawable.ic_doc
                            ),
                            contentDescription = "Upload",
                            modifier = Modifier.size(24.dp),
                            tint = Color.Gray
                        )

                        Text(
                            text = proposalFile ?: "Proposal Rancangan",
                            fontSize = 14.sp,
                            color = Color.Gray,
                            fontFamily = PoppinsFontFamily,
                            maxLines = 1,
                            overflow = TextOverflow.Ellipsis
                        )
                    }

                    if (proposalFile != null) {
                        IconButton(
                            onClick = { proposalFile = null }
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_close),
                                contentDescription = "Delete",
                                tint = Color(0xFFE74C3C),
                                modifier = Modifier.size(20.dp)
                            )
                        }
                    }
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            // Legality Upload
            Text(
                text = "Legalitas Izin",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Medium,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            OutlinedCard(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable(enabled = legalityFile == null) {
                        legalityFile = "Legalitas Izin.pdf"
                    }
                    .padding(vertical = 8.dp),
                shape = RoundedCornerShape(15.dp),
                border = BorderStroke(1.dp, Color.Gray)
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(12.dp)
                    ) {
                        Icon(
                            painter = painterResource(
                                id = if (legalityFile == null) R.drawable.ic_upload
                                else R.drawable.ic_doc
                            ),
                            contentDescription = "Upload",
                            modifier = Modifier.size(24.dp),
                            tint = Color.Gray
                        )

                        Text(
                            text = legalityFile ?: "Legalitas Izin",
                            fontSize = 14.sp,
                            color = Color.Gray,
                            fontFamily = PoppinsFontFamily,
                            maxLines = 1,
                            overflow = TextOverflow.Ellipsis
                        )
                    }

                    if (legalityFile != null) {
                        IconButton(
                            onClick = { legalityFile = null }
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_close),
                                contentDescription = "Delete",
                                tint = Color(0xFFE74C3C),
                                modifier = Modifier.size(20.dp)
                            )
                        }
                    }
                }
            }

            Spacer(modifier = Modifier.weight(1f))

            // Next Button
            Button(
                onClick = onNext,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (isFormValid) Color(0xFF27361F) else Color.Gray,
                    contentColor = Color.White
                ),
                enabled = isFormValid
            ) {
                Text(
                    text = "Selanjutnya",
                    fontSize = 17.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }

    @Composable
    fun StepFour(
        navController: NavController,
        viewModel: CsrSubmissionViewModel,
        onNext: () -> Unit
    ) {
        var isChecked by remember { mutableStateOf(false) }

        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            Text(
                text = "Pernyataan",
                fontSize = 20.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 16.dp)
            )

            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                shape = RoundedCornerShape(15.dp),
                colors = CardDefaults.cardColors(containerColor = Color(0xFFF5F5F5))
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp)
                ) {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Checkbox(
                            checked = isChecked,
                            onCheckedChange = { isChecked = it },
                            colors = CheckboxDefaults.colors(
                                checkedColor = Color(0xFF27361F),
                                uncheckedColor = Color.Gray
                            )
                        )

                        Text(
                            text = "Semua data dan dokumen yang anda kirim akan digunakan untuk analisis tim TUMBUH NYATA",
                            fontSize = 14.sp,
                            fontFamily = PoppinsFontFamily,
                            color = Color.Black,
                            modifier = Modifier.padding(start = 8.dp)
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.weight(1f))

            // Submit Button
            Button(
                onClick = {
                    // Buat ulang csrData dari ViewModel
                    val csrData = CsrData(
                        programName = viewModel.programName.value,
                        category = viewModel.category.value,
                        description = viewModel.description.value,
                        startDate = viewModel.startDate.value,
                        endDate = viewModel.endDate.value,
                        location = viewModel.location.value,
                        partnerName = viewModel.partnerName.value,
                        budget = viewModel.budget.value
                    )
                    val csrDataJson = Uri.encode(Gson().toJson(csrData))
                    navController.navigate("csr_verification/$csrDataJson")
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (isChecked) Color(0xFF27361F) else Color.Gray,
                    contentColor = Color.White
                ),
                enabled = isChecked
            ) {
                Text(
                    text = "Selanjutnya",
                    fontSize = 17.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }

@Preview
@Composable
fun PreviewCsrSubmissionScreen() {
    val navController = rememberNavController()
    CsrSubmissionScreen(navController = navController)
}


================================================================================

FILE 106: app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\CsrSuccessScreen.kt
Lines: 136 | Size: 4810 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.eventcsr

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun CsrSuccessScreen(navController: NavController) {

    Scaffold()
    { innerPadding ->
        Box(
            modifier = Modifier
                .padding(innerPadding)
                .fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            // Background
            Image(
                painter = painterResource(id = R.drawable.background_sc),
                contentDescription = "Background",
                modifier = Modifier.fillMaxSize(),
                contentScale = ContentScale.Crop
            )

            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center
            ) {
                Spacer(modifier = Modifier.weight(1f))

                // Success Icon
                Image(
                    painter = painterResource(id = R.drawable.ic_doc_success),
                    contentDescription = "Success Icon",
                    modifier = Modifier.size(120.dp)
                )

                Spacer(modifier = Modifier.height(24.dp))

                Text(
                    text = "Pengajuan CSR",
                    fontSize = 24.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    color = Color.White,
                    textAlign = TextAlign.Center
                )

                Text(
                    text = "Berhasil!",
                    fontSize = 24.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    color = Color.White,
                    textAlign = TextAlign.Center
                )

                Spacer(modifier = Modifier.weight(1f))

                // Action Buttons
                Button(
                    onClick = { navController.navigate("riwayat") },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(50.dp),
                    shape = RoundedCornerShape(10.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF151E11)
                    )
                ) {
                    Text(
                        text = "Lihat Detail",
                        fontSize = 17.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color.White
                    )
                }

                Spacer(modifier = Modifier.height(12.dp))

                Button(
                    onClick = {
                        // Navigate back to home and clear the back stack
                        navController.navigate("home") {
                            popUpTo("home") { inclusive = true }
                        }
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(50.dp),
                    shape = RoundedCornerShape(10.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color.White
                    )
                ) {
                    Text(
                        text = "Kembali ke Beranda",
                        fontSize = 17.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color.Black
                    )
                }

                Spacer(modifier = Modifier.height(32.dp))
            }
        }
    }
}
@Preview(showSystemUi = true)
@Composable
fun PreviewCsrSuccessScreen() {
    val navController = rememberNavController()
    CsrSuccessScreen(navController = navController)
} 

================================================================================

FILE 107: app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\CsrVerificationScreen.kt
Lines: 369 | Size: 15747 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.eventcsr

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.tumbuhnyata.viewmodel.CsrVerificationViewModel
import androidx.compose.ui.platform.LocalContext
import com.example.tumbuhnyata.data.local.AppDatabase
import com.example.tumbuhnyata.data.repository.CsrDraftRepository
import com.example.tumbuhnyata.viewmodel.CsrDraftViewModel
import com.example.tumbuhnyata.data.api.CsrApiService
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import com.example.tumbuhnyata.data.local.entity.CsrDraftEntity
import android.util.Log
import com.example.tumbuhnyata.data.model.CsrData


@Preview
@Composable
fun CsrVerificationScreen(navController: NavController, csrData: CsrData) {
    val viewModel: CsrVerificationViewModel = viewModel()
    val context = LocalContext.current
    val db = remember { AppDatabase.getInstance(context) }
    val csrApiService = remember {
        Retrofit.Builder().baseUrl("http://10.0.2.2:5000/")
            .addConverterFactory(GsonConverterFactory.create()).build()
            .create(CsrApiService::class.java)
    }
    val draftRepository = remember { CsrDraftRepository(db.csrDraftDao(), csrApiService) }
    val draftViewModel: CsrDraftViewModel =
        viewModel(factory = CsrDraftViewModelFactory(draftRepository))
    Scaffold()
    { innerPadding ->
        Column(
            modifier = Modifier
                .padding(innerPadding)
                .fillMaxSize()
                .background(Color(0xFFF5F5F5))
        ) {
            // Header
            Surface(
                modifier = Modifier.fillMaxWidth(),
                color = Color.White,
                shadowElevation = 4.dp
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 16.dp, vertical = 12.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // Back button with circle background
                    Box(
                        modifier = Modifier
                            .size(40.dp)
                            .clip(CircleShape)
                            .background(Color(0xFF27361F))
                            .clickable { navController.navigateUp() }
                    ) {
                        Icon(
                            painter = painterResource(id = R.drawable.ic_back),
                            contentDescription = "Back",
                            tint = Color.White,
                            modifier = Modifier
                                .size(24.dp)
                                .align(Alignment.Center)
                        )
                    }

                    Text(
                        text = "Ajukan CSR",
                        fontSize = 20.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.padding(start = 16.dp)
                    )

                    Spacer(modifier = Modifier.weight(1f))

                    Text(
                        text = "Verifikasi",
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Medium,
                        color = Color.Gray
                    )
                }
            }

            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp)
            ) {
                Text(
                    text = "Ringkasan CSR",
                    fontSize = 16.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(bottom = 16.dp)
                )

                // Summary Card
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(15.dp),
                    colors = CardDefaults.cardColors(containerColor = Color.White)
                ) {
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp)
                    ) {
                        // Category
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(bottom = 12.dp)
                        ) {
                            Text(
                                text = "Kategori : ",
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                color = Color.Gray
                            )
                            Text(
                                text = csrData.category,
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Medium
                            )
                        }

                        // Program Name
                        Text(
                            text = csrData.programName,
                            fontSize = 20.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Bold,
                            modifier = Modifier.padding(bottom = 16.dp)
                        )

                        // Date
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 4.dp),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_event_calendar2),
                                contentDescription = "Date",
                                modifier = Modifier.size(24.dp)
                            )
                            Text(
                                text = "${csrData.startDate} - ${csrData.endDate}",
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                modifier = Modifier.padding(start = 12.dp)
                            )
                        }

                        // Location
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 4.dp),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_event_loc2),
                                contentDescription = "Location",
                                modifier = Modifier.size(24.dp)
                            )
                            Text(
                                text = csrData.location,
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                modifier = Modifier.padding(start = 12.dp)
                            )
                        }

                        // Partner
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 4.dp),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_event_office),
                                contentDescription = "Partner",
                                modifier = Modifier.size(24.dp)
                            )
                            Text(
                                text = csrData.partnerName,
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                modifier = Modifier.padding(start = 12.dp)
                            )
                        }

                        Spacer(modifier = Modifier.height(16.dp))

                        Text(
                            text = "Besar Anggaran",
                            fontSize = 16.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Bold,
                            modifier = Modifier.padding(bottom = 8.dp)
                        )

                        // Budget
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 4.dp),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_event_money1),
                                contentDescription = "Budget",
                                modifier = Modifier.size(24.dp)
                            )
                            Text(
                                text = csrData.budget,
                                fontSize = 16.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Bold,
                                modifier = Modifier.padding(start = 12.dp)
                            )
                        }
                    }
                }

                Text(
                    text = "*Pastikan semua data yang anda masukkan benar dan siap untuk diverifikasi",
                    fontSize = 12.sp,
                    color = Color.Gray,
                    fontFamily = PoppinsFontFamily,
                    modifier = Modifier.padding(top = 16.dp)
                )

                Spacer(modifier = Modifier.weight(1f))

                // Action Buttons
                Column(
                    modifier = Modifier.fillMaxWidth()
                ) {
                    if (viewModel.isSubmitting.value) {
                        CircularProgressIndicator(
                            modifier = Modifier
                                .align(Alignment.CenterHorizontally)
                                .padding(bottom = 16.dp),
                            color = Color(0xFF27361F)
                        )
                    }

                    Button(
                        onClick = {
                            viewModel.submitCsr(csrData) {
                                navController.navigate("csr_success")
                            }
                        },
                        enabled = !viewModel.isSubmitting.value,
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RoundedCornerShape(10.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFF27361F),
                            disabledContainerColor = Color(0xFF27361F).copy(alpha = 0.5f)
                        )
                    ) {
                        Text(
                            text = "Ajukan Sekarang",
                            fontSize = 17.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Bold
                        )
                    }

                    if (viewModel.errorMessage.value != null) {
                        Text(
                            text = viewModel.errorMessage.value ?: "",
                            color = Color.Red,
                            fontSize = 14.sp,
                            modifier = Modifier.padding(top = 8.dp)
                        )
                    }

                    Spacer(modifier = Modifier.height(8.dp))

                    Button(
                        onClick = {
                            val draftEntity = CsrDraftEntity(
                                userId = 1, // Placeholder for user ID
                                programName = csrData.programName,
                                category = csrData.category,
                                description = csrData.description,
                                location = csrData.location,
                                partnerName = csrData.partnerName,
                                startDate = csrData.startDate,
                                endDate = csrData.endDate,
                                budget = csrData.budget,
                                isSynced = false // Newly saved draft is not synced
                            )
                            draftViewModel.insertDraft(draftEntity)
                            Log.d("DRAFT_SAVE", "Draft saved: ${draftEntity.id}")
                            navController.navigate("draft_success")
                        },
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RoundedCornerShape(10.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFF3A5A40)
                        )
                    ) {
                        Text(
                            text = "Simpan ke Draft",
                            fontSize = 17.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Bold
                        )
                    }

                    Spacer(modifier = Modifier.height(8.dp))

                    Button(
                        onClick = { navController.navigate("csr_submission") },
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(50.dp),
                        shape = RoundedCornerShape(10.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFFE74C3C)
                        )
                    ) {
                        Text(
                            text = "Batalkan",
                            fontSize = 17.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Bold
                        )
                    }
                }
            }
        }
    }
}


================================================================================

FILE 108: app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\DraftListScreen.kt
Lines: 219 | Size: 8551 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.eventcsr

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.local.entity.CsrDraftEntity
import com.example.tumbuhnyata.data.local.AppDatabase
import com.example.tumbuhnyata.data.repository.CsrDraftRepository
import com.example.tumbuhnyata.data.api.CsrApiService
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.CsrDraftViewModel
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.compose.ui.platform.LocalContext
import com.example.tumbuhnyata.data.model.CsrData

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DraftListScreen(navController: NavController) {
    val context = LocalContext.current
    val db = remember { AppDatabase.getInstance(context) }
    val csrApiService = remember { Retrofit.Builder().baseUrl("http://10.0.2.2:5000/").addConverterFactory(GsonConverterFactory.create()).build().create(
        CsrApiService::class.java) }
    val repository = remember { CsrDraftRepository(db.csrDraftDao(), csrApiService) }
    val viewModel: CsrDraftViewModel = viewModel(factory = CsrDraftViewModelFactory(repository))

    val drafts by viewModel.allDrafts.collectAsState()

    Scaffold(
        topBar = {
            Surface(
                modifier = Modifier.fillMaxWidth(),
                color = Color.White,
                shadowElevation = 4.dp
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 16.dp, vertical = 12.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Box(
                        modifier = Modifier
                            .size(40.dp)
                            .clip(CircleShape)
                            .background(Color(0xFF27361F))
                            .clickable { navController.navigateUp() }
                    ) {
                        Icon(
                            painter = painterResource(id = R.drawable.ic_back),
                            contentDescription = "Back",
                            tint = Color.White,
                            modifier = Modifier
                                .size(24.dp)
                                .align(Alignment.Center)
                        )
                    }
                    Text(
                        text = "Daftar Draft CSR",
                        fontSize = 20.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.padding(start = 16.dp)
                    )
                }
            }
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .padding(innerPadding)
                .fillMaxSize()
                .background(Color(0xFFF5F5F5))
                .padding(16.dp)
        ) {
            if (drafts.isEmpty()) {
                Text(
                    text = "Tidak ada draft yang tersimpan.",
                    fontSize = 16.sp,
                    fontFamily = PoppinsFontFamily,
                    color = Color.Gray,
                    modifier = Modifier.align(Alignment.CenterHorizontally).padding(top = 32.dp)
                )
            } else {
                LazyColumn(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                    items(drafts) { draft ->
                        DraftItem(draft = draft, navController = navController, viewModel = viewModel)
                    }
                }
            }
        }
    }
}

@Composable
fun DraftItem(
    draft: CsrDraftEntity,
    navController: NavController,
    viewModel: CsrDraftViewModel
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { /* Handle edit here */ },
        shape = RoundedCornerShape(15.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = draft.programName,
                    fontSize = 18.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.weight(1f)
                )

            }
            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = "Kategori: ${draft.category}",
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.Gray
            )
            Text(
                text = "Lokasi: ${draft.location}",
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.Gray
            )
            Text(
                text = "Tanggal: ${draft.startDate} - ${draft.endDate}",
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.Gray
            )
            Spacer(modifier = Modifier.height(16.dp))
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.End
            ) {
                Button(
                    onClick = {
                        viewModel.submitDraftToApi(draft, onSuccess = { navController.navigate("csr_success") }, onError = { /* TODO: Show error message */ })
                    },
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF3A5A40))
                ) {
                    Text("Ajukan", color = Color.White)
                }
                IconButton(onClick = { viewModel.deleteDraft(draft) }) {
                    Icon(Icons.Default.Delete, contentDescription = "Delete", tint = Color(0xFFE74C3C))
                }
            }
        }
    }
}

// Extension function to convert CsrDraftEntity to CsrData
fun CsrDraftEntity.toCsrData(): CsrData {
    return CsrData(
        programName = this.programName,
        category = this.category,
        description = this.description,
        startDate = this.startDate,
        endDate = this.endDate,
        location = this.location,
        partnerName = this.partnerName,
        budget = this.budget
    )
}

// ViewModel Factory for CsrDraftViewModel
class CsrDraftViewModelFactory(private val repository: CsrDraftRepository) : androidx.lifecycle.ViewModelProvider.Factory {
    override fun <T : androidx.lifecycle.ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(CsrDraftViewModel::class.java)) {
            @Suppress("UNCHECKED_CAST")
            return CsrDraftViewModel(repository) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class")
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewDraftListScreen() {
    val navController = rememberNavController()
    // For preview purposes, we need to mock the ViewModel or provide a dummy one.
    // This preview will not fully function without a real ViewModel and database setup.
    DraftListScreen(navController = navController)
}

================================================================================

FILE 109: app\src\main\java\com\example\tumbuhnyata\ui\eventcsr\DraftSuccessScreen.kt
Lines: 92 | Size: 3260 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.eventcsr

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun DraftSuccessScreen(navController: NavController) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF5F5F5))
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = "Draft Berhasil Disimpan!",
            fontSize = 24.sp,
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.Bold,
            color = Color(0xFF27361F)
        )
        Spacer(modifier = Modifier.height(16.dp))
        Text(
            text = "Anda dapat menemukan draft Anda di daftar draft.",
            fontSize = 16.sp,
            fontFamily = PoppinsFontFamily,
            color = Color.Gray,
            modifier = Modifier.fillMaxWidth(0.8f)
        )
        Spacer(modifier = Modifier.height(32.dp))
        Button(
            onClick = { 
                navController.popBackStack()
                navController.navigate("draft_list")
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF27361F))
        ) {
            Text(
                text = "Lihat Draft",
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }
        Spacer(modifier = Modifier.height(16.dp))
        Button(
            onClick = { navController.popBackStack("home", inclusive = false) },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF3A5A40))
        ) {
            Text(
                text = "Kembali ke Home",
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewDraftSuccessScreen() {
    val navController = rememberNavController()
    DraftSuccessScreen(navController = navController)
} 

================================================================================

FILE 110: app\src\main\java\com\example\tumbuhnyata\ui\home\HomeScreen.kt
Lines: 637 | Size: 21635 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.home

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.ui.components.BottomNavigationBar
import com.example.tumbuhnyata.viewmodel.Activity
import com.example.tumbuhnyata.viewmodel.HomeState
import com.example.tumbuhnyata.viewmodel.HomeViewModel

@Composable
fun HomeScreen(
    navController: NavController,
    viewModel: HomeViewModel = viewModel()
) {
    val homeState by viewModel.homeState.collectAsState()
    
    Scaffold(
        bottomBar = {
            BottomNavigationBar(navController = navController)
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .padding(innerPadding)
                .verticalScroll(rememberScrollState())
        ) {
            MainCard(navController, homeState)
            Text(
                text = "Kelola Program CSR Anda",
                fontSize = 21.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.ExtraBold,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 15.dp, vertical = 10.dp)
            )
            MenuButtons(navController)
            ActivitySection(navController, homeState.activities)
        }
    }
}

@Composable
fun MainCard(navController: NavController, homeState: HomeState) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(
                start = 16.dp,
                top = 16.dp,
                end = 16.dp
            ),
        shape = RoundedCornerShape(16.dp)
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(
                    Brush.verticalGradient(
                        colors = listOf(
                            Color(0xFF5A7C47),
                            Color(0xFF415A33),
                            Color(0xFF27361F)
                        )
                    )
                )
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                CompanyHeader(
                    hasNotifications = homeState.companyInfo.hasNotifications, 
                    navController,
                    companyName = homeState.companyInfo.name,
                    companyAddress = homeState.companyInfo.address
                )
                CSRStatusSection(
                    completed = homeState.csrStatus.completed,
                    inProgress = homeState.csrStatus.inProgress,
                    upcoming = homeState.csrStatus.upcoming
                )
                CSRFundSection(
                    amount = homeState.csrFund.amount,
                    note = homeState.csrFund.note
                )
                BadgesSection(
                    levelBadge = homeState.badgeInfo.levelBadge,
                    emissionReduction = homeState.badgeInfo.emissionReduction
                )
                Button(
                    onClick = { navController.navigate("dashboard") },
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(top = 16.dp),
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4A613C)),
                    shape = RoundedCornerShape(10.dp)
                ) {
                    Text(
                        "Detail Dashboard  >", 
                        color = Color.White,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.ExtraBold,
                        fontSize = 12.sp
                    )
                }
            }
        }
    }
}

@Composable
fun CompanyHeader(
    hasNotifications: Boolean, 
    navController: NavController,
    companyName: String,
    companyAddress: String
) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Row(verticalAlignment = Alignment.CenterVertically) {
            Image(
                painter = painterResource(id = R.drawable.pt_profile),
                contentDescription = "Company Logo",
                modifier = Modifier
                    .size(53.dp)
                    .clip(CircleShape)
            )
            Spacer(modifier = Modifier.width(12.dp))
            Column {
                Text(
                    companyName,
                    color = Color.White,
                    fontWeight = FontWeight.Bold,
                    fontSize = 18.sp,
                    fontFamily = PoppinsFontFamily
                )
                Text(
                    companyAddress,
                    color = Color.White,
                    fontSize = 12.sp,
                    fontFamily = PoppinsFontFamily
                )
            }
        }
        Button(
            onClick = { navController.navigate("notifikasi") },
            modifier = Modifier
                .width(38.dp)
                .height(38.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4A613C)),
            shape = RoundedCornerShape(10.dp),
            contentPadding = PaddingValues(0.dp)
        ) {
            Image(
                painter = painterResource(id = if (hasNotifications) R.drawable.ic_notif_ping else R.drawable.ic_notif),
                contentDescription = "Notifications",
                modifier = Modifier
                    .size(if (hasNotifications) 22.dp else 22.dp, if (hasNotifications) 26.dp else 24.dp)
            )
        }
    }
}

@Composable
fun CSRStatusSection(
    completed: Int,
    inProgress: Int,
    upcoming: Int
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(top = 21.dp, bottom = 8.dp),
        colors = CardDefaults.cardColors(containerColor = Color(0x331E1E1E))
    ) {
        Column(modifier = Modifier.padding(12.dp)) {
            Text(
                "Status CSR",
                color = Color.White,
                fontWeight = FontWeight.Bold,
                fontFamily = PoppinsFontFamily
            )
            Row(
                modifier = Modifier.padding(top = 4.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                StatusItem("Selesai ", completed.toString())
                StatusItem("    Progres ", inProgress.toString())
                StatusItem("    Mendatang ", upcoming.toString())
            }
        }
    }
}

@Composable
fun StatusItem(label: String, value: String) {
    Row {
        Text(
            "$label: ",
            color = Color.White,
            fontFamily = PoppinsFontFamily
        )
        Text(
            value,
            color = Color.White,
            fontWeight = FontWeight.Bold,
            fontFamily = PoppinsFontFamily
        )
    }
}

@Composable
fun CSRFundSection(
    amount: String,
    note: String
) {
    Column(modifier = Modifier.padding(top = 8.dp, bottom = 20.dp, start = 14.dp, end = 14.dp)) {
        Text(
            "Riwayat Dana CSR",
            color = Color.White,
            fontWeight = FontWeight.Medium,
            fontSize = 12.sp,
            fontFamily = PoppinsFontFamily
        )
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier.padding(vertical = 4.dp)
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_money),
                contentDescription = "Money",
                modifier = Modifier.size(24.dp)
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text(
                amount,
                color = Color.White,
                fontWeight = FontWeight.ExtraBold,
                fontSize = 30.sp,
                fontFamily = PoppinsFontFamily
            )
        }
        Text(
            note,
            color = Color.White.copy(alpha = 0.7f),
            fontWeight = FontWeight.Normal,
            fontSize = 10.sp,
            fontFamily = PoppinsFontFamily
        )
    }
}

@Composable
fun BadgesSection(
    levelBadge: String,
    emissionReduction: String
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 4.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        // Level Badge
        Card(
            modifier = Modifier
                .width(148.dp)
                .height(153.dp),
            colors = CardDefaults.cardColors(containerColor = Color(0x331E1E1E))
        ) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(9.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.SpaceEvenly
            ) {
                Text(
                    "Level Badge", 
                    color = Color.White, 
                    fontSize = 14.sp, 
                    fontWeight = FontWeight.SemiBold,
                    fontFamily = PoppinsFontFamily
                )
                Box(
                    modifier = Modifier
                        .size(width = 115.dp, height = 70.dp)
                        .background(
                            color = Color(0x331E1E1E),
                            shape = RoundedCornerShape(10.dp)
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.superstar_badge),
                        contentDescription = "Badge",
                        modifier = Modifier
                            .width(82.dp)
                            .height(52.dp)
                    )
                }
                Text(
                    levelBadge, 
                    color = Color.White, 
                    fontSize = 14.sp, 
                    fontWeight = FontWeight.ExtraBold,
                    fontFamily = PoppinsFontFamily
                )
            }
        }
        
        Spacer(modifier = Modifier.width(8.dp))
        
        // Emisi Hilang
        Card(
            modifier = Modifier
                .width(148.dp)
                .height(153.dp),
            colors = CardDefaults.cardColors(containerColor = Color(0x331E1E1E))
        ) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(9.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.SpaceEvenly
            ) {
                Text(
                    "Emisi Hilang", 
                    color = Color.White, 
                    fontSize = 14.sp, 
                    fontWeight = FontWeight.SemiBold,
                    fontFamily = PoppinsFontFamily
                )
                Image(
                    painter = painterResource(id = R.drawable.ic_emission),
                    contentDescription = "Leaf",
                    modifier = Modifier.size(60.dp)
                )
                Text(
                    emissionReduction, 
                    color = Color.White, 
                    fontSize = 14.sp, 
                    fontWeight = FontWeight.ExtraBold,
                    fontFamily = PoppinsFontFamily
                )
            }
        }
    }
}

@Composable
fun MenuButtons(navController: NavController) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        MenuButton("Ajukan CSR", R.drawable.ic_ajukan) { navController.navigate("csr_submission") }
        MenuButton("Riwayat", R.drawable.ic_history) { navController.navigate("riwayat") }
        MenuButton("Keuangan", R.drawable.ic_finance) { navController.navigate("dashboardkeuangan") }
    }
}

@Composable
fun MenuButton(text: String, iconRes: Int, onClick: () -> Unit = {}) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Card(
            modifier = Modifier
                .width(110.dp)
                .height(92.dp),
            shape = RoundedCornerShape(12.dp),
        ) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(
                        Brush.verticalGradient(
                            colors = listOf(
                                Color(0xFF5A7C47),
                                Color(0xFF415A33),
                                Color(0xFF27361F)
                            )
                        )
                    )
                    .clickable(onClick = onClick),
                contentAlignment = Alignment.Center
            ) {
                Image(
                    painter = painterResource(id = iconRes),
                    contentDescription = text,
                    modifier = Modifier.size(60.dp)
                )
            }
        }
        Spacer(modifier = Modifier.height(8.dp))
        Text(
            text = text, 
            fontSize = 14.sp,
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.SemiBold
        )
    }
}

@Composable
fun ActivitySection(navController: NavController, activities: List<Activity>) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(start = 16.dp, end = 16.dp, top = 30.dp, bottom = 10.dp)
    ) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                "Aktivitas Terbaru",
                fontSize = 21.sp,
                fontWeight = FontWeight.ExtraBold,
                fontFamily = PoppinsFontFamily
            )
            TextButton(onClick = { navController.navigate("riwayat") }) {
                Text(
                    "Lihat Semua   >",
                    fontSize = 12.sp,
                    fontWeight = FontWeight.Normal,
                    color = Color(0xFF4C8C4A),
                    fontFamily = PoppinsFontFamily
                )
            }
        }
        
        LazyRow(
            horizontalArrangement = Arrangement.spacedBy(12.dp),
            contentPadding = PaddingValues(vertical = 0.dp)
        ) {
            items(activities.size) { index ->
                val activity = activities[index]
                ActivityItem(
                    title = activity.title,
                    community = activity.community,
                    status = activity.status,
                    kategori = activity.kategori,
                    lokasi = activity.lokasi,
                    periode = activity.periode,
                    statusType = activity.statusType,
                    navController = navController
                )
            }
        }
    }
}

enum class StatusType {
    COMPLETED,
    IN_PROGRESS,
    UPCOMING
}

@Composable
fun ActivityItem(
    title: String,
    community: String,
    status: String,
    kategori: String,
    lokasi: String,
    periode: String,
    statusType: StatusType,
    navController: NavController
) {
    Card(
        modifier = Modifier
            .width(280.dp)
            .padding(vertical = 0.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        shape = RoundedCornerShape(16.dp)
    ) {
        Box(modifier = Modifier.fillMaxWidth()) {
            // Status indicator on the left
            Box(
                modifier = Modifier
                    .width(4.dp)
                    .fillMaxHeight()
                    .background(
                        when (statusType) {
                            StatusType.COMPLETED -> Color(0xFF4C8C4A)
                            StatusType.IN_PROGRESS -> Color(0xFFFFC107)
                            StatusType.UPCOMING -> Color(0xFF2196F3)
                        }
                    )
            )
            
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    text = title,
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.SemiBold
                )
                Text(
                    text = community,
                    fontSize = 12.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                    color = Color.Gray
                )
                Row(
                    modifier = Modifier.padding(vertical = 4.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "Status : ",
                        fontSize = 10.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = status,
                        fontSize = 10.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color.Black
                    )
                    if (statusType == StatusType.COMPLETED) {
                        Image(
                            painter = painterResource(id = R.drawable.ic_check),
                            contentDescription = "Check",
                            modifier = Modifier
                                .padding(start = 4.dp)
                                .size(16.dp)
                        )
                    }
                }
                
                Divider(
                    modifier = Modifier.padding(vertical = 8.dp),
                    color = Color(0xFFEEEEEE)
                )
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Column {
                        Text(
                            text = "Kategori",
                            fontSize = 10.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.SemiBold,
                            color = Color.Black
                        )
                        Text(
                            text = kategori,
                            fontSize = 8.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Normal
                        )
                    }
                    Column {
                        Text(
                            text = "Lokasi",
                            fontSize = 10.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.SemiBold,
                            color = Color.Black
                        )
                        Text(
                            text = lokasi,
                            fontSize = 8.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Normal
                        )
                    }
                    Column {
                        Text(
                            text = "Periode",
                            fontSize = 10.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.SemiBold,
                            color = Color.Black
                        )
                        Text(
                            text = periode,
                            fontSize = 8.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Normal
                        )
                    }
                }
            }
        }
    }
}

@Preview
@Composable
fun PreviewHomeScreen() {
    val navController = rememberNavController()
    HomeScreen(navController = navController)
}



================================================================================

FILE 111: app\src\main\java\com\example\tumbuhnyata\ui\login\LoginScreen.kt
Lines: 328 | Size: 12239 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.login

import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import android.widget.Toast
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.data.model.LoginRequest
import com.example.tumbuhnyata.data.model.LoginResponse
import com.example.tumbuhnyata.data.network.RetrofitInstance
import com.example.tumbuhnyata.util.TokenManager
import org.json.JSONObject

@Composable
fun LoginScreen(navController: NavController) {
    val context = LocalContext.current
    var nib by remember { mutableStateOf("") }
    var isNibValid by remember { mutableStateOf(true) }
    var password by remember { mutableStateOf("") }
    var isPasswordValid by remember { mutableStateOf(true) }
    var passwordVisible by remember { mutableStateOf(false) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Spacer(modifier = Modifier.height(131.dp))

        Row {
            Text("Selamat Datang Kembali",
                fontSize = 17.sp,
                color = Color.Black,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold)
        }

        Spacer(modifier = Modifier.height(24.dp))

        // Logo
        Image(
            painter = painterResource(id = R.drawable.logo),
            modifier = Modifier.size(243.dp, 72.dp),
            contentDescription = "Logo"
        )

        Spacer(modifier = Modifier.height(66.dp))

        // NIB TextField (replacing Email TextField)
        OutlinedTextField(
            value = nib,
            onValueChange = {
                nib = it
                isNibValid = it.isNotBlank() && it.length <= 13
            },
            label = {
                Text(
                    "NIB (Nomor Induk Berusaha)",
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                )
            },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_doc),
                    modifier = Modifier.size(20.dp),
                    contentDescription = "NIB Icon"
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true,
        )

        // Menampilkan warning jika NIB tidak valid
        if (!isNibValid) {
            Text(
                text = "NIB tidak boleh kosong dan maksimal 13 karakter",
                color = Color.Red,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier
                    .padding(top = 4.dp)
                    .align(Alignment.Start)
            )
        }

        Spacer(modifier = Modifier.height(13.dp))

        // Password TextField
        OutlinedTextField(
            value = password,
            onValueChange = {
                password = it
                isPasswordValid = it.length >= 8
            },
            label = {
                Text(
                    "Kata Sandi",
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal
                )
            },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),
            visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_password),
                    modifier = Modifier.size(18.dp),
                    contentDescription = "Password Icon"
                )
            },
            trailingIcon = {
                IconButton(onClick = { passwordVisible = !passwordVisible }) {
                    Icon(
                        painter = painterResource(id = if (passwordVisible) R.drawable.ic_visibility else R.drawable.ic_visibility_off),
                        contentDescription = if (passwordVisible) "Hide password" else "Show password",
                        modifier = Modifier.size(20.dp)
                    )
                }
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true
        )

        // Menampilkan warning jika password kurang dari 8 karakter
        if (!isPasswordValid) {
            Text(
                text = "Minimal 8 karakter",
                color = Color.Red,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier
                    .padding(top = 4.dp)
                    .align(Alignment.Start)
            )
        }

        Spacer(modifier = Modifier.height(13.dp))

        // Forgot Password Text
        Text(
            "Lupa Sandi?",
            color = Color.Gray,
            fontSize = 14.sp, fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.align(Alignment.End),
            textDecoration = TextDecoration.Underline
        )

        Spacer(modifier = Modifier.height(34.dp))

        // Login Button
        Button(
            onClick = {
                val loginRequest = LoginRequest(NIB = nib, password = password)

                // In your LoginScreen.kt, modify the login success handler
                RetrofitInstance.api.login(loginRequest).enqueue(object : Callback<LoginResponse> {
                    override fun onResponse(call: Call<LoginResponse>, response: Response<LoginResponse>) {
                        if (response.isSuccessful) {
                            val token = response.body()?.token
                            if (token != null) {
                                // Save token FIRST before navigating
                                TokenManager.saveToken(context, token)
                                println("LoginScreen: Token saved successfully: ${token.take(20)}...")
                                
                                Toast.makeText(context, "Login berhasil", Toast.LENGTH_SHORT).show()
                                // Navigate to home screen and clear the back stack
                                navController.navigate("home") {
                                    popUpTo("login") { inclusive = true }
                                    launchSingleTop = true
                                }
                            } else {
                                Toast.makeText(context, "Token tidak ditemukan dalam response", Toast.LENGTH_LONG).show()
                            }
                        } else {
                            val errorBody = response.errorBody()?.string()
                            val errorMessage = try {
                                JSONObject(errorBody).getString("message")
                            } catch (e: Exception) {
                                "Login gagal: ${response.code()}"
                            }
                            Toast.makeText(context, errorMessage, Toast.LENGTH_LONG).show()
                        }
                    }

                    override fun onFailure(call: Call<LoginResponse>, t: Throwable) {
                        Toast.makeText(context, "Tidak dapat terhubung ke server: ${t.localizedMessage}", Toast.LENGTH_LONG).show()
                    }
                })
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(46.dp),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(
                if (nib.isNotBlank() && password.isNotBlank()) Color.Black else Color.Gray)
        ) {
            Text(
                "Masuk",
                color = Color.White,
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }

        Spacer(modifier = Modifier.height(30.dp))

        // Divider
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier.fillMaxWidth()
        ) {
            HorizontalDivider(
                modifier = Modifier.weight(1f),
                color = Color.Gray
            )
            Text(
                "  Atau dengan  ",
                color = Color.Gray
            )
            HorizontalDivider(
                modifier = Modifier.weight(1f),
                color = Color.Gray
            )
        }

        Spacer(modifier = Modifier.height(18.dp))

        // Google Sign-In Button
        Button(
            onClick = { /* Handle Google Sign-In */ },
            modifier = Modifier
                .fillMaxWidth()
                .border(1.dp, Color.Black, RoundedCornerShape(10.dp))
                .height(50.dp),
            shape = RoundedCornerShape(50.dp),
            colors = ButtonDefaults.buttonColors(Color.White)
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_google),
                contentDescription = "Google Icon",
                modifier = Modifier.size(20.dp)
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text(
                "Masuk dengan Google",
                color = Color.Black,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }

        Spacer(modifier = Modifier.height(73.dp))

        // Sign Up Text
        Row {
            Text(
                "Belum punya akun? ",
                color = Color.Black,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Normal
            )
            Text(
                "Daftar",
                color = Color.Black,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                textDecoration = TextDecoration.Underline,
                modifier = Modifier.clickable {
                    navController.navigate("register")
                }
            )
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewLoginScreen() {
    val navController = rememberNavController()
    LoginScreen(navController = navController)
}


================================================================================

FILE 112: app\src\main\java\com\example\tumbuhnyata\ui\notification\NotificationScreen.kt
Lines: 236 | Size: 7599 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.notification

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material3.*
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.tumbuhnyata.data.model.Notification
import com.example.tumbuhnyata.viewmodel.NotificationViewModel
import java.text.SimpleDateFormat
import java.util.*
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NotificationScreen(
    userId: String,
    onBackClick: () -> Unit = {}
) {
    // Menggunakan viewModel dengan factory
    val viewModel: NotificationViewModel = viewModel(
        factory = NotificationViewModel.Factory()
    )
    
    // Menggunakan collectAsState untuk mengamati StateFlow dari ViewModel
    val notifications by viewModel.notifications.collectAsState()
    val errorMessage by viewModel.error.collectAsState()
    
    // Effect untuk mengambil notifikasi saat tampilan dibuat
    LaunchedEffect(key1 = userId) {
        viewModel.getNotifications(userId)
    }
    
    Scaffold(
        topBar = {
            CenterAlignedTopAppBar(
                title = { Text("Notifikasi", fontFamily = PoppinsFontFamily) },
                navigationIcon = {
                    IconButton(onClick = onBackClick) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "Kembali"
                        )
                    }
                }
            )
        }
    ) { paddingValues ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            if (notifications.isEmpty()) {
                EmptyNotifications(
                    modifier = Modifier.align(Alignment.Center)
                )
            } else {
                NotificationList(
                    notifications = notifications,
                    onNotificationClick = { notificationId ->
                        viewModel.markAsRead(notificationId)
                    },
                    onDeleteClick = { notificationId ->
                        viewModel.deleteNotification(notificationId)
                    }
                )
            }
            
            errorMessage?.let {
                ErrorMessage(
                    message = it,
                    modifier = Modifier.align(Alignment.Center)
                )
            }
        }
    }
}

@Composable
fun NotificationList(
    notifications: List<Notification>,
    onNotificationClick: (Int) -> Unit,
    onDeleteClick: (Int) -> Unit
) {
    LazyColumn(
        modifier = Modifier.fillMaxSize(),
        contentPadding = PaddingValues(16.dp),
        verticalArrangement = Arrangement.spacedBy(12.dp)
    ) {
        items(notifications) { notification ->
            NotificationItem(
                notification = notification,
                onClick = { onNotificationClick(notification.id) },
                onDeleteClick = { onDeleteClick(notification.id) }
            )
        }
    }
}

@Composable
fun NotificationItem(
    notification: Notification,
    onClick: () -> Unit,
    onDeleteClick: () -> Unit
) {
    val backgroundColor = if (notification.isReadBool()) {
        Color(0xFFEEEEEE)
    } else {
        Color(0xFFE1F5FE)
    }
    
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable(onClick = onClick),
        shape = RoundedCornerShape(8.dp),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
        colors = CardDefaults.cardColors(containerColor = backgroundColor)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = notification.title,
                    fontWeight = FontWeight.Bold,
                    fontSize = 16.sp,
                    color = Color(0xFF263238),
                    fontFamily = PoppinsFontFamily
                )
                
                IconButton(
                    onClick = onDeleteClick,
                    modifier = Modifier.size(24.dp)
                ) {
                    Icon(
                        imageVector = Icons.Default.Delete,
                        contentDescription = "Hapus notifikasi",
                        tint = Color(0xFFE57373)
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(8.dp))
            
            Text(
                text = notification.message,
                fontSize = 14.sp,
                color = Color(0xFF37474F),
                maxLines = 3,
                overflow = TextOverflow.Ellipsis,
                fontFamily = PoppinsFontFamily
            )
            
            Spacer(modifier = Modifier.height(8.dp))
            
            Text(
                text = formatDate(notification.createdAt),
                fontSize = 12.sp,
                color = Color(0xFF78909C),
                fontFamily = PoppinsFontFamily
            )
        }
    }
}

@Composable
fun EmptyNotifications(modifier: Modifier = Modifier) {
    Column(
        modifier = modifier,
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = "Tidak ada notifikasi",
            fontSize = 16.sp,
            color = Color(0xFF78909C),
            fontFamily = PoppinsFontFamily
        )
    }
}

@Composable
fun ErrorMessage(message: String, modifier: Modifier = Modifier) {
    Column(
        modifier = modifier
            .fillMaxWidth()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = message,
            color = MaterialTheme.colorScheme.error,
            style = MaterialTheme.typography.bodyLarge,
            fontFamily = PoppinsFontFamily
        )
    }
}

fun formatDate(dateString: String): String {
    return try {
        val inputFormat = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault())
        inputFormat.timeZone = TimeZone.getTimeZone("UTC")
        val date = inputFormat.parse(dateString)
        
        val outputFormat = SimpleDateFormat("dd MMM yyyy, HH:mm", Locale("id"))
        outputFormat.format(date ?: Date())
    } catch (e: Exception) {
        dateString
    }
} 



================================================================================

FILE 113: app\src\main\java\com\example\tumbuhnyata\ui\notification\NotifikasiDetailScreen.kt
Lines: 257 | Size: 9690 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.notification

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun NotifikasiDetailScreen(
    navController: NavController,
    onBackClick: () -> Unit = { navController.popBackStack() }
) {
    Surface(
        modifier = Modifier.fillMaxSize(),
        color = Color.White
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(horizontal = 16.dp)
        ) {
            // Header with Back Button
            Spacer(modifier = Modifier.height(24.dp))
            
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 12.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                // Back button
                Box(
                    modifier = Modifier
                        .size(40.dp)
                        .clip(CircleShape)
                        .background(Color(0xFF094F2E))
                        .clickable { navController.popBackStack() },
                    contentAlignment = Alignment.Center
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.arrow_left),
                        contentDescription = "Kembali",
                        modifier = Modifier.size(24.dp)
                    )
                }
                
                Spacer(modifier = Modifier.width(12.dp))
                
                Text(
                    text = "Detail Notifikasi",
                    fontSize = 20.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.SemiBold
                )
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Invoice Information
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color(0xFFF5F5F5), RoundedCornerShape(8.dp))
                    .padding(16.dp)
            ) {
                // No. Invoice
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "No. Invoice",
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Normal,
                        color = Color.Black
                    )
                    
                    Text(
                        text = "VRTX - 71A - 420374 - 2024",
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.SemiBold,
                        color = Color.Black
                    )
                }
                
                Spacer(modifier = Modifier.height(8.dp))
                
                // Tanggal
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "Tanggal",
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Normal,
                        color = Color.Black
                    )
                    
                    Text(
                        text = "05 Maret 2025",
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.SemiBold,
                        color = Color.Black
                    )
                }
                
                Spacer(modifier = Modifier.height(8.dp))
                
                // Status
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "Status",
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Normal,
                        color = Color.Black
                    )
                    
                    Text(
                        text = "Memerlukan Pembayaran",
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.SemiBold,
                        color = Color.Black
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Invoice Image
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f)
                    .background(Color(0xFFF5F5F5), RoundedCornerShape(8.dp))
                    .padding(16.dp),
                contentAlignment = Alignment.Center
            ) {
                // Gunakan gambar placeholder untuk invoice
                // Dalam produksi, ini bisa diganti dengan gambar yang diambil dari server
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(400.dp)
                        .background(Color.White, RoundedCornerShape(8.dp)),
                    contentAlignment = Alignment.Center
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.ic_doc),
                        contentDescription = "Invoice Preview",
                        modifier = Modifier.size(100.dp),
                        contentScale = ContentScale.Fit
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Download Button
            Button(
                onClick = { /* TODO: Handle download */ },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(56.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF094F2E)
                ),
                shape = RoundedCornerShape(8.dp)
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.Center
                ) {
                    // Gunakan ikon yang tepat untuk download
                    Box(
                        modifier = Modifier
                            .size(24.dp),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = "↓",
                            fontSize = 18.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Bold,
                            color = Color.White
                        )
                    }
                    
                    Spacer(modifier = Modifier.width(8.dp))
                    
                    Text(
                        text = "Download Invoice",
                        fontSize = 16.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Medium,
                        color = Color.White
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(24.dp))
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewNotifikasiDetailScreen() {
    val navController = rememberNavController()
    NotifikasiDetailScreen(
        navController = navController
    )
}



================================================================================

FILE 114: app\src\main\java\com\example\tumbuhnyata\ui\profile\AboutScreen.kt
Lines: 119 | Size: 4907 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.profile

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun AboutScreen(navController: NavController) {
    Box(
        contentAlignment = Alignment.Center
    ) {
        Image (
            painter = painterResource(id = R.drawable.bg_onboarding),
            contentDescription = "Background Onboarding",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(start = 15.dp, end =15.dp, top = 60.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier
                    .fillMaxWidth()
            ) {
                IconButton(onClick = { navController.popBackStack() }) {
                    Image(
                        painter = painterResource(id = R.drawable.btn_back_white),
                        contentDescription = "Back",
                        modifier = Modifier.size(32.dp)
                    )
                }
                Spacer(modifier = Modifier.width(10.dp))
                Text(
                    text = "Tentang Aplikasi",
                    fontSize = 24.sp,
                    fontFamily = PoppinsFontFamily,
                    color = Color.White,
                    fontWeight = FontWeight.Bold
                )
            }

            Spacer(modifier = Modifier.height(60.dp))

            Image(
                painter = painterResource(id = R.drawable.logo_splash),
                contentDescription = "Logo TumbuhNyata",
                modifier = Modifier
                    .width(218.dp)
                    .align(alignment = Alignment.CenterHorizontally)
            )

            Spacer(modifier = Modifier.height(50.dp))

            Text(
                text = "Tumbuh Nyata adalah platform digital yang dirancang untuk membantu perusahaan dalam mengelola program Corporate Social Responsibility (CSR) secara lebih transparan, efektif, dan berdampak nyata. Dengan berbagai fitur inovatif, aplikasi ini memudahkan perusahaan dalam merancang, mengajukan, memantau, serta mengevaluas pelaksanaan CSR agar selaras dengan visi keberlanjutan dan tanggung jawab sosial.",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Justify,
                modifier = Modifier.fillMaxWidth()
            )

            Spacer(modifier = Modifier.height(20.dp))

            Text(
                text = "Melalui kolaborasi dengan lembaga kredensial dan mitra CSR, Tumbuh Nyata memastikan bahwa setiap program yang dijalankan memiliki standar tinggi serta dapat diukur dampaknya. Dengan sistem yang terintegrasi, perusahaan dapat mengoptimalkan kontribusi sosial mereka, meningkatkan kredibilitas, dan memperkuat hubungan dengan pemangku kepentingan demi masa depan yang lebih baik",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Justify,
                modifier = Modifier.fillMaxWidth()
            )

            Spacer(modifier = Modifier.height(90.dp))

            Text(
                text = buildAnnotatedString {
                    append("Versi Aplikasi: ")
                    withStyle(style = SpanStyle(fontWeight = FontWeight.Medium)) {
                        append("Tumbuh Nyata 1.0.0")
                    }
                },
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Center,
                modifier = Modifier.fillMaxWidth()
            )
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewAboutScreen() {
    AboutScreen(navController = rememberNavController())
}

================================================================================

FILE 115: app\src\main\java\com\example\tumbuhnyata\ui\profile\ChangePassword.kt
Lines: 251 | Size: 8938 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.profile

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.material3.OutlinedTextField
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.ProfileViewModel

@Composable
fun ChangePassword(
    navController: NavController,
    viewModel: ProfileViewModel = viewModel()
) {
    val profileState by viewModel.profileState.collectAsState()

    var newPassword by remember { mutableStateOf("") }
    var oldPassword by remember { mutableStateOf("") }
    var confirmPassword by remember { mutableStateOf("") }
    var passwordVisible by remember { mutableStateOf(false) }
    var errorMessage by remember { mutableStateOf<String?>(null) }

    val isFormValid by remember(oldPassword, newPassword, confirmPassword) {
        derivedStateOf {
            oldPassword.length >= 7 &&
                    newPassword.length >= 8 &&
                    newPassword != oldPassword &&
                    newPassword == confirmPassword
        }
    }


    // Navigasi jika password berhasil diubah
    LaunchedEffect(profileState.isUpdated) {
        if (profileState.isUpdated) {
            navController.navigate("change_password_success") {
                popUpTo("change_password") { inclusive = true }
            }
            viewModel.resetUpdateState()
        }
    }

    if (profileState.isLoading) {
        Box(
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            CircularProgressIndicator(color = Color(0xFF27361F))
        }
    } else {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(Color.White)
                .padding(horizontal = 24.dp, vertical = 16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            TopBarProfile(
                title = "",
                step = "",
                iconResId = R.drawable.btn_back,
                onBackClick = { navController.popBackStack() }
            )

            Spacer(modifier = Modifier.height(35.dp))

            Image(
                painter = painterResource(id = R.drawable.img_change_password),
                contentDescription = "Reset Illustration",
                modifier = Modifier
                    .fillMaxWidth()
                    .height(231.dp)
                    .clip(RoundedCornerShape(20.dp))
            )

            Spacer(modifier = Modifier.height(35.dp))

            Text(
                text = "Atur Ulang Kata Sandi",
                fontSize = 30.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF27361F)
            )

            Spacer(modifier = Modifier.height(46.dp))

            // Input Fields
            PasswordTextField(
                value = oldPassword,
                onValueChange = { oldPassword = it },
                label = "Kata Sandi Lama",
                isPasswordVisible = passwordVisible,
                onVisibilityToggle = { passwordVisible = !passwordVisible }
            )

            Spacer(modifier = Modifier.height(13.dp))

            PasswordTextField(
                value = newPassword,
                onValueChange = { newPassword = it },
                label = "Kata Sandi Baru",
                isPasswordVisible = passwordVisible,
                onVisibilityToggle = { passwordVisible = !passwordVisible }
            )

            Spacer(modifier = Modifier.height(13.dp))

            PasswordTextField(
                value = confirmPassword,
                onValueChange = { confirmPassword = it },
                label = "Konfirmasi Kata Sandi",
                isPasswordVisible = passwordVisible,
                onVisibilityToggle = { passwordVisible = !passwordVisible }
            )

            Spacer(modifier = Modifier.weight(1f))

            // Tampilkan error jika ada
            if (profileState.error != null) {
                Text(
                    text = profileState.error!!,
                    color = Color.Red,
                    fontSize = 14.sp,
                    modifier = Modifier.fillMaxWidth(),
                    textAlign = TextAlign.Center
                )
                Spacer(modifier = Modifier.height(10.dp))
            }

            // Tombol
            Button(
                onClick = {
                    if (isFormValid) {
                        viewModel.changePassword(
                            currentPassword = oldPassword,
                            newPassword = newPassword
                        )
                    } else {
                        errorMessage = "Password tidak valid atau tidak sesuai"
                    }
                },
                enabled = isFormValid && !profileState.isChangingPassword,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (isFormValid) Color(0xFF27361F) else Color(0xFF989898)
                ),
                shape = RoundedCornerShape(10.dp)
            ) {
                if (profileState.isChangingPassword) {
                    Text("Loading...", color = Color.White)
                } else {
                    Text(
                        text = "Ubah Kata Sandi",
                        fontSize = 17.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color.White,
                        textAlign = TextAlign.Center
                    )
                }
            }
        }
    }
}

@Composable
fun PasswordTextField(
    value: String,
    onValueChange: (String) -> Unit,
    label: String,
    isPasswordVisible: Boolean,
    onVisibilityToggle: () -> Unit,
    isError: Boolean = false
) {
    OutlinedTextField(
        value = value,
        onValueChange = onValueChange,
        label = {
            Text(
                label,
                color = Color(0xFF686868),
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Normal
            )
        },
        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),
        visualTransformation = if (isPasswordVisible) VisualTransformation.None else PasswordVisualTransformation(),
        leadingIcon = {
            Icon(
                painter = painterResource(id = R.drawable.ic_password),
                contentDescription = "Password Icon",
                modifier = Modifier
                    .size(18.dp)
            )
        },
        trailingIcon = {
            IconButton(onClick = onVisibilityToggle) {
                Icon(
                    painter = painterResource(
                        id = if (isPasswordVisible) R.drawable.ic_visibility else R.drawable.ic_visibility_off
                    ),
                    contentDescription = if (isPasswordVisible) "Hide password" else "Show password",
                    modifier = Modifier.size(18.dp)
                )
            }
        },
        modifier = Modifier
            .fillMaxWidth()
            .height(60.dp),
        shape = RoundedCornerShape(15.dp),
        singleLine = true,
        isError = isError
    )
}

@Preview
@Composable
fun PreviewChangePassword() {
    ChangePassword(navController = rememberNavController())
}

================================================================================

FILE 116: app\src\main\java\com\example\tumbuhnyata\ui\profile\ChangePasswordSuccess.kt
Lines: 104 | Size: 3706 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.profile

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import androidx.compose.ui.layout.ContentScale
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun ChangePasswordSuccess(navController: NavController) {
    Box(
        modifier = Modifier
            .fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        Image(
            painter = painterResource(id = R.drawable.background_sc),
            contentDescription = "Background",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.height(220.dp))

            Image(
                painter = painterResource(id = R.drawable.img_change_password_success),
                contentDescription = "Change Password Success",
                modifier = Modifier
                    .width(122.dp)
                    .height(190.dp)
            )

            Spacer(modifier = Modifier.height(34.dp))

            Text(
                text = "Berhasil Merubah Kata Sandi",
                fontSize = 25.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.ExtraBold,
                modifier = Modifier
                    .width(292.dp)
                    .height(76.dp)
            )

            Spacer(modifier = Modifier.height(178.dp))

            Button(
                onClick = { navController.navigate("profile") },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp)
                    .align(alignment = Alignment.CenterHorizontally),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF151E11))
            ) {
                Text(
                    text = "Kembali ke Profil",
                    color = Color.White,
                    fontSize = 17.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    textAlign = TextAlign.Center
                )
            }
        }
    }
}


@Preview
@Composable
fun PreviewChangePasswordSuccess() {
    ChangePasswordSuccess(navController = rememberNavController())
}

================================================================================

FILE 117: app\src\main\java\com\example\tumbuhnyata\ui\profile\LanguagePreference.kt
Lines: 161 | Size: 5053 chars
--------------------------------------------------------------------------------
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.RadioButton
import androidx.compose.material3.RadioButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun LanguagePreference(navController: NavController) {
    val selectedLanguage = remember { mutableStateOf("id") }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
            .padding(horizontal = 20.dp, vertical = 16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        TopBarProfile(
            title = "",
            step = "",
            iconResId = R.drawable.btn_back,
            onBackClick = { navController.popBackStack() }
        )

        Spacer(modifier = Modifier.height(35.dp))

        Text(
            text = "Pilih Bahasa",
            fontSize = 30.sp,
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.Bold,
            color = Color(0xFF27361F),
            textAlign = TextAlign.Center,
            modifier = Modifier
                .height(45.dp)
                .width(352.dp)
        )
        Text(
            text = "Silahkan pilih bahasa untuk digunakan\ndalam aplikasi Tumbuh Nyata",
            fontSize = 17.sp,
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.Medium,
            color = Color(0xFF27361F),
            textAlign = TextAlign.Center,
            modifier = Modifier
                .height(51.dp)
                .width(352.dp)
        )

        Spacer(modifier = Modifier.height(46.dp))

        LanguageOption(
            flagEmoji = "🇮🇩",
            label = "Indonesia",
            value = "id",
            selected = selectedLanguage.value == "id",
            onSelect = { selectedLanguage.value = it }
        )

        Spacer(modifier = Modifier.height(10.dp))

        LanguageOption(
            flagEmoji = "🇺🇸",
            label = "English",
            value = "en",
            selected = selectedLanguage.value == "en",
            onSelect = { selectedLanguage.value = it }
        )

        Spacer(modifier = Modifier.weight(1f))

        Button(
            onClick = { navController.navigate("profile") },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp)
                .padding(start = 1.dp),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(
                containerColor = Color(0xFF27361F)
            )
        ) {
            Text(
                text = "Simpan",
                color = Color.White,
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                textAlign = TextAlign.Center
            )
        }
    }
}

@Composable
fun LanguageOption(
    flagEmoji: String,
    label: String,
    value: String,
    selected: Boolean,
    onSelect: (String) -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .border(
                width = 3.dp,
                color = if (selected) Color(0xFF27361F) else Color(0xFF4B4B4B),
                shape = RoundedCornerShape(15.dp)
            )
            .clickable { onSelect(value) }
            .padding(horizontal = 20.dp, vertical = 16.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = flagEmoji,
            fontSize = 20.sp
        )
        Spacer(modifier = Modifier.width(11.dp))
        Text(
            text = label,
            fontSize = 14.sp,
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.SemiBold,
            color = Color(0xFF686868),
            modifier = Modifier.weight(1f)
        )
        RadioButton(
            selected = selected,
            onClick = null, // handled by Row.clickable
            colors = RadioButtonDefaults.colors(
                selectedColor = Color(0xFF27361F)
            )
        )
    }
}

@Preview
@Composable
fun PreviewLanguagePreference() {
    LanguagePreference(navController = rememberNavController())
}

================================================================================

FILE 118: app\src\main\java\com\example\tumbuhnyata\ui\profile\ProfileScreen.kt
Lines: 376 | Size: 14024 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.profile

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.BottomNavigationBar
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.ProfileViewModel
import android.content.Context
import android.net.ConnectivityManager
import android.net.Network
import android.widget.Toast
import androidx.compose.runtime.*
import androidx.compose.ui.platform.LocalContext
import kotlinx.coroutines.delay

@Composable
fun rememberNetworkObserver(): Boolean {
    val context = LocalContext.current
    var isConnected by remember { mutableStateOf(false) }

    // Check initial connectivity
    LaunchedEffect(Unit) {
        val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
        val activeNetwork = connectivityManager.activeNetwork
        isConnected = activeNetwork != null
    }

    DisposableEffect(context) {
        val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager

        val callback = object : ConnectivityManager.NetworkCallback() {
            override fun onAvailable(network: Network) {
                isConnected = true
            }

            override fun onLost(network: Network) {
                isConnected = false
            }
        }

        connectivityManager.registerDefaultNetworkCallback(callback)

        onDispose {
            connectivityManager.unregisterNetworkCallback(callback)
        }
    }

    return isConnected
}

@Composable
fun ProfileScreen(
    navController: NavController,
    viewModel: ProfileViewModel = viewModel()
) {
    val profileState by viewModel.profileState.collectAsState()
    val syncInProgress by viewModel.syncInProgress.collectAsState()
    val syncMessage by viewModel.syncMessage.collectAsState()
    val hasPendingSync by viewModel.hasPendingProfileSync.collectAsState()
    val isConnected = rememberNetworkObserver()
    val context = LocalContext.current

    var wasOffline by remember { mutableStateOf(false) }
    var hasShownInitialState by remember { mutableStateOf(false) }

    LaunchedEffect(isConnected) {
        if (hasShownInitialState) {
            if (!isConnected && !wasOffline) {
                // Connection lost
                Toast.makeText(context, "Koneksi terputus", Toast.LENGTH_LONG).show()
            } else if (isConnected && wasOffline) {
                // Connection restored
                Toast.makeText(context, "Koneksi tersambung kembali", Toast.LENGTH_LONG).show()

                if (hasPendingSync && !syncInProgress) {
                    delay(1000) // Wait 1 second after connection
                    viewModel.onAppResumed()
                }
            }
        } else {
            hasShownInitialState = true
        }

        wasOffline = !isConnected
    }

    // Handle sync message - show toast or snackbar
    LaunchedEffect(syncMessage) {
        syncMessage?.let { message ->
            delay(3000)
            viewModel.clearSyncMessage()
        }
    }

    LaunchedEffect(navController.currentBackStackEntry) {
        val currentRoute = navController.currentBackStackEntry?.destination?.route
        if (currentRoute == "profile") {
            // Only refresh profile and check sync if returning from another screen
            viewModel.refreshProfile()
            viewModel.checkPendingProfileSync()
        }
    }

    Scaffold(
        bottomBar = {
            BottomNavigationBar(navController = navController)
        }
    ) { paddingValues ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(Color(0xFFF8F8F8))
                .padding(bottom = paddingValues.calculateBottomPadding())
        ) {
            Image(
                painter = painterResource(id = R.drawable.bg_circle_top),
                contentDescription = "background",
                modifier = Modifier
                    .size(300.dp)
                    .align(Alignment.TopStart)
                    .offset(x = (-30).dp, y = (-10).dp)
            )
            Image(
                painter = painterResource(id = R.drawable.bg_circle_bottom),
                contentDescription = "background",
                modifier = Modifier
                    .size(310.dp)
                    .align(Alignment.BottomEnd)
                    .offset(x = (40).dp, y = (0).dp)
            )
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(horizontal = 20.dp)
            ){
                Spacer(modifier = Modifier.height(20.dp))

                syncMessage?.let { message ->
                    SyncMessageCard(message = message)
                    Spacer(modifier = Modifier.height(16.dp))
                }

                if (profileState.isLoading) {
                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                        CircularProgressIndicator(color = Color(0xFF27361F))
                    }
                } else if (profileState.error != null) {
                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                        Text(
                            text = profileState.error ?: "Terjadi kesalahan",
                            color = Color.Red,
                            fontFamily = PoppinsFontFamily,
                            fontSize = 16.sp
                        )
                    }
                } else {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(top = 40.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Image(
                            painter = painterResource(id = R.drawable.img_profile),
                            contentDescription = "Profile Picture",
                            modifier = Modifier
                                .size(60.dp)
                                .clip(CircleShape)
                                .border(3.dp, Color(0xFF4B4B4B), CircleShape)
                        )
                        Spacer(modifier = Modifier.width(20.dp))
                        Column(
                            modifier = Modifier
                                .wrapContentWidth()
                                .padding(end = 35.dp),
                        ) {
                            Text(
                                text = profileState.companyName,
                                fontSize = 26.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Bold
                            )
                            Text(
                                text = profileState.companyAddress,
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Normal,
                                color = Color(0xFF4B4B4B)
                            )
                        }

                    }
                }
                Spacer(modifier = Modifier.height(60.dp))
                ProfileOption("Verifikasi Akun", R.drawable.ic_verification_account, R.drawable.arrow_option, onClick = { navController.navigate("verification_one") })
                ProfileOption("Ganti Password", R.drawable.ic_change_password, R.drawable.arrow_option, onClick = {navController.navigate("change_password")})
                ProfileOption("Ganti Profile", R.drawable.ic_person, R.drawable.arrow_option, onClick = {navController.navigate("update_profile")})
                ProfileOption("Bantuan dan Dukungan", R.drawable.ic_help_support, R.drawable.arrow_option, onClick ={})
                ProfileOption("Bahasa", R.drawable.ic_langauge, R.drawable.arrow_option, onClick = {navController.navigate("language_preference")})
                ProfileOption("Tentang Aplikasi", R.drawable.ic_about, R.drawable.arrow_option, onClick = { navController.navigate("about") })

                Spacer(modifier = Modifier.height(20.dp))

                LogoutButton(
                    navController = navController,
                    onLogout = { viewModel.logout() }
                )
            }
        }
    }
}

@Composable
fun ProfileOption(title: String, iconStart: Int, iconEnd: Int, onClick: () -> Unit) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(bottom = 12.dp)
            .height(60.dp)
            .border(0.5.dp, Color(0xFFB0B0B0), RoundedCornerShape(10.dp))
            .clickable (onClick = onClick),
        colors = CardDefaults.cardColors(containerColor = Color(0xFFF8F8F8)),
        elevation = CardDefaults.elevatedCardElevation(2.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(10.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Image(
                painter = painterResource(id = iconStart),
                contentDescription = "Icon Option",
                modifier = Modifier.size(36.dp)
            )
            Spacer(modifier = Modifier.width(13.dp))
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(end = 10.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ){
                Text(
                    text = title,
                    fontSize = 18.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Medium,
                    lineHeight = 14.sp,
                    letterSpacing = 0.sp,
                    modifier = Modifier.width(243.dp)
                )
                Image(
                    painter = painterResource(id = iconEnd),
                    contentDescription = "Icon Arrow",
                    modifier = Modifier
                        .size(16.dp)
                        .align(alignment = Alignment.CenterVertically)
                )
            }
        }
    }
}

@Composable
fun LogoutButton(
    navController: NavController,
    onLogout: () -> Unit
) {
    Button(
        onClick = {
            onLogout()
            navController.navigate("option")
        },
        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF27361F)),
        shape = RoundedCornerShape(10.dp),
        modifier = Modifier
            .fillMaxWidth()
            .height(60.dp)
    ) {
        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_logout),
                contentDescription = "Icon Logout",
                modifier = Modifier
                    .size(32.dp)
            )
            Spacer(modifier = Modifier.width(20.dp))
            Text(
                text = "Logout",
                color = Color(0xFFF8F8F8),
                fontSize = 18.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.weight(1f)
            )
            Image(
                painter = painterResource(id = R.drawable.arrow_option),
                contentDescription = "Icon Arrow",
                modifier = Modifier.size(16.dp)
            )
        }
    }
}

@Composable
fun SyncMessageCard(message: String) {
    val backgroundColor = if (message.contains("berhasil")) {
        Color(0xFF27361F) // success
    } else {
        Color(0xFF989898) // error
    }

    val textColor = if (message.contains("berhasil")) {
        Color(0xFFFFFFFF)
    } else {
        Color(0xFF721C24)
    }

    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = backgroundColor),
        shape = RoundedCornerShape(8.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(12.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Spacer(modifier = Modifier.width(8.dp))
            Text(
                text = message,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                color = textColor
            )
        }
    }
}

@Preview
@Composable
fun PreviewProfileScreen() {
    ProfileScreen(navController = rememberNavController())
}

================================================================================

FILE 119: app\src\main\java\com\example\tumbuhnyata\ui\profile\UpdateProfile.kt
Lines: 396 | Size: 15675 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.profile

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.OutlinedTextFieldDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.ProfileViewModel
import kotlinx.coroutines.flow.collectLatest

@Composable
fun UpdateProfile(
    navController: NavController,
    viewModel: ProfileViewModel = viewModel()
) {
    val profileState by viewModel.profileState.collectAsState()

    LaunchedEffect(profileState.isUpdated) {
        if (profileState.isUpdated) {
            viewModel.checkPendingProfileSync()
            // Navigate back or show success message
            navController.popBackStack()
            viewModel.resetUpdateState()
        }
    }

    var companyName by remember { mutableStateOf("") }
    var email by remember { mutableStateOf("") }
    var phoneNumber by remember { mutableStateOf("") }
    var address by remember { mutableStateOf("") }

    var initialCompanyName by remember { mutableStateOf("") }
    var initialEmail by remember { mutableStateOf("") }
    var initialPhoneNumber by remember { mutableStateOf("") }
    var initialAddress by remember { mutableStateOf("") }

    var errorMessage by remember { mutableStateOf<String?>(null) }


    val isFormValid by remember(companyName, email, phoneNumber, address,
        initialCompanyName, initialEmail, initialPhoneNumber, initialAddress) {
        derivedStateOf {
            companyName != initialCompanyName ||
                    email != initialEmail ||
                    phoneNumber != initialPhoneNumber ||
                    address != initialAddress
        }
    }

    LaunchedEffect(profileState.isLoading) {
        if (!profileState.isLoading) {
            companyName = profileState.companyName
            email = profileState.email
            phoneNumber = profileState.phoneNumber
            address = profileState.companyAddress

            // Set nilai awal untuk pembanding
            initialCompanyName = profileState.companyName
            initialEmail = profileState.email
            initialPhoneNumber = profileState.phoneNumber
            initialAddress = profileState.companyAddress
        }
    }


    // LaunchedEffect(Unit) {
    //     snapshotFlow { profileState.isUpdated }
    //         .collectLatest { isUpdated ->
    //             if (isUpdated) {
    //                 navController.navigate("profile") {
    //                     popUpTo("updateProfile") { inclusive = true }
    //                 }
    //                 // Beri delay kecil agar recomposition tidak langsung terjadi
    //                 kotlinx.coroutines.delay(200)
    //                 viewModel.resetUpdateState()
    //             }
    //         }
    // }

    if (profileState.isLoading) {
        Box(
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            CircularProgressIndicator(color = Color(0xFF27361F))
        }
    } else {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(Color.White)
                .padding(horizontal = 24.dp, vertical = 16.dp)
        ) {
            TopBarProfile(
                title = "",
                step = "",
                iconResId = R.drawable.btn_back,
                onBackClick = { navController.popBackStack() }
            )
            Spacer(modifier = Modifier.height(35.dp))

            Column(
                modifier = Modifier
                    .padding(10.dp)
            ) {
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Image(
                        painter = painterResource(id = R.drawable.img_profile), // Ganti dengan resource logo kamu
                        contentDescription = "Company Logo",
                        modifier = Modifier
                            .size(50.dp)
                            .clip(CircleShape)
                            .border(3.dp, Color(0xFF4B4B4B), CircleShape)
                    )

                    Spacer(modifier = Modifier.width(20.dp))

                    Column {
                        Text(
                            text = "Nama Perusahaan",
                            fontSize = 14.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Normal,
                            color = Color(0xFF4B4B4B),
                            modifier = Modifier
                                .padding(bottom = 5.dp)
                        )
                        OutlinedTextField(
                            value = companyName,
                            onValueChange = { companyName = it },
                            singleLine = true,
                            textStyle = TextStyle(
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Bold,
                                color = Color(0xFF4B4B4B)
                            ),
                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 2.dp)
                                .height(50.dp),
                            colors = OutlinedTextFieldDefaults.colors(
                                focusedBorderColor = Color(0xFF27361F),
                                unfocusedBorderColor = Color(0xFF4B4B4B)
                            )
                        )
                    }
                }

                Text(
                    text = "Ganti Foto",
                    fontSize = 12.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                    color = Color(0xFF4B4B4B),
                    modifier = Modifier
                        .clickable { /* TODO: Open image picker */ }
                )

                Spacer(modifier = Modifier.height(46.dp))

                // Email
                Text(
                    buildAnnotatedString {
                        withStyle(
                            style = SpanStyle(
                                color = Color(0xFF4B4B4B),
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Normal
                            )
                        ) {
                            append("Email")
                        }
                        withStyle(
                            style = SpanStyle(
                                color = Color.Red,
                                fontSize = 12.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Normal
                            )
                        ) {
                            append("*")
                        }
                    }
                )

                OutlinedTextField(
                    value = email,
                    onValueChange = { email = it },
                    singleLine = true,
                    textStyle = TextStyle(
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF4B4B4B)
                    ),
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 2.dp)
                        .height(50.dp),
                    colors = OutlinedTextFieldDefaults.colors(
                        focusedBorderColor = Color(0xFF27361F),
                        unfocusedBorderColor = Color(0xFF4B4B4B)
                    )
                )

                Spacer(modifier = Modifier.height(10.dp))

                // Nomor Telepon
                Text(
                    buildAnnotatedString {
                        withStyle(
                            style = SpanStyle(
                                color = Color(0xFF4B4B4B),
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Normal
                            )
                        ) {
                            append("Nomor Telepon")
                        }
                        withStyle(
                            style = SpanStyle(
                                color = Color.Red,
                                fontSize = 12.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Normal
                            )
                        ) {
                            append("*")
                        }
                    }
                )

                OutlinedTextField(
                    value = phoneNumber,
                    onValueChange = { phoneNumber = it },
                    singleLine = true,
                    textStyle = TextStyle(
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF4B4B4B)
                    ),
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 2.dp)
                        .height(50.dp),
                    colors = OutlinedTextFieldDefaults.colors(
                        focusedBorderColor = Color(0xFF27361F),
                        unfocusedBorderColor = Color(0xFF4B4B4B)
                    )
                )

                Spacer(modifier = Modifier.height(10.dp))

                // Alamat
                Text(
                    buildAnnotatedString {
                        withStyle(
                            style = SpanStyle(
                                color = Color(0xFF4B4B4B),
                                fontSize = 14.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Normal
                            )
                        ) {
                            append("Alamat")
                        }
                        withStyle(
                            style = SpanStyle(
                                color = Color.Red,
                                fontSize = 12.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.Normal
                            )
                        ) {
                            append("*")
                        }
                    }
                )

                OutlinedTextField(
                    value = address,
                    onValueChange = { address = it },
                    singleLine = true,
                    textStyle = TextStyle(
                        fontSize = 14.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF4B4B4B)
                    ),
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 2.dp)
                        .height(50.dp),
                    colors = OutlinedTextFieldDefaults.colors(
                        focusedBorderColor = Color(0xFF27361F),
                        unfocusedBorderColor = Color(0xFF4B4B4B)
                    )
                )

                Spacer(modifier = Modifier.height(10.dp))
            }

            Spacer(modifier = Modifier.weight(1f))

            if (profileState.error != null) {
                Text(
                    text = profileState.error!!,
                    color = Color.Red,
                    fontSize = 14.sp,
                    modifier = Modifier.fillMaxWidth(),
                    textAlign = TextAlign.Center
                )
                Spacer(modifier = Modifier.height(10.dp))
            }


            // Tombol Simpan
            Button(
                onClick = {
                    if (isFormValid) {
                        errorMessage = null
                        viewModel.updateProfile(companyName, email, phoneNumber, address)
                    } else {
                        errorMessage = "Tidak ada perubahan data yang dilakukan"
                    }
                },
                enabled = isFormValid && !profileState.isUpdated,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp)
                    .padding(start = 1.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (isFormValid) Color(0xFF27361F) else Color(0xFF989898)
                )
            ) {
                if (profileState.isUpdatingProfile) {
                    Text("Loading...", color = Color.White)
                } else {
                    Text(
                        text = "Simpan",
                        color = Color.White,
                        fontSize = 17.sp,
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        textAlign = TextAlign.Center
                    )
                }
            }
        }
    }
}
@Preview
@Composable
fun PreviewUpdateProfile() {
    UpdateProfile(navController = rememberNavController())
}

================================================================================

FILE 120: app\src\main\java\com\example\tumbuhnyata\ui\profile\VerificationOne.kt
Lines: 224 | Size: 8378 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.profile

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Checkbox
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.VerificationOneViewModel

@Composable
fun VerificationOne(
    navController: NavController,
    viewModel: VerificationOneViewModel = viewModel()
) {
    val verificationState by viewModel.verificationState.collectAsState()
    var isChecked by remember { mutableStateOf(false) }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF8F8F8))
    ) {
        Image(
            painter = painterResource(id = R.drawable.bg_circle_top),
            contentDescription = "background",
            modifier = Modifier
                .size(300.dp)
                .align(Alignment.TopStart)
                .offset(x = (-30).dp, y = (-10).dp)
        )
        Image(
            painter = painterResource(id = R.drawable.bg_circle_bottom),
            contentDescription = "background",
            modifier = Modifier
                .size(310.dp)
                .align(Alignment.BottomEnd)
                .offset(x = (40).dp, y = (0).dp)
        )
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(horizontal = 20.dp, vertical = 16.dp)
        ) {
            TopBarProfile(
                title = "Verifikasi",
                step = "Langkah 1/2",
                iconResId = R.drawable.btn_back,
                onBackClick = { navController.popBackStack() }
            )

            Spacer(modifier = Modifier.height(50.dp))
            Text(
                text = "Unggah Dokumen Pendukung",
                fontSize = 22.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(start = 2.dp)
            )
            Text(
                text = "Unggah dokumen pendukung untuk melakukan verifikasi akun perusahaan anda",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF4B4B4B),
                modifier = Modifier.padding(start = 2.dp, top = 10.dp, end = 5.dp)
            )

            UploadField(
                label = "Akta Pendirian Perusahaan",
                fileName = verificationState.aktaFile,
                placeholder = "Akta Pendirian",
                onUploadClick = { viewModel.uploadAktaFile("SK Kemenkumham Paragon.pdf") },
                onDelete = { viewModel.deleteAktaFile() },
                modifier = Modifier.padding(top=40.dp)
            )

            UploadField(
                label = "Surat Keterangan Domisili Perusahaan",
                fileName = verificationState.skdpFile,
                placeholder = "SKDP",
                onUploadClick = { viewModel.uploadSkdpFile("Paragon-SKDP.pdf") },
                onDelete = { viewModel.deleteSkdpFile() },
                modifier = Modifier.padding(top=20.dp)
            )

            Spacer(modifier = Modifier.height(4.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Checkbox(
                    checked = isChecked,
                    onCheckedChange = {
                        if (verificationState.isBothFilesUploaded) {
                            isChecked = it
                        }
                    },
                    modifier = Modifier.offset(x = (-12).dp),
                    enabled = verificationState.isBothFilesUploaded // mencegah centang sebelum upload
                )
                Text(
                    text = "Saya setuju mengikuti persyaratan verifikasi akun",
                    fontSize = 12.sp,
                    color = Color.Black,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                    modifier = Modifier.offset(x = (-12).dp)
                )
            }

            Spacer(modifier = Modifier.weight(1f))

            Button(
                onClick = { navController.navigate("verification_two") },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp)
                    .padding(start = 1.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (verificationState.isBothFilesUploaded && isChecked)
                        Color(0xFF27361F) else Color(0xFF989898)
                ),
                enabled = verificationState.isBothFilesUploaded && isChecked
            ) {
                Text(
                    text = "Selanjutnya",
                    color = Color.White,
                    fontSize = 20.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    textAlign = TextAlign.Center
                )
            }
        }
    }
}

@Composable
fun UploadField(
    label: String,
    fileName: String?,
    placeholder: String,
    onUploadClick: () -> Unit,
    onDelete: () -> Unit,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier
            .fillMaxWidth()
    ) {
        Text(text = label, fontSize = 18.sp, fontFamily = PoppinsFontFamily, fontWeight = FontWeight.Bold)
        Spacer(modifier = Modifier.height(10.dp))

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp)
                .border(2.dp, Color(0xFFB9B9B9), shape = RoundedCornerShape(10.dp))
                .padding(horizontal = 16.dp)
                .clickable { onUploadClick() },
            contentAlignment = Alignment.CenterStart
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.fillMaxWidth()
            ) {
                Image(
                    painter = painterResource(id = if (fileName != null) R.drawable.ic_doc else R.drawable.ic_upload),
                    contentDescription = "Icon",
                    modifier = Modifier.size(24.dp)
                )
                Spacer(modifier = Modifier.width(12.dp))

                Text(
                    text = fileName ?: placeholder,
                    fontSize = 16.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = if (fileName != null) FontWeight.SemiBold else FontWeight.Normal,
                    color = if (fileName != null) Color(0xFF686868) else Color(0xFFB8B8B8),
                    modifier = Modifier.weight(1f)
                )

                if (fileName != null) {
                    Image(
                        painter = painterResource(id = R.drawable.ic_cancel),
                        contentDescription = "Delete",
                        modifier = Modifier
                            .size(20.dp)
                            .clickable { onDelete() }
                    )
                }
            }
        }
    }
}

@Preview
@Composable
fun PreviewVerificationOne() {
    VerificationOne(navController = rememberNavController())
}

================================================================================

FILE 121: app\src\main\java\com\example\tumbuhnyata\ui\profile\VerificationSuccess.kt
Lines: 116 | Size: 4026 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.profile

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import androidx.compose.ui.layout.ContentScale
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.data.model.Notification
import com.example.tumbuhnyata.viewmodel.NotificationViewModel
import java.text.SimpleDateFormat
import java.util.*

@Composable
fun VerificationSuccess(navController: NavController) {

    Box(
        modifier = Modifier
            .fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        Image(
            painter = painterResource(id = R.drawable.background_sc),
            contentDescription = "Background",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.height(300.dp))

            Image(
                painter = painterResource(id = R.drawable.ic_verification_success),
                contentDescription = "Verification Success",
                modifier = Modifier
                    .width(136.dp)
                    .height(131.dp)
            )

            Spacer(modifier = Modifier.height(34.dp))

            Text(
                text = "Pengajuan Verifikasi Berhasil Dilakukan",
                fontSize = 24.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.ExtraBold,
                modifier = Modifier
                    .width(322.dp)
                    .height(76.dp)
            )

            Spacer(modifier = Modifier.height(14.dp))

            Text(
                text = "Aktivasi akun anda diterima paling lama 24 jam setelah pengajuan",
                fontSize = 18.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.Normal,
                modifier = Modifier
                    .width(353.dp)
            )

            Spacer(modifier = Modifier.height(100.dp))

            Button(
                onClick = { navController.navigate("profile") },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp)
                    .align(alignment = Alignment.CenterHorizontally),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF151E11))
            ) {
                Text(
                    text = "Kembali ke Beranda",
                    color = Color.White,
                    fontSize = 20.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }
}


@Preview
@Composable
fun PreviewVerificationSuccess() {
    VerificationSuccess(navController = rememberNavController())
}

================================================================================

FILE 122: app\src\main\java\com\example\tumbuhnyata\ui\profile\VerificationTwo.kt
Lines: 221 | Size: 8101 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.profile

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.TopBarProfile
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.VerificationTwoViewModel

@Composable
fun VerificationTwo(
    navController: NavController,
    viewModel: VerificationTwoViewModel = viewModel()
) {
    val verificationState by viewModel.verificationState.collectAsState()
    var isChecked by remember { mutableStateOf(false) }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF8F8F8))
    ) {
        Image(
            painter = painterResource(id = R.drawable.bg_circle_top),
            contentDescription = "background",
            modifier = Modifier
                .size(300.dp)
                .align(Alignment.TopStart)
                .offset(x = (-30).dp, y = (-10).dp)
        )
        Image(
            painter = painterResource(id = R.drawable.bg_circle_bottom),
            contentDescription = "background",
            modifier = Modifier
                .size(310.dp)
                .align(Alignment.BottomEnd)
                .offset(x = (40).dp, y = (0).dp)
        )
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(horizontal = 20.dp, vertical = 16.dp )
        ) {
            TopBarProfile(
                title = "Verifikasi",
                step = "Langkah 2/2",
                iconResId = R.drawable.btn_back,
                onBackClick = { navController.popBackStack() }
            )

            Spacer(modifier = Modifier.height(50.dp))

            Text(
                text = "Unggah Data Diri PIC",
                fontSize = 23.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(start = 2.dp)
            )
            Text(
                text = "Lakukan unggah scan kartu identitas PIC atau penanggungjawab perusahaan (KTP/Paspor)",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF4B4B4B),
                modifier = Modifier.padding(start = 2.dp, top = 10.dp, end = 5.dp)
            )

            Spacer(modifier = Modifier.height(30.dp))

            UploadBox(
                fileName = verificationState.picFile,
                onUploadClick = { viewModel.uploadPicFile("KTP_Virna.jpg") },
                onCancelClick = { viewModel.deletePicFile() }
            )

            Spacer(modifier = Modifier.height(4.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Checkbox(
                    checked = isChecked,
                    onCheckedChange = {
                        if (verificationState.isFileUploaded) {
                            isChecked = it
                        }
                    },
                    modifier = Modifier.offset(x = (-12).dp),
                    enabled = verificationState.isFileUploaded // mencegah centang sebelum upload
                )
                Text(
                    text = "Saya setuju mengikuti persyaratan verifikasi akun",
                    fontSize = 12.sp,
                    color = Color.Black,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                    modifier = Modifier.offset(x = (-12).dp)
                )
            }

            Spacer(modifier = Modifier.weight(1f))

            Button(
                onClick = {navController.navigate("verification_success")},
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(10.dp),
                enabled = verificationState.isFileUploaded && isChecked,
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (verificationState.isFileUploaded && isChecked)
                        Color(0xFF27361F) else Color(0xFF989898)
                ),
            ) {
                Text(
                    text = "Selanjutnya",
                    color = Color.White,
                    fontSize = 20.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    textAlign = TextAlign.Center
                )
            }
        }
    }
}

@Composable
fun UploadBox(
    fileName: String?,
    onUploadClick: () -> Unit,
    onCancelClick: () -> Unit
) {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .height(170.dp)
            .border(2.dp, Color(0xFFB9B9B9), shape = RoundedCornerShape(10.dp))
            .background(Color(0xFFFFFFFF), shape = RoundedCornerShape(10.dp))
            .clickable { if (fileName == null) onUploadClick() },
        contentAlignment = Alignment.Center
    ) {
        if (fileName != null) {
            Column(
                modifier = Modifier.align(Alignment.Center),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Image(
                    painter = painterResource(id = R.drawable.ic_doc),
                    contentDescription = "Uploaded File Icon",
                    modifier = Modifier.size(28.dp)
                )
                Spacer(modifier = Modifier.height(18.dp))
                Text(
                    text = fileName,
                    fontSize = 16.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Medium,
                    color = Color(0Xff686868),
                    textAlign = TextAlign.Center
                )
            }

            Image(
                painter = painterResource(id = R.drawable.ic_cancel),
                contentDescription = "Cancel Upload",
                modifier = Modifier
                    .size(50.dp)
                    .align(Alignment.TopEnd)
                    .padding(12.dp)
                    .clickable { onCancelClick() }
            )
        } else {
            Column(
                modifier = Modifier.align(Alignment.Center),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Image(
                    painter = painterResource(id = R.drawable.ic_upload_file),
                    contentDescription = "Upload Icon",
                    modifier = Modifier.size(28.dp)
                )
                Spacer(modifier = Modifier.height(18.dp))
                Text(
                    text = "Pilih file JPG, JPEG, PNG, dan PDF",
                    fontSize = 16.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Medium,
                    color = Color(0xFFB9B9B9),
                    textAlign = TextAlign.Center
                )
            }
        }
    }
}

@Preview
@Composable
fun PreviewVerificationTwo() {
    VerificationTwo(navController = rememberNavController())
}

================================================================================

FILE 123: app\src\main\java\com\example\tumbuhnyata\ui\register\AkunBerhasil.kt
Lines: 106 | Size: 3629 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.register

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun AkunBerhasil(navController: NavController) {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        // Background
        Image(
            painter = painterResource(id = R.drawable.bg_sukses),
            contentDescription = "Background",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.height(300.dp))

            Image(
                painter = painterResource(id = R.drawable.ic_check),
                contentDescription = "Berhasil Buat Akun",
                modifier = Modifier.size(117.dp)
            )

            Spacer(modifier = Modifier.height(29.dp))

            Text(
                text = "Berhasil",
                fontSize = 30.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.ExtraBold
            )

            Text(
                text = "Membuat Akun",
                fontSize = 30.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.ExtraBold
            )

            Spacer(modifier = Modifier.height(226.dp))

            Button(
                onClick = { navController.navigate("home") },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF151E11))
            ) {
                Text(
                    text = "Mulai",
                    color = Color.White,
                    fontSize = 17.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }
}

@Preview
@Composable
fun PreviewAkunBerhasil() {
    AkunBerhasil(navController = rememberNavController())
}

================================================================================

FILE 124: app\src\main\java\com\example\tumbuhnyata\ui\register\OtpScreen.kt
Lines: 208 | Size: 7309 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.register

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.key.*
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlinx.coroutines.delay
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun OtpScreen(navController: NavController) {
    var otpCode by remember { mutableStateOf(List(4) { TextFieldValue("") }) }
    var isTimerRunning by remember { mutableStateOf(true) }
    var timer by remember { mutableStateOf(30) }
    val focusRequesters = List(4) { FocusRequester() }

    val isOtpFilled = otpCode.all { it.text.isNotEmpty() } // Cek apakah OTP sudah terisi penuh

    // Countdown timer coroutine
    LaunchedEffect(isTimerRunning) {
        while (timer > 0 && isTimerRunning) {
            delay(1000L)
            timer--
        }
        isTimerRunning = false
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
            .padding(20.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Spacer(modifier = Modifier.height(24.dp))

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 8.dp, top = 8.dp),
            contentAlignment = Alignment.TopStart
        ) {
            Image(
                painter = painterResource(id = R.drawable.btn_back),
                contentDescription = "Kembali",
                modifier = Modifier
                    .size(32.dp)
                    .clickable { navController.navigate("verifikasi") }
            )
        }

        Spacer(modifier = Modifier.height(35.dp))

        Image(
            painter = painterResource(id = R.drawable.illustration2),
            contentDescription = "Illustration 2",
            modifier = Modifier
                .fillMaxWidth()
                .height(264.dp)
        )

        Spacer(modifier = Modifier.height(50.dp))

        Text(
            text = "Masukkan Kode OTP",
            fontSize = 30.sp,
            fontFamily = PoppinsFontFamily,
            textAlign = TextAlign.Center,
            fontWeight = FontWeight.Bold,
            color = Color(0xFF27361F)
        )

        Spacer(modifier = Modifier.height(13.dp))

        Text(
            text = "Kode OTP sudah dikirimkan melalui email Anda",
            fontSize = 17.sp,
            fontFamily = PoppinsFontFamily,
            textAlign = TextAlign.Center,
            color = Color(0xFF27361F)
        )

        Spacer(modifier = Modifier.height(32.dp))

        // Kotak OTP berbentuk bulat
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceEvenly
        ) {
            otpCode.forEachIndexed { index, textValue ->
                OutlinedTextField(
                    value = textValue,
                    onValueChange = {
                        if (it.text.length <= 1 && it.text.all { char -> char.isDigit() }) {
                            val newOtp = otpCode.toMutableList()
                            newOtp[index] = it
                            otpCode = newOtp

                            if (it.text.isNotEmpty() && index < 3) {
                                focusRequesters[index + 1].requestFocus()
                            }
                        }
                    },
                    shape = CircleShape,
                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                    singleLine = true,
                    modifier = Modifier
                        .size(60.dp)
                        .focusRequester(focusRequesters[index])
                        .onPreviewKeyEvent { event ->
                            if (event.type == KeyEventType.KeyDown && event.key == Key.Backspace) {
                                if (otpCode[index].text.isEmpty() && index > 0) {
                                    focusRequesters[index - 1].requestFocus()
                                }
                            }
                            false
                        },
                    textStyle = LocalTextStyle.current.copy(
                        fontSize = 25.sp,
                        fontWeight = FontWeight.Bold,
                        textAlign = TextAlign.Center
                    )
                )
            }
        }

        Spacer(modifier = Modifier.height(62.dp))

        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = "Tidak menerima kode?",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.Black
            )
            Spacer(modifier = Modifier.width(4.dp))
            Text(
                text = "Kirim ulang",
                fontSize = 16.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = if (isTimerRunning) Color.Gray else Color.Black,
                modifier = Modifier
                    .clickable(enabled = !isTimerRunning) {
                        if (!isTimerRunning) {
                            timer = 30
                            isTimerRunning = true
                        }
                    }
            )
        }

        Spacer(modifier = Modifier.height(19.dp))

        // Timer
        Text(
            text = "0:${if (timer < 10) "0$timer" else timer}",
            fontSize = 20.sp,
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.Bold,
            color = Color.Black
        )

        Spacer(modifier = Modifier.height(50.dp))

        Button(
            onClick = { navController.navigate("akunberhasil") },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(
                containerColor = if (isOtpFilled) Color(0xFF27361F) else Color.Gray
            ),
            enabled = isOtpFilled
        ) {
            Text(
                text = "Verifikasi",
                color = Color.White,
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }
    }
}


================================================================================

FILE 125: app\src\main\java\com\example\tumbuhnyata\ui\register\RegisterScreen.kt
Lines: 766 | Size: 26519 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.register

import androidx.compose.animation.AnimatedContent
import androidx.compose.animation.ExperimentalAnimationApi
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Checkbox
import androidx.compose.material3.Divider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.RegisterViewModel
import kotlinx.coroutines.launch

@OptIn(ExperimentalAnimationApi::class)
@Composable
fun RegisterScreen(
    navController: NavController,
    viewModel: RegisterViewModel = viewModel()
) {
    val currentStep by viewModel.currentStep.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()
    val errorMessage by viewModel.errorMessage.collectAsState()
    val registerSuccess by viewModel.registerSuccess.collectAsState()
    val context = LocalContext.current
    val scope = rememberCoroutineScope()
    val snackbarHostState = remember { SnackbarHostState() }
    
    LaunchedEffect(errorMessage) {
        errorMessage?.let {
            scope.launch {
                snackbarHostState.showSnackbar(it)
                viewModel.clearError()
            }
        }
    }
    
    LaunchedEffect(registerSuccess) {
        if (registerSuccess) {
            navController.navigate("verifikasi")
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
    ) {
        Column(
            modifier = Modifier.fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            HeaderSection()

            Spacer(modifier = Modifier.height(20.dp))

            StepIndicator(currentStep = currentStep)

            AnimatedContent(targetState = currentStep, label = "Register Steps") { step ->
                when (step) {
                    1 -> StepOne(viewModel = viewModel, onNext = { viewModel.nextStep() })
                    2 -> StepTwo(viewModel = viewModel, onNext = { viewModel.nextStep() })
                    3 -> StepThree(viewModel = viewModel, navController = navController)
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Sign Up Text
            Row {
                Text(
                    "Sudah mempunyai akun? ",
                    color = Color.Black,
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal
                )
                Text(
                    "Masuk",
                    color = Color.Black,
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    textDecoration = TextDecoration.Underline,
                    modifier = Modifier.clickable {
                        navController.navigate("login")
                    }
                )
            }
        }
        
        SnackbarHost(
            hostState = snackbarHostState,
            modifier = Modifier.align(Alignment.BottomCenter)
        )
        
        if (isLoading) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(Color.Black.copy(alpha = 0.5f)),
                contentAlignment = Alignment.Center
            ) {
                CircularProgressIndicator(color = Color(0xFFA5C295))
            }
        }
    }
}

@Composable
fun HeaderSection() {
    Image(
        painter = painterResource(id = R.drawable.register_header),
        contentDescription = "Header",
        modifier = Modifier
            .fillMaxWidth()
            .height(270.dp),
        contentScale = ContentScale.Crop
    )
}

@Composable
fun StepIndicator(currentStep: Int) {
    val stepCount = 3
    val activeColor = Color(0xFFA5C295)
    val idleColor = Color.White
    val inactiveColor = Color.LightGray.copy(alpha = 0.5f)
    val lineColor = Color.Black
    val lineInactiveColor = Color.LightGray.copy(alpha = 0.5f)

    Row(
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.Center,
        modifier = Modifier.width(IntrinsicSize.Min)
    ) {
        for (i in 1..stepCount) {
            if (i > 1) {
                val lineBetweenColor = if (i - 2 < currentStep) lineColor else lineInactiveColor

                Spacer(modifier = Modifier.width(4.dp))
                Box(
                    modifier = Modifier
                        .height(2.dp)
                        .width(79.dp)
                        .background(lineBetweenColor)
                )
                Spacer(modifier = Modifier.width(4.dp))
            }

            val indicatorColor = when {
                i < currentStep -> activeColor
                i == currentStep -> activeColor
                i == currentStep + 1 -> idleColor
                else -> inactiveColor
            }

            Box(
                contentAlignment = Alignment.Center,
                modifier = Modifier
                    .size(27.dp)
                    .clip(CircleShape)
                    .background(if (indicatorColor == activeColor) activeColor else Color.White)
                    .border(2.dp, if (indicatorColor == inactiveColor) inactiveColor else Color.Black, CircleShape)
            ) {
                Text(
                    text = i.toString(),
                    color = if (indicatorColor == inactiveColor) inactiveColor else Color.Black,
                    fontFamily = PoppinsFontFamily,
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Medium,
                )
            }
        }
    }
}

@Composable
fun StepOne(viewModel: RegisterViewModel, onNext: () -> Unit) {
    val companyName by viewModel.companyName.collectAsState()
    val email by viewModel.email.collectAsState()
    val phoneNumber by viewModel.phoneNumber.collectAsState()
    val nib by viewModel.nib.collectAsState()
    
    var isEmailValid by remember { mutableStateOf(true) }
    var isPhoneValid by remember { mutableStateOf(true) }
    var isNIBValid by remember { mutableStateOf(true) }
    
    val isNextAvailable = companyName.isNotBlank() &&
                           email.isNotBlank() && isEmailValid &&
                           phoneNumber.isNotBlank() && isPhoneValid &&
                           nib.isNotBlank() && isNIBValid

    Column(modifier = Modifier.padding(16.dp)) {

        Spacer(modifier = Modifier.height(4.dp))

        // nama perusahaan
        OutlinedTextField(
            value = companyName,
            onValueChange = { viewModel.updateCompanyName(it) },
            label = {
                Text(
                    "Nama Perusahaan",
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                    fontSize = 14.sp,
                ) },
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_office),
                    modifier = Modifier.size(18.dp),
                    contentDescription = "Office Icon"
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(55.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true
        )

        Spacer(modifier = Modifier.height(13.dp))

        // email perusahaan
        OutlinedTextField(
            value = email,
            onValueChange = {
                viewModel.updateEmail(it)
                isEmailValid = it.contains("@")
            },
            label = {
                Text(
                    "Email Perusahaan",
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                )
            },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_email),
                    modifier = Modifier.size(20.dp),
                    contentDescription = "Email Icon"
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true,
        )

        // Menampilkan warning jika email tidak valid
        if (!isEmailValid) {
            Text(
                text = "Email harus mengandung '@'",
                color = Color.Red,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier
                    .padding(top = 4.dp)
                    .align(Alignment.Start)
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        // no telp perusahaan
        OutlinedTextField(
            value = phoneNumber,
            onValueChange = { newValue ->
                if (newValue.all { it.isDigit() } && newValue.length <= 13) {
                    viewModel.updatePhoneNumber(newValue)
                    isPhoneValid = newValue.length >= 10
                }
            },
            label = {
                Text(
                    "Nomor Telepon Kantor" ,
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                    fontSize = 14.sp,
                ) },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_phone),
                    modifier = Modifier.size(18.dp),
                    contentDescription = "Phone Icon"
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(55.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true
        )

        // Menampilkan warning jika nomor telepon tidak valid
        if (!isPhoneValid && phoneNumber.isNotBlank()) {
            Text(
                text = "Nomor telepon harus terdiri dari 10 hingga 13 digit",
                color = Color.Red,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier
                    .padding(top = 4.dp)
                    .align(Alignment.Start)
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        // nib perusahaan
        OutlinedTextField(
            value = nib,
            onValueChange = { newValue ->
                if (newValue.all { it.isDigit() } && newValue.length <= 12) {
                    viewModel.updateNIB(newValue)
                    isNIBValid = newValue.length == 12
                }
            },
            label = {
                Text(
                    "NIB (Nomor Induk Berusaha)" ,
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                    fontSize = 14.sp,
                ) },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_doc),
                    modifier = Modifier.size(18.dp),
                    contentDescription = "Document Icon"
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(55.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true
        )

        // Menampilkan warning jika NIB tidak valid
        if (!isNIBValid && nib.isNotBlank()) {
            Text(
                text = "NIB harus terdiri dari 12 digit",
                color = Color.Red,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier
                    .padding(top = 4.dp)
                    .align(Alignment.Start)
            )
        }

        Spacer(modifier = Modifier.height(33.dp))

        Button(
            onClick = onNext,
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(
                if (isNextAvailable) Color(0xFF27361F) else Color(0xFF989898)
            ),
            enabled = isNextAvailable
        ) {
            Text(
                text = "Selanjutnya",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                fontSize = 17.sp,
                color = Color.White)
        }

        Spacer(modifier = Modifier.height(16.dp))

        // Google Sign-Up Button
        Button(
            onClick = { /* Handle Google Sign-Up */ },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp)
                .border(1.dp, Color.Black, RoundedCornerShape(10.dp)),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(Color.White)
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_google),
                contentDescription = "Google Icon",
                modifier = Modifier.size(20.dp)
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text(
                "Masuk dengan Google",
                color = Color.Black,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }
    }
}

@Composable
fun StepTwo(viewModel: RegisterViewModel, onNext: () -> Unit) {
    val address by viewModel.address.collectAsState()
    
    Column(
        modifier = Modifier.padding(16.dp)
    ){
        Spacer(modifier = Modifier.height(4.dp))

        Text(
            "Lokasi Kantor",
            color = Color.Black,
            fontSize = 25.sp,
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.Bold,
            textAlign = TextAlign.Center,
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(33.dp))

        // Alamat Perusahaan input field
        OutlinedTextField(
            value = address,
            onValueChange = { viewModel.updateAddress(it) },
            label = { Text(
                "Alamat Perusahaan",
                color = Color(0xFF686868),
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Normal,
                fontSize = 14.sp
            ) },
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_office),
                    contentDescription = "Office Icon",
                    modifier = Modifier.size(18.dp)
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(55.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true
        )

        Spacer(modifier = Modifier.height(170.dp))

        Button(
            onClick = onNext,
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(Color(0xFF27361F))
        ) {
            Text(
                text = "Selanjutnya",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                fontSize = 17.sp,
                color = Color.White)
        }

        Spacer(modifier = Modifier.height(16.dp))

        Button(
            onClick = { /* Handle Google Sign-Up */ },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp)
                .border(1.dp, Color.Black, RoundedCornerShape(10.dp)),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(Color.White)
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_google),
                contentDescription = "Google Icon",
                modifier = Modifier.size(20.dp)
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text(
                "Masuk dengan Google",
                color = Color.Black,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                fontSize = 14.sp
            )
        }
    }
}

@Composable
fun StepThree(viewModel: RegisterViewModel, navController: NavController) {
    val companyEmail by viewModel.email.collectAsState()
    val password by viewModel.password.collectAsState()
    
    var picName by remember { mutableStateOf("") }
    var picEmail by remember { mutableStateOf("") }
    var isPicEmailValid by remember { mutableStateOf(true) }
    var isPasswordValid by remember { mutableStateOf(true) }
    var passwordVisible by remember { mutableStateOf(false) }
    var isChecked by remember { mutableStateOf(false) }
    
    LaunchedEffect(password) {
        isPasswordValid = password.length >= 8
    }
    
    val annotatedString = buildAnnotatedString {
        append("Dengan melakukan login atau registrasi, Anda menyetujui ")

        withStyle(style = SpanStyle(fontWeight = FontWeight.Bold, fontFamily = PoppinsFontFamily)) {
            append("Syarat & Ketentuan")
        }

        append(" serta ")

        withStyle(style = SpanStyle(fontWeight = FontWeight.Bold, fontFamily = PoppinsFontFamily)) {
            append("Kebijakan Privasi")
        }
    }
    val isFormValid = picName.isNotBlank() && password.isNotBlank() && isPasswordValid && isChecked

    Column(modifier = Modifier.padding(16.dp)) {
        Text(
            "Penanggung Jawab Akun",
            color = Color.Black,
            fontSize = 25.sp,
            fontFamily = PoppinsFontFamily,
            fontWeight = FontWeight.Bold,
            textAlign = TextAlign.Center,
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(15.dp))

        // nama pic
        OutlinedTextField(
            value = picName,
            onValueChange = { picName = it },
            label = {
                Text(
                    "Nama PIC CSR",
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                    fontSize = 14.sp,
                ) },
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_person),
                    modifier = Modifier.size(20.dp),
                    contentDescription = "PIC Name Icon"
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(55.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true
        )

        Spacer(modifier = Modifier.height(16.dp))

        // email pic (using same as company email)
        OutlinedTextField(
            value = companyEmail,
            onValueChange = {
                // Using company email, so not editable here
            },
            enabled = false,
            label = {
                Text(
                    "Email Perusahaan",
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal,
                )
            },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_email),
                    modifier = Modifier.size(20.dp),
                    contentDescription = "Email Icon"
                )
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true,
        )

        Spacer(modifier = Modifier.height(16.dp))

        // password pic
        OutlinedTextField(
            value = password,
            onValueChange = {
                viewModel.updatePassword(it)
            },
            label = {
                Text(
                    "Kata Sandi",
                    color = Color(0xFF686868),
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Normal
                )
            },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),
            visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
            leadingIcon = {
                Icon(
                    painter = painterResource(id = R.drawable.ic_password),
                    modifier = Modifier.size(18.dp),
                    contentDescription = "Password Icon"
                )
            },
            trailingIcon = {
                IconButton(onClick = { passwordVisible = !passwordVisible }) {
                    Icon(
                        painter = painterResource(id = if (passwordVisible) R.drawable.ic_visibility else R.drawable.ic_visibility_off),
                        contentDescription = if (passwordVisible) "Hide password" else "Show password",
                        modifier = Modifier.size(20.dp)
                    )
                }
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp),
            shape = RoundedCornerShape(15.dp),
            singleLine = true
        )

        // Menampilkan warning jika password kurang dari 8 karakter
        if (!isPasswordValid) {
            Text(
                text = "Minimal 8 karakter",
                color = Color.Red,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier
                    .padding(top = 4.dp)
                    .align(Alignment.Start)
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        Row(verticalAlignment = Alignment.CenterVertically) {
            Checkbox(
                checked = isChecked,
                onCheckedChange = { isChecked = it }
            )
            Text(
                text = annotatedString,
                fontSize = 12.sp,
                color = Color.Black,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Normal
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        Button(
            onClick = { viewModel.register() },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(
                if (isFormValid) Color(0xFF27361F) else Color(0xFF989898)
            ),
            enabled = isFormValid
        ) {
            Text(
                text = "Daftar",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                fontSize = 17.sp,
                color = Color.White,
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        Button(
            onClick = { /* Handle Google Sign-Up */ },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp)
                .border(1.dp, Color.Black, RoundedCornerShape(10.dp)),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(Color.White)
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_google),
                contentDescription = "Google Icon",
                modifier = Modifier.size(20.dp)
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text(
                "Masuk dengan Google",
                color = Color.Black,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }
    }
}

@Preview
@Composable
fun PreviewRegisterScreen() {
    val navController = rememberNavController()
    RegisterScreen(navController = navController)
}


================================================================================

FILE 126: app\src\main\java\com\example\tumbuhnyata\ui\register\VerifikasiScreen.kt
Lines: 131 | Size: 4323 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.register

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.InputField
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun VerifikasiScreen(navController: NavController) {
    var email by remember { mutableStateOf("") }
    var isEmailValid by remember { mutableStateOf(true) }

    val isFormFilled = email.isNotEmpty() && email.contains("@")

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
            .padding(20.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Spacer(modifier = Modifier.height(40.dp))

        Box(
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 8.dp, top = 8.dp),
            contentAlignment = Alignment.TopStart
        ) {
            Image(
                painter = painterResource(id = R.drawable.btn_back),
                contentDescription = "Kembali",
                modifier = Modifier
                    .size(32.dp) // Ukuran tombol back
                    .clickable { navController.navigate("login") } // Navigasi kembali ke halaman option
            )
        }

        Spacer(modifier = Modifier.height(35.dp))

        Image(
            painter = painterResource(id = R.drawable.illustration),
            contentDescription = "Illustration",
            modifier = Modifier
                .fillMaxWidth()
                .height(264.dp)
        )

        Spacer(modifier = Modifier.height(50.dp))

        Text(
            text = "Masuk",
            fontSize = 30.sp,
            fontFamily = PoppinsFontFamily,
            modifier = Modifier.align(Alignment.Start),
            fontWeight = FontWeight.Bold,
            color = Color(0xFF27361F)
        )

        Spacer(modifier = Modifier.height(13.dp))

        Text(
            text = "Masukkan email anda untuk mendapatkan kode OTP",
            fontSize = 17.sp,
            fontFamily = PoppinsFontFamily,
            textAlign = TextAlign.Justify,
            color = Color(0xFF27361F)
        )

        Spacer(modifier = Modifier.height(28.dp))

        InputField(
            value = email,
            onValueChange = {
                email = it
                isEmailValid = it.contains("@") // Validasi email harus mengandung "@"
            },
            iconRes = R.drawable.ic_email,
            label = "Email Perusahaan"
        )
        if (!isEmailValid) {
            Text(
                text = "Email harus mengandung '@'",
                color = Color.Red,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier.align(Alignment.Start)
            )
        }

        Spacer(modifier = Modifier.height(19.dp))

        Button(
            onClick = { navController.navigate("otp") },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(
                containerColor = if (isFormFilled) Color(0xFF27361F) else Color.Gray
            )
        ) {
            Text(
                text = "Kirim Kode OTP",
                color = Color.White,
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }
    }
}


================================================================================

FILE 127: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\DetailRiwayatScreen.kt
Lines: 282 | Size: 11914 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.model.CsrHistoryItem
import com.example.tumbuhnyata.ui.component.*
import com.example.tumbuhnyata.viewmodel.DetailRiwayatViewModel
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.media3.common.Timeline
import com.example.tumbuhnyata.ui.riwayat.TimelineStep
import com.example.tumbuhnyata.ui.riwayat.VerticalTimeline

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun DetailRiwayatScreen(
    csrId: Int,
    viewModel: DetailRiwayatViewModel = viewModel(),
    onBack: () -> Unit,
    onNavigateToInvoice: () -> Unit,
    onNavigateToUploadRevisi: () -> Unit
) {
    var showBlueprintSuccessDialog by remember { mutableStateOf(false) }
    val csrDetail by viewModel.csrDetail.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()
    val error by viewModel.error.collectAsState()
    val snackbarHostState = remember { SnackbarHostState() }
    val scope = rememberCoroutineScope()

    // Add error handling for file upload
    var showErrorDialog by remember { mutableStateOf(false) }
    var errorMessage by remember { mutableStateOf("") }

    LaunchedEffect(csrId) {
        viewModel.loadCsrDetail(csrId)
    }

    Scaffold(
        topBar = {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White)
                    .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(32.dp)
                        .clip(CircleShape)
                        .background(Color(0xFF2C3E1F))
                        .clickable { onBack() },
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.ArrowBack,
                        contentDescription = "Back",
                        tint = Color.White
                    )
                }
                Spacer(modifier = Modifier.width(16.dp))
                Text(
                    "Detail Riwayat CSR",
                    fontSize = 25.sp,
                    fontWeight = FontWeight.Bold,
                    fontFamily = poppins
                )
            }
        },

        snackbarHost = {
            ErrorSnackbar(
                error = error,
                onDismiss = { viewModel.clearError() },
                onRetry = { viewModel.refresh(csrId) }
            )
        }

    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(Color(0xFFF7F7F7))
                .padding(paddingValues)
        ) {
            if (isLoading) {
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp),
                    contentAlignment = Alignment.Center
                ) {
                    CircularProgressIndicator(color = Color(0xFF2C3E1F))
                }
            } else {
                csrDetail?.let { csr ->
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .background(Color(0xFFF7F7F7))
                            .padding(16.dp)
                            .verticalScroll(rememberScrollState())
                    ) {
                        // CSR Card with elevation
                        CsrCard(item = csr)

                        Spacer(modifier = Modifier.height(16.dp))

                        // Timeline Section
                        val timelineSteps = when (csr.status) {
                            "Menunggu Pembayaran" -> listOf(
                                TimelineStep("Pengajuan Dikirim", "10/05/2024 - 09:41 WIB", isCompleted = true),
                                TimelineStep("Review & Evaluasi", "10/05/2024 - 09:50 WIB", isCompleted = true),
                                TimelineStep("Pembayaran", "10/05/2024 - 10:00 WIB", isInProgress = true),
                                TimelineStep("Implementasi Program")
                            )
                            else -> listOf(
                                TimelineStep("Pengajuan Dikirim", "10/05/2024 - 09:41 WIB", isCompleted = true),
                                TimelineStep(
                                    title = when (csr.status) {
                                        "Memerlukan Revisi" -> "Review & Evaluasi - Revisi Diperlukan"
                                        else -> "Review & Evaluasi"
                                    },
                                    date = "10/05/2024 - 09:50 WIB",
                                    isInProgress = true
                                ),
                                TimelineStep("Pembayaran", "10/05/2024 - 10:00 WIB"),
                                TimelineStep("Implementasi Program")
                            )
                        }

                        VerticalTimeline(steps = timelineSteps)

                        Spacer(modifier = Modifier.height(46.dp))

                        // Download Blueprint Button
                        Button(
                            onClick = { showBlueprintSuccessDialog = true },
                            modifier = Modifier.fillMaxWidth(),
                            shape = RoundedCornerShape(8.dp),
                            colors = ButtonDefaults.buttonColors(
                                containerColor = Color(0xFF2C3E1F)
                            )
                        ) {
                            Row(
                                verticalAlignment = Alignment.CenterVertically,
                                horizontalArrangement = Arrangement.Center
                            ) {
                                Icon(
                                    painter = painterResource(id = R.drawable.ic_download),
                                    contentDescription = "Download",
                                    modifier = Modifier.size(20.dp)
                                )
                                Spacer(modifier = Modifier.width(8.dp))
                                Text(
                                    "Download Proposal Rancangan",
                                    fontFamily = poppins,
                                    fontWeight = FontWeight.SemiBold
                                )
                            }
                        }

                        Spacer(modifier = Modifier.height(16.dp))

                        // Additional Buttons based on status
                        if (csr.status == "Memerlukan Revisi") {
                            Button(
                                onClick = onNavigateToUploadRevisi,
                                modifier = Modifier.fillMaxWidth(),
                                shape = RoundedCornerShape(8.dp),
                                colors = ButtonDefaults.buttonColors(
                                    containerColor = Color(0xFF2C3E1F)
                                )
                            ) {
                                Row(
                                    verticalAlignment = Alignment.CenterVertically,
                                    horizontalArrangement = Arrangement.Center
                                ) {
                                    Icon(
                                        painter = painterResource(id = R.drawable.ic_upload),
                                        contentDescription = "Upload",
                                        modifier = Modifier.size(18.dp)
                                    )
                                    Spacer(modifier = Modifier.width(8.dp))
                                    Text(
                                        "Upload Revisi",
                                        fontFamily = poppins,
                                        fontWeight = FontWeight.SemiBold,
                                        fontSize = 14.sp
                                    )
                                }
                            }
                            Text(
                                "Format file: PDF (max 10MB)",
                                fontSize = 12.sp,
                                color = Color.Gray,
                                modifier = Modifier.padding(top = 4.dp),
                                fontFamily = poppins
                            )
                        } else if (csr.status == "Menunggu Pembayaran") {
                            Button(
                                onClick = onNavigateToInvoice,
                                modifier = Modifier.fillMaxWidth(),
                                shape = RoundedCornerShape(8.dp),
                                colors = ButtonDefaults.buttonColors(
                                    containerColor = Color(0xFF2C3E1F)
                                )
                            ) {
                                Text(
                                    "Lihat Invoice",
                                    fontFamily = poppins,
                                    fontWeight = FontWeight.SemiBold
                                )
                            }
                        }
                    }
                }
            }

        }

        // Error Dialog for file upload
        if (showErrorDialog) {
            AlertDialog(
                onDismissRequest = { showErrorDialog = false },
                title = {
                    Text(
                        "Gagal Upload File",
                        fontFamily = poppins,
                        fontWeight = FontWeight.Bold
                    )
                },
                text = {
                    Text(
                        errorMessage,
                        fontFamily = poppins
                    )
                },
                confirmButton = {
                    TextButton(
                        onClick = { showErrorDialog = false }
                    ) {
                        Text(
                            "OK",
                            color = Color(0xFF2C3E1F),
                            fontFamily = poppins,
                            fontWeight = FontWeight.SemiBold
                        )
                    }
                },
                containerColor = Color.White,
                titleContentColor = Color(0xFF2C3E1F),
                textContentColor = Color.Black
            )
        }

        // Success Dialog
        if (showBlueprintSuccessDialog) {
            SuccessDialog(
                message = "Berhasil mengunduh blueprint",
                onDismiss = { showBlueprintSuccessDialog = false }
            )
        }
    }
}

================================================================================

FILE 128: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\DiterimaScreen.kt
Lines: 126 | Size: 4251 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.model.CsrHistoryItem
import com.example.tumbuhnyata.data.model.dummyCsrList
import com.example.tumbuhnyata.ui.component.CsrCard
import com.example.tumbuhnyata.ui.component.poppins
import com.example.tumbuhnyata.viewmodel.RiwayatViewModel

@Composable
fun DiterimaScreen(
    riwayatViewModel: RiwayatViewModel = viewModel(),
    onBack: () -> Unit,
    onCsrCardClick: (CsrHistoryItem) -> Unit
) {
    val diterimaList by riwayatViewModel.diterimaItems.collectAsState()

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF7F7F7))
    ) {
        // Header
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .background(Color.White)
                .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(
                modifier = Modifier
                    .size(32.dp)
                    .clip(CircleShape)
                    .background(Color(0xFF2C3E1F))
                    .clickable { onBack() },
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    imageVector = Icons.Default.ArrowBack,
                    contentDescription = "Back",
                    tint = Color.White
                )
            }
            Spacer(modifier = Modifier.width(16.dp))
            Text(
                "CSR Diterima",
                fontSize = 25.sp,
                fontWeight = FontWeight.Bold,
                fontFamily = poppins
            )
        }

        // List Riwayat History
        if (diterimaList.isEmpty()) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp),
                contentAlignment = Alignment.Center
            ) {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.Center
                ) {
                    Text(
                        text = "Belum ada CSR yang diterima",
                        color = Color.Gray,
                        fontFamily = poppins,
                        fontSize = 16.sp
                    )
                }
            }
        } else {
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(bottom = 16.dp)
            ) {
                items(diterimaList) { item ->
                    CsrCard(
                        item = item,
                        onClick = { onCsrCardClick(item) },
                        onDelete = { csrItem ->
                            riwayatViewModel.deleteCsrHistory(csrItem)
                        }
                    )
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun DiterimaScreenPreview() {
    DiterimaScreen(
        riwayatViewModel = viewModel(),
        onBack = {},
        onCsrCardClick = {}
    )
}

================================================================================

FILE 129: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\InvoiceScreen.kt
Lines: 151 | Size: 5422 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.component.poppins
import com.example.tumbuhnyata.ui.component.SuccessDialog

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun InvoiceScreen(
    onBack: () -> Unit
) {
    var showInvoiceDialog by remember { mutableStateOf(false) }
    var showSuccessDialog by remember { mutableStateOf(false) }

    Scaffold(
        topBar = {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White)
                    .padding(16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(40.dp)
                        .clip(CircleShape)
                        .background(Color(0xFF2C3E1F))
                        .clickable { onBack() },
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.ArrowBack,
                        contentDescription = "Back",
                        tint = Color.White
                    )
                }
                Spacer(modifier = Modifier.width(16.dp))
                Text(
                    "Invoice",
                    fontSize = 25.sp,
                    fontWeight = FontWeight.Bold,
                    fontFamily = poppins
                )
            }
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .fillMaxSize()
                .background(Color(0xFFF7F7F7))
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // Invoice Card
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .clickable { showInvoiceDialog = true },
                shape = RoundedCornerShape(8.dp),
                colors = CardDefaults.cardColors(containerColor = Color.White)
            ) {
                Image(
                    painter = painterResource(id = R.drawable.invoice_example),
                    contentDescription = "Invoice",
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(500.dp),
                    contentScale = ContentScale.Fit
                )
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Download Button
            Button(
                onClick = { showSuccessDialog = true },
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(8.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF2C3E1F)
                )
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.Center
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_download),
                        contentDescription = "Download",
                        modifier = Modifier.size(20.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        "Download Invoice",
                        fontFamily = poppins,
                        fontWeight = FontWeight.SemiBold
                    )
                }
            }
        }

        // Invoice Dialog
        if (showInvoiceDialog) {
            Dialog(onDismissRequest = { showInvoiceDialog = false }) {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(600.dp),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.invoice_example),
                        contentDescription = "Invoice Full",
                        modifier = Modifier.fillMaxSize(),
                        contentScale = ContentScale.Fit
                    )
                }
            }
        }

        // Success Dialog
        if (showSuccessDialog) {
            SuccessDialog(
                message = "Berhasil mengunduh invoice",
                onDismiss = { showSuccessDialog = false }
            )
        }
    }
} 

================================================================================

FILE 130: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\MendatangDetailScreen.kt
Lines: 214 | Size: 8073 chars
--------------------------------------------------------------------------------
//package com.example.tumbuhnyata.ui.riwayat
//
//import androidx.compose.foundation.background
//import androidx.compose.foundation.clickable
//import androidx.compose.foundation.layout.*
//import androidx.compose.foundation.rememberScrollState
//import androidx.compose.foundation.shape.CircleShape
//import androidx.compose.foundation.shape.RoundedCornerShape
//import androidx.compose.foundation.verticalScroll
//import androidx.compose.material.icons.Icons
//import androidx.compose.material.icons.filled.ArrowBack
//import androidx.compose.material3.*
//import androidx.compose.runtime.*
//import androidx.compose.ui.Alignment
//import androidx.compose.ui.Modifier
//import androidx.compose.ui.draw.clip
//import androidx.compose.ui.graphics.Color
//import androidx.compose.ui.res.painterResource
//import androidx.compose.ui.text.font.FontWeight
//import androidx.compose.ui.tooling.preview.Preview
//import androidx.compose.ui.unit.dp
//import androidx.compose.ui.unit.sp
//import com.example.tumbuhnyata.R
//import com.example.tumbuhnyata.data.model.CsrItem
//import com.example.tumbuhnyata.data.model.dummyCsrList
//import com.example.tumbuhnyata.ui.component.CsrCard
//import com.example.tumbuhnyata.ui.component.poppins
//import com.example.tumbuhnyata.ui.component.SuccessDialog
//
//@OptIn(ExperimentalMaterial3Api::class)
//@Composable
//fun MendatangDetailScreen(
//    csr: CsrItem,
//    onBack: () -> Unit
//) {
//    var showBlueprintSuccessDialog by remember { mutableStateOf(false) }
//
//    Scaffold(
//        topBar = {
//            Row(
//                modifier = Modifier
//                    .fillMaxWidth()
//                    .background(Color.White)
//                    .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 16.dp),
//                verticalAlignment = Alignment.CenterVertically
//            ) {
//                Box(
//                    modifier = Modifier
//                        .size(32.dp)
//                        .clip(CircleShape)
//                        .background(Color(0xFF2C3E1F))
//                        .clickable { onBack() },
//                    contentAlignment = Alignment.Center
//                ) {
//                    Icon(
//                        imageVector = Icons.Default.ArrowBack,
//                        contentDescription = "Back",
//                        tint = Color.White
//                    )
//                }
//                Spacer(modifier = Modifier.width(16.dp))
//                Text(
//                    "Status Riwayat CSR",
//                    fontSize = 25.sp,
//                    fontWeight = FontWeight.Bold,
//                    fontFamily = poppins
//                )
//            }
//        }
//    ) { paddingValues ->
//        Column(
//            modifier = Modifier
//                .padding(paddingValues)
//                .fillMaxSize()
//                .background(Color(0xFFF7F7F7))
//                .padding(16.dp)
//                .verticalScroll(rememberScrollState())
//        ) {
//            // CSR Card with elevation
//            CsrCard(item = csr)
//
//
//            Spacer(modifier = Modifier.height(16.dp))
//
//            // Status Section
//            Text(
//                text = "Status : Mendatang",
//                modifier = Modifier.padding(start = 4.dp),
//                fontSize = 14.sp,
//                fontWeight = FontWeight.Medium,
//                fontFamily = poppins
//            )
//
//            Spacer(modifier = Modifier.height(8.dp))
//
//            // Event Info
//            Column(
//                modifier = Modifier
//                    .fillMaxWidth()
//                    .padding(4.dp)
//            ) {
//                Row(
//                    modifier = Modifier.fillMaxWidth(),
//                    verticalAlignment = Alignment.CenterVertically
//                ) {
//                    Icon(
//                        painter = painterResource(id = R.drawable.ic_event_calendar2),
//                        contentDescription = "Date",
//                        tint = Color.Gray,
//                        modifier = Modifier.size(16.dp)
//                    )
//                    Spacer(modifier = Modifier.width(8.dp))
//                    Text(
//                        text = csr.period,
//                        fontSize = 14.sp,
//                        fontFamily = poppins
//                    )
//                }
//
//                Spacer(modifier = Modifier.height(8.dp))
//
//                Row(
//                    modifier = Modifier.fillMaxWidth(),
//                    verticalAlignment = Alignment.CenterVertically
//                ) {
//                    Icon(
//                        painter = painterResource(id = R.drawable.ic_event_loc2),
//                        contentDescription = "Location",
//                        tint = Color.Gray,
//                        modifier = Modifier.size(16.dp)
//                    )
//                    Spacer(modifier = Modifier.width(8.dp))
//                    Text(
//                        text = csr.location,
//                        fontSize = 14.sp,
//                        fontFamily = poppins
//                    )
//                }
//
//                Spacer(modifier = Modifier.height(8.dp))
//
//                Row(
//                    modifier = Modifier.fillMaxWidth(),
//                    verticalAlignment = Alignment.CenterVertically
//                ) {
//                    Icon(
//                        painter = painterResource(id = R.drawable.ic_event_office),
//                        contentDescription = "Organization",
//                        tint = Color.Gray,
//                        modifier = Modifier.size(16.dp)
//                    )
//                    Spacer(modifier = Modifier.width(8.dp))
//                    Text(
//                        text = csr.organization,
//                        fontSize = 14.sp,
//                        fontFamily = poppins
//                    )
//                }
//            }
//
//            Spacer(modifier = Modifier.height(24.dp))
//
//            // Blueprint Section
//            Text(
//                text = "id433. Paragon - ${csr.title} - LANGKAH NYATA.pdf",
//                fontSize = 12.sp,
//                fontFamily = poppins,
//                color = Color.Gray
//            )
//            Text(
//                text = "189 halaman - 14.3 MB - PDF",
//                fontSize = 12.sp,
//                fontFamily = poppins,
//                color = Color.Gray
//            )
//
//            Spacer(modifier = Modifier.height(8.dp))
//
//            Button(
//                onClick = { showBlueprintSuccessDialog = true },
//                modifier = Modifier.fillMaxWidth(),
//                shape = RoundedCornerShape(8.dp),
//                colors = ButtonDefaults.buttonColors(
//                    containerColor = Color(0xFF2C3E1F)
//                )
//            ) {
//                Row(
//                    verticalAlignment = Alignment.CenterVertically,
//                    horizontalArrangement = Arrangement.Center
//                ) {
//                    Icon(
//                        painter = painterResource(id = R.drawable.ic_download),
//                        contentDescription = "Download",
//                        modifier = Modifier.size(20.dp)
//                    )
//                    Spacer(modifier = Modifier.width(8.dp))
//                    Text(
//                        "Download Blueprint",
//                        fontFamily = poppins,
//                        fontWeight = FontWeight.SemiBold
//                    )
//                }
//            }
//        }
//
//        // Success Dialog
//        if (showBlueprintSuccessDialog) {
//            SuccessDialog(
//                message = "Berhasil mengunduh blueprint",
//                onDismiss = { showBlueprintSuccessDialog = false }
//            )
//        }
//    }
//}


================================================================================

FILE 131: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\PerluTindakanScreen.kt
Lines: 125 | Size: 4243 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.model.CsrHistoryItem
import com.example.tumbuhnyata.ui.component.CsrCard
import com.example.tumbuhnyata.ui.component.poppins
import com.example.tumbuhnyata.viewmodel.RiwayatViewModel

@Composable
fun PerluTindakanScreen(
    riwayatViewModel: RiwayatViewModel = viewModel(),
    onBack: () -> Unit,
    onCsrCardClick: (CsrHistoryItem) -> Unit
) {
    val perluTindakanList by riwayatViewModel.perluTindakanItems.collectAsState()

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF7F7F7))
    ) {
        // Header
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .background(Color.White)
                .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(
                modifier = Modifier
                    .size(32.dp)
                    .clip(CircleShape)
                    .background(Color(0xFF2C3E1F))
                    .clickable { onBack() },
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    imageVector = Icons.Default.ArrowBack,
                    contentDescription = "Back",
                    tint = Color.White
                )
            }
            Spacer(modifier = Modifier.width(16.dp))
            Text(
                "CSR Perlu Tindakan",
                fontSize = 25.sp,
                fontWeight = FontWeight.Bold,
                fontFamily = poppins
            )
        }

        // List Riwayat History
        if (perluTindakanList.isEmpty()) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp),
                contentAlignment = Alignment.Center
            ) {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.Center
                ) {
                    Text(
                        text = "Tidak ada CSR yang perlu tindakan",
                        color = Color.Gray,
                        fontFamily = poppins,
                        fontSize = 16.sp
                    )
                }
            }
        } else {
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(bottom = 16.dp)
            ) {
                items(perluTindakanList) { item ->
                    CsrCard(
                        item = item,
                        onClick = { onCsrCardClick(item) },
                        onDelete = { csrItem ->
                            riwayatViewModel.deleteCsrHistory(csrItem)
                        }
                    )
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PerluTindakanScreenPreview() {
    PerluTindakanScreen(
        riwayatViewModel = viewModel(),
        onBack = {},
        onCsrCardClick = {}
    )
}

================================================================================

FILE 132: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\ProgressDetailScreen.kt
Lines: 257 | Size: 10286 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.component.*
import com.example.tumbuhnyata.viewmodel.DetailRiwayatViewModel
import androidx.lifecycle.viewmodel.compose.viewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ProgressDetailScreen(
    csrId: Int,
    viewModel: DetailRiwayatViewModel = viewModel(),
    onBack: () -> Unit
) {
    var showBlueprintSuccessDialog by remember { mutableStateOf(false) }
    val csrDetail by viewModel.csrDetail.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()
    val error by viewModel.error.collectAsState()

    LaunchedEffect(csrId) {
        viewModel.loadCsrDetail(csrId)
    }

    Scaffold(
        topBar = {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White)
                    .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(32.dp)
                        .clip(CircleShape)
                        .background(Color(0xFF2C3E1F))
                        .clickable { onBack() },
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.ArrowBack,
                        contentDescription = "Back",
                        tint = Color.White
                    )
                }
                Spacer(modifier = Modifier.width(16.dp))
                Text(
                    "Detail CSR Selesai",
                    fontSize = 25.sp,
                    fontWeight = FontWeight.Bold,
                    fontFamily = poppins
                )
            }
        }
    ) { paddingValues ->
        if (isLoading) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                CircularProgressIndicator()
            }
        } else if (error != null) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                Text(error ?: "Unknown error occurred")
            }
        } else {
            csrDetail?.let { csr ->
                Column(
                    modifier = Modifier
                        .padding(paddingValues)
                        .fillMaxSize()
                        .background(Color(0xFFF7F7F7))
                        .padding(16.dp)
                        .verticalScroll(rememberScrollState())
                ) {
                    // CSR Card with elevation
                    CsrCard(item = csr)

                    Spacer(modifier = Modifier.height(16.dp))

                    // Status Section
                    Text(
                        text = "Status : Selesai",
                        modifier = Modifier.padding(start = 4.dp),
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium,
                        fontFamily = poppins
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    // Event Info
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(4.dp)
                    ) {
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_event_calendar2),
                                contentDescription = "Date",
                                tint = Color.Gray,
                                modifier = Modifier.size(16.dp)
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(
                                text = "${csr.startDate} - ${csr.endDate}",
                                fontSize = 14.sp,
                                fontFamily = poppins
                            )
                        }

                        Spacer(modifier = Modifier.height(8.dp))

                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_event_loc2),
                                contentDescription = "Location",
                                tint = Color.Gray,
                                modifier = Modifier.size(16.dp)
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(
                                text = csr.location,
                                fontSize = 14.sp,
                                fontFamily = poppins
                            )
                        }

                        Spacer(modifier = Modifier.height(8.dp))

                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_event_office),
                                contentDescription = "Organization",
                                tint = Color.Gray,
                                modifier = Modifier.size(16.dp)
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(
                                text = csr.partnerName,
                                fontSize = 14.sp,
                                fontFamily = poppins
                            )
                        }

                        Spacer(modifier = Modifier.height(8.dp))

                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_event_money1),
                                contentDescription = "budget",
                                tint = Color.Gray,
                                modifier = Modifier.size(16.dp)
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(
                                text = "Rp ${csr.budget}",
                                fontSize = 14.sp,
                                fontFamily = poppins
                            )
                        }
                    }

                    Spacer(modifier = Modifier.height(24.dp))

                    // Blueprint Section
                    Text(
                        text = "id${csr.id}. ${csr.partnerName} - ${csr.programName} - LANGKAH NYATA.pdf",
                        fontSize = 12.sp,
                        fontFamily = poppins,
                        color = Color.Gray
                    )
                    Text(
                        text = "189 halaman - 14.3 MB - PDF",
                        fontSize = 12.sp,
                        fontFamily = poppins,
                        color = Color.Gray
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    // Download Blueprint Button
                    Button(
                        onClick = { showBlueprintSuccessDialog = true },
                        modifier = Modifier.fillMaxWidth(),
                        shape = RoundedCornerShape(8.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFF2C3E1F)
                        )
                    ) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.Center
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_download),
                                contentDescription = "Download",
                                modifier = Modifier.size(20.dp)
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(
                                "Download Proposal Rancangan",
                                fontFamily = poppins,
                                fontWeight = FontWeight.SemiBold
                            )
                        }
                    }
                }
            }
        }
    }

    // Success Dialog
    if (showBlueprintSuccessDialog) {
        SuccessDialog(
            message = "Berhasil mengunduh proposal rancangan",
            onDismiss = { showBlueprintSuccessDialog = false }
        )
    }
}

================================================================================

FILE 133: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\RiwayatScreen.kt
Lines: 366 | Size: 14975 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.KeyboardArrowDown
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.model.CsrHistoryItem
import com.example.tumbuhnyata.data.model.dummyCsrList
import com.example.tumbuhnyata.ui.component.CsrCard
import com.example.tumbuhnyata.ui.component.ErrorSnackbar
import com.example.tumbuhnyata.ui.component.poppins
import com.example.tumbuhnyata.ui.components.SectionHeader
import com.example.tumbuhnyata.ui.components.SyncStatusIndicator
import com.example.tumbuhnyata.ui.components.EmptyStateCard
import com.example.tumbuhnyata.ui.components.EmptyDataState
import com.example.tumbuhnyata.ui.components.NoConnectionEmptyState
import com.example.tumbuhnyata.util.NetworkUtils
import com.example.tumbuhnyata.TumbuhNyataApp
import androidx.compose.ui.platform.LocalContext
import com.example.tumbuhnyata.viewmodel.RiwayatViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RiwayatScreen(
    navController: NavController,
    riwayatViewModel: RiwayatViewModel = viewModel(),
    onCsrCardClick: (CsrHistoryItem) -> Unit,
    onLihatSemuaPerluTindakan: () -> Unit,
    onLihatSemuaDiterima: () -> Unit
) {
    val perluTindakanList by riwayatViewModel.perluTindakanItems.collectAsState()
    val diterimaList by riwayatViewModel.diterimaItems.collectAsState()
    val error by riwayatViewModel.error.collectAsState()
    val deleteSuccess by riwayatViewModel.deleteSuccess.collectAsState()
    val isLoading by riwayatViewModel.isLoading.collectAsState()
    val unsyncedCount by riwayatViewModel.unsyncedCount.collectAsState()
    val isSyncing by riwayatViewModel.isSyncing.collectAsState()
    val syncSuccess by riwayatViewModel.syncSuccess.collectAsState()
    var searchText by remember { mutableStateOf("") }
    val snackbarHostState = remember { SnackbarHostState() }
    val scope = rememberCoroutineScope()
    val context = LocalContext.current

    // Handle delete success message
    LaunchedEffect(deleteSuccess) {
        deleteSuccess?.let { message ->
            snackbarHostState.showSnackbar(
                message = message,
                duration = SnackbarDuration.Short
            )
            riwayatViewModel.clearDeleteSuccess()
        }
    }

    // Handle sync success message
    LaunchedEffect(syncSuccess) {
        syncSuccess?.let { message ->
            snackbarHostState.showSnackbar(
                message = message,
                duration = SnackbarDuration.Short
            )
            riwayatViewModel.clearSyncSuccess()
        }
    }

    // Handle error message via snackbar for sync errors
    LaunchedEffect(error) {
        error?.let { message ->
            if (message.contains("koneksi internet", ignoreCase = true) || 
                message.contains("sinkronisasi", ignoreCase = true)) {
                snackbarHostState.showSnackbar(
                    message = message,
                    duration = SnackbarDuration.Long,
                    actionLabel = "OK"
                )
            }
        }
    }

    Scaffold(
        snackbarHost = { 
            SnackbarHost(hostState = snackbarHostState)
        },
        floatingActionButton = {
            FloatingActionButton(
                onClick = { navController.navigate("tambah_riwayat") },
                containerColor = Color(0xFF2C3E1F),
                contentColor = Color.White
            ) {
                Icon(
                    imageVector = Icons.Default.Add,
                    contentDescription = "Tambah CSR"
                )
            }
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(Color(0xFFF7F7F7))
                .padding(paddingValues)
        ) {
            // Header
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White)
                    .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(32.dp)
                        .clip(CircleShape)
                        .background(Color(0xFF2C3E1F))
                        .clickable { navController.popBackStack() }, // Navigasi ke Home
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.ArrowBack,
                        contentDescription = "Back",
                        tint = Color.White
                    )
                }
                Spacer(modifier = Modifier.width(16.dp))
                Text(
                    "Status Riwayat CSR",
                    fontSize = 25.sp,
                    fontWeight = FontWeight.Bold,
                    fontFamily = poppins
                )
            }

            // Search Bar
            OutlinedTextField(
                value = searchText,
                onValueChange = { searchText = it },
                leadingIcon = {
                    IconButton(onClick = { /* TODO: Implement filter functionality */ }) {
                        Icon(
                            painter = painterResource(id = R.drawable.ic_filter),
                            contentDescription = "Filter"
                        )
                    }
                },
                trailingIcon = {
                    IconButton(onClick = { /* TODO: Implement dropdown functionality */ }) {
                        Icon(Icons.Default.KeyboardArrowDown, contentDescription = "Dropdown")
                    }
                },
                placeholder = { Text("Cari Riwayat") },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 8.dp)
                    .background(Color.White, RoundedCornerShape(8.dp)),
                shape = RoundedCornerShape(8.dp)
            )

            // Sync Status Indicator
            SyncStatusIndicator(
                unsyncedCount = unsyncedCount,
                isSyncing = isSyncing,
                onSyncClick = { riwayatViewModel.syncData() }
            )

            // Show error if any
            error?.let { errorMessage ->
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 16.dp, vertical = 8.dp),
                    colors = CardDefaults.cardColors(containerColor = Color(0xFFFFEBEE))
                ) {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = errorMessage,
                            color = Color(0xFFD32F2F),
                            fontFamily = poppins,
                            modifier = Modifier.weight(1f)
                        )
                        TextButton(
                            onClick = { 
                                riwayatViewModel.clearError()
                                riwayatViewModel.refresh()
                            }
                        ) {
                            Text("Coba Lagi", color = Color(0xFFD32F2F))
                        }
                    }
                }
            }

            if (isLoading) {
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp),
                    contentAlignment = Alignment.Center
                ) {
                    Column(
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        CircularProgressIndicator(
                            color = Color(0xFF2C3E1F),
                            modifier = Modifier.size(40.dp)
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Text(
                            text = "Memuat data CSR...",
                            fontSize = 14.sp,
                            color = Color(0xFF666666),
                            fontFamily = poppins
                        )
                    }
                }
            } else {
                // Check if both lists are empty untuk show comprehensive empty state
                if (perluTindakanList.isEmpty() && diterimaList.isEmpty()) {
                    Box(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(16.dp),
                        contentAlignment = Alignment.Center
                    ) {
                        when {
                            error != null && !NetworkUtils.isNetworkAvailable(context) -> {
                                NoConnectionEmptyState(
                                    onRetry = { riwayatViewModel.refresh() }
                                )
                            }
                            error != null -> {
                                EmptyStateCard(
                                    title = "Terjadi Kesalahan",
                                    subtitle = "Gagal memuat data. Silakan coba lagi.",
                                    onRetry = { riwayatViewModel.refresh() }
                                )
                            }
                            else -> {
                                EmptyDataState()
                            }
                        }
                    }
                } else {
                    // Lazy Column
                    LazyColumn(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(bottom = 16.dp)
                    ) {
                    // Section "Perlu Tindakan"
                    item {
                        SectionHeader(
                            title = "Perlu Tindakan",
                            onLihatSemua = onLihatSemuaPerluTindakan
                        )
                    }
                    
                    if (perluTindakanList.isEmpty()) {
                        item {
                            EmptyStateCard(
                                title = "Tidak Ada CSR yang Perlu Tindakan",
                                subtitle = if (error != null) {
                                    "Periksa koneksi internet atau coba lagi"
                                } else {
                                    "Semua CSR Anda sudah diproses"
                                },
                                onRetry = if (error != null) {
                                    { riwayatViewModel.refresh() }
                                } else null
                            )
                        }
                    } else {
                        items(perluTindakanList.take(4)) { item ->
                            CsrCard(
                                item = item,
                                onClick = { onCsrCardClick(item) },
                                onDelete = { csrItem ->
                                    riwayatViewModel.deleteCsrHistory(csrItem)
                                }
                            )
                        }
                    }

                    // Section "Diterima"
                    item {
                        SectionHeader(
                            title = "Diterima",
                            onLihatSemua = onLihatSemuaDiterima
                        )
                    }
                    
                    if (diterimaList.isEmpty()) {
                        item {
                            EmptyStateCard(
                                title = "Tidak Ada CSR yang Diterima",
                                subtitle = if (error != null) {
                                    "Periksa koneksi internet atau coba lagi"
                                } else {
                                    "CSR yang sudah diterima akan muncul di sini"
                                },
                                onRetry = if (error != null) {
                                    { riwayatViewModel.refresh() }
                                } else null
                            )
                        }
                    } else {
                        items(diterimaList.take(4)) { item ->
                            CsrCard(
                                item = item,
                                onClick = { onCsrCardClick(item) },
                                onDelete = { csrItem ->
                                    riwayatViewModel.deleteCsrHistory(csrItem)
                                }
                            )
                        }
                    }
                    } // End of LazyColumn
                } // End of else
            }
        }
    }
}

//@Preview(showBackground = true)
//@Composable
//fun RiwayatScreenPreview() {
//    val navController = rememberNavController()
//    val dummyViewModel = remember {
//        RiwayatViewModel(dummyList = dummyCsrList)
//    }
//    RiwayatScreen(
//        navController = navController,
//        riwayatViewModel = dummyViewModel,
//        onCsrCardClick = { Log.d("Preview", "Card Clicked: ${it.programName}") },
//        onLihatSemuaPerluTindakan = { Log.d("Preview", "Lihat Semua Perlu Tindakan") },
//        onLihatSemuaDiterima = { Log.d("Preview", "Lihat Semua Diterima") }
//    )
//}

================================================================================

FILE 134: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\SelesaiDetailScreen.kt
Lines: 359 | Size: 14458 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.component.CsrCard
import com.example.tumbuhnyata.ui.component.poppins
import com.example.tumbuhnyata.ui.component.SuccessDialog
import com.example.tumbuhnyata.viewmodel.DetailRiwayatViewModel
import androidx.lifecycle.viewmodel.compose.viewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SelesaiDetailScreen(
    csrId: Int,
    viewModel: DetailRiwayatViewModel = viewModel(),
    onBack: () -> Unit
) {
    var showCertificateSuccessDialog by remember { mutableStateOf(false) }
    var showBlueprintSuccessDialog by remember { mutableStateOf(false) }
    var showReportSuccessDialog by remember { mutableStateOf(false) }
    
    val csrDetail by viewModel.csrDetail.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()
    val error by viewModel.error.collectAsState()

    LaunchedEffect(csrId) {
        viewModel.loadCsrDetail(csrId)
    }

    Scaffold(
        topBar = {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White)
                    .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(32.dp)
                        .clip(CircleShape)
                        .background(Color(0xFF2C3E1F))
                        .clickable { onBack() },
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.ArrowBack,
                        contentDescription = "Back",
                        tint = Color.White
                    )
                }
                Spacer(modifier = Modifier.width(16.dp))
                Text(
                    "Status Riwayat CSR",
                    fontSize = 25.sp,
                    fontWeight = FontWeight.Bold,
                    fontFamily = poppins
                )
            }
        }
    ) { paddingValues ->
        if (isLoading) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                CircularProgressIndicator()
            }
        } else if (error != null) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                Text(error ?: "Unknown error occurred")
            }
        } else {
            csrDetail?.let { csr ->
                Column(
                    modifier = Modifier
                        .padding(paddingValues)
                        .fillMaxSize()
                        .background(Color(0xFFF7F7F7))
                        .padding(16.dp)
                        .verticalScroll(rememberScrollState())
                ) {
                    // CSR Card with elevation

                    CsrCard(item = csr)


                    Spacer(modifier = Modifier.height(16.dp))

                    // Status Section
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "Status : Program Selesai",
                            modifier = Modifier.padding(start = 4.dp),
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Medium,
                            fontFamily = poppins
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = "✅",
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Medium,
                            fontFamily = poppins
                        )
                    }

                    Spacer(modifier = Modifier.height(8.dp))

                    // Event Info
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(4.dp)
                    ) {
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_event_calendar2),
                                contentDescription = "Date",
                                tint = Color.Gray,
                                modifier = Modifier.size(16.dp)
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(
                                text = "${csr.startDate} - ${csr.endDate}",
                                fontSize = 14.sp,
                                fontFamily = poppins
                            )
                        }

                        Spacer(modifier = Modifier.height(8.dp))

                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_event_loc2),
                                contentDescription = "Location",
                                tint = Color.Gray,
                                modifier = Modifier.size(16.dp)
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(
                                text = csr.location,
                                fontSize = 14.sp,
                                fontFamily = poppins
                            )
                        }

                        Spacer(modifier = Modifier.height(8.dp))

                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_event_office),
                                contentDescription = "Organization",
                                tint = Color.Gray,
                                modifier = Modifier.size(16.dp)
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(
                                text = csr.partnerName,
                                fontSize = 14.sp,
                                fontFamily = poppins
                            )
                        }
                    }

                    Spacer(modifier = Modifier.height(24.dp))

                    // Certificate Section
                    Text(
                        text = "Sertifikasi Kegiatan",
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Bold,
                        fontFamily = poppins
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    Button(
                        onClick = { showCertificateSuccessDialog = true },
                        modifier = Modifier.fillMaxWidth(),
                        shape = RoundedCornerShape(8.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFF2C3E1F)
                        )
                    ) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.Center
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_download),
                                contentDescription = "Download",
                                modifier = Modifier.size(20.dp)
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(
                                "Download Sertifikat",
                                fontFamily = poppins,
                                fontWeight = FontWeight.SemiBold
                            )
                        }
                    }

                    Spacer(modifier = Modifier.height(24.dp))

                    // Blueprint Section
                    Text(
                        text = "Blueprint dan Laporan Kegiatan",
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Bold,
                        fontFamily = poppins
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    Text(
                        text = "id${csr.id}. ${csr.partnerName} - ${csr.programName} - LANGKAH NYATA.pdf",
                        fontSize = 12.sp,
                        fontFamily = poppins,
                        color = Color.Gray
                    )
                    Text(
                        text = "189 halaman - 14.3 MB - PDF",
                        fontSize = 12.sp,
                        fontFamily = poppins,
                        color = Color.Gray
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    Button(
                        onClick = { showBlueprintSuccessDialog = true },
                        modifier = Modifier.fillMaxWidth(),
                        shape = RoundedCornerShape(8.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFF2C3E1F)
                        )
                    ) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.Center
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_download),
                                contentDescription = "Download",
                                modifier = Modifier.size(20.dp)
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(
                                "Download Blueprint",
                                fontFamily = poppins,
                                fontWeight = FontWeight.SemiBold
                            )
                        }
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    Text(
                        text = "id${csr.id}. Report ${csr.partnerName} - ${csr.programName} - LANGKAH NYATA.pdf",
                        fontSize = 12.sp,
                        fontFamily = poppins,
                        color = Color.Gray
                    )
                    Text(
                        text = "189 halaman - 14.3 MB - PDF",
                        fontSize = 12.sp,
                        fontFamily = poppins,
                        color = Color.Gray
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    Button(
                        onClick = { showReportSuccessDialog = true },
                        modifier = Modifier.fillMaxWidth(),
                        shape = RoundedCornerShape(8.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFF2C3E1F)
                        )
                    ) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.Center
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_download),
                                contentDescription = "Download",
                                modifier = Modifier.size(20.dp)
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(
                                "Download Laporan Kegiatan",
                                fontFamily = poppins,
                                fontWeight = FontWeight.SemiBold
                            )
                        }
                    }
                }
            }
        }

        // Success Dialogs
        if (showCertificateSuccessDialog) {
            SuccessDialog(
                message = "Berhasil mengunduh sertifikat",
                onDismiss = { showCertificateSuccessDialog = false }
            )
        }

        if (showBlueprintSuccessDialog) {
            SuccessDialog(
                message = "Berhasil mengunduh blueprint",
                onDismiss = { showBlueprintSuccessDialog = false }
            )
        }

        if (showReportSuccessDialog) {
            SuccessDialog(
                message = "Berhasil mengunduh laporan kegiatan",
                onDismiss = { showReportSuccessDialog = false }
            )
        }
    }
}

================================================================================

FILE 135: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\TambahRiwayatScreen.kt
Lines: 499 | Size: 20581 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.DateRange
import androidx.compose.material.icons.filled.KeyboardArrowDown
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.example.tumbuhnyata.ui.component.poppins
import com.example.tumbuhnyata.viewmodel.TambahRiwayatViewModel
import java.text.SimpleDateFormat
import java.util.*

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TambahRiwayatScreen(
    navController: NavController,
    viewModel: TambahRiwayatViewModel = viewModel()
) {
    val context = LocalContext.current
    val scrollState = rememberScrollState()
    
    // Collect state
    val programName by viewModel.programName.collectAsState()
    val mitra by viewModel.mitra.collectAsState()
    val status by viewModel.status.collectAsState()
    val kategori by viewModel.kategori.collectAsState()
    val lokasi by viewModel.lokasi.collectAsState()
    val startDate by viewModel.startDate.collectAsState()
    val endDate by viewModel.endDate.collectAsState()
    val deskripsi by viewModel.deskripsi.collectAsState()
    val budget by viewModel.budget.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()
    val error by viewModel.error.collectAsState()
    val isSuccess by viewModel.isSuccess.collectAsState()
    val successMessage by viewModel.successMessage.collectAsState()
    
    // Dropdown states
    var statusExpanded by remember { mutableStateOf(false) }
    var kategoriExpanded by remember { mutableStateOf(false) }
    
    // Date picker states
    var showStartDatePicker by remember { mutableStateOf(false) }
    var showEndDatePicker by remember { mutableStateOf(false) }
    
    // Snackbar
    val snackbarHostState = remember { SnackbarHostState() }

    Scaffold(
        snackbarHost = { SnackbarHost(hostState = snackbarHostState) }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(Color(0xFFF7F7F7))
                .padding(paddingValues)
        ) {
            // Header
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White)
                    .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(32.dp)
                        .clip(CircleShape)
                        .background(Color(0xFF2C3E1F))
                        .clickable { navController.popBackStack() },
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.ArrowBack,
                        contentDescription = "Back",
                        tint = Color.White
                    )
                }
                Spacer(modifier = Modifier.width(16.dp))
                Text(
                    "Tambah CSR",
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Bold,
                    fontFamily = poppins,
                    color = Color.Black
                )
            }

            // Form Content
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .verticalScroll(scrollState)
                    .padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                // Nama Program
                Column {
                    Text(
                        text = "Nama Program",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium,
                        fontFamily = poppins,
                        color = Color(0xFF666666)
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    OutlinedTextField(
                        value = programName,
                        onValueChange = viewModel::updateProgramName,
                        placeholder = { Text("Nama Kegiatan", color = Color.Gray) },
                        modifier = Modifier.fillMaxWidth(),
                        colors = OutlinedTextFieldDefaults.colors(
                            focusedBorderColor = Color(0xFF2C3E1F),
                            unfocusedBorderColor = Color.Gray
                        ),
                        shape = RoundedCornerShape(8.dp)
                    )
                    Text(
                        text = "*Tuliskan nama kegiatan dengan pendek dan ringkas",
                        fontSize = 12.sp,
                        color = Color.Gray,
                        fontFamily = poppins,
                        modifier = Modifier.padding(top = 4.dp)
                    )
                }

                // Mitra
                Column {
                    Text(
                        text = "Mitra",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium,
                        fontFamily = poppins,
                        color = Color(0xFF666666)
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    OutlinedTextField(
                        value = mitra,
                        onValueChange = viewModel::updateMitra,
                        placeholder = { Text("Nama Mitra", color = Color.Gray) },
                        modifier = Modifier.fillMaxWidth(),
                        colors = OutlinedTextFieldDefaults.colors(
                            focusedBorderColor = Color(0xFF2C3E1F),
                            unfocusedBorderColor = Color.Gray
                        ),
                        shape = RoundedCornerShape(8.dp)
                    )
                }

                // Status
                Column {
                    Text(
                        text = "Status",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium,
                        fontFamily = poppins,
                        color = Color(0xFF666666)
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    ExposedDropdownMenuBox(
                        expanded = statusExpanded,
                        onExpandedChange = { statusExpanded = !statusExpanded }
                    ) {
                        OutlinedTextField(
                            value = status,
                            onValueChange = {},
                            readOnly = true,
                            placeholder = { Text("Status", color = Color.Gray) },
                            trailingIcon = {
                                Icon(
                                    imageVector = Icons.Default.KeyboardArrowDown,
                                    contentDescription = "Dropdown"
                                )
                            },
                            modifier = Modifier
                                .fillMaxWidth()
                                .menuAnchor(),
                            colors = OutlinedTextFieldDefaults.colors(
                                focusedBorderColor = Color(0xFF2C3E1F),
                                unfocusedBorderColor = Color.Gray
                            ),
                            shape = RoundedCornerShape(8.dp)
                        )
                        ExposedDropdownMenu(
                            expanded = statusExpanded,
                            onDismissRequest = { statusExpanded = false }
                        ) {
                            viewModel.statusOptions.forEach { option ->
                                DropdownMenuItem(
                                    text = { Text(option) },
                                    onClick = {
                                        viewModel.updateStatus(option)
                                        statusExpanded = false
                                    }
                                )
                            }
                        }
                    }
                }

                // Kategori Program
                Column {
                    Text(
                        text = "Kategori Program",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium,
                        fontFamily = poppins,
                        color = Color(0xFF666666)
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    ExposedDropdownMenuBox(
                        expanded = kategoriExpanded,
                        onExpandedChange = { kategoriExpanded = !kategoriExpanded }
                    ) {
                        OutlinedTextField(
                            value = kategori,
                            onValueChange = {},
                            readOnly = true,
                            placeholder = { Text("Kategori", color = Color.Gray) },
                            trailingIcon = {
                                Icon(
                                    imageVector = Icons.Default.KeyboardArrowDown,
                                    contentDescription = "Dropdown"
                                )
                            },
                            modifier = Modifier
                                .fillMaxWidth()
                                .menuAnchor(),
                            colors = OutlinedTextFieldDefaults.colors(
                                focusedBorderColor = Color(0xFF2C3E1F),
                                unfocusedBorderColor = Color.Gray
                            ),
                            shape = RoundedCornerShape(8.dp)
                        )
                        ExposedDropdownMenu(
                            expanded = kategoriExpanded,
                            onDismissRequest = { kategoriExpanded = false }
                        ) {
                            viewModel.kategoriOptions.forEach { option ->
                                DropdownMenuItem(
                                    text = { Text(option) },
                                    onClick = {
                                        viewModel.updateKategori(option)
                                        kategoriExpanded = false
                                    }
                                )
                            }
                        }
                    }
                }

                // Lokasi
                Column {
                    Text(
                        text = "Lokasi",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium,
                        fontFamily = poppins,
                        color = Color(0xFF666666)
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    OutlinedTextField(
                        value = lokasi,
                        onValueChange = viewModel::updateLokasi,
                        placeholder = { Text("Lokasi", color = Color.Gray) },
                        modifier = Modifier.fillMaxWidth(),
                        colors = OutlinedTextFieldDefaults.colors(
                            focusedBorderColor = Color(0xFF2C3E1F),
                            unfocusedBorderColor = Color.Gray
                        ),
                        shape = RoundedCornerShape(8.dp)
                    )
                }

                // Periode waktu
                Column {
                    Text(
                        text = "Periode",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium,
                        fontFamily = poppins,
                        color = Color(0xFF666666)
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    OutlinedTextField(
                        value = if (startDate.isNotEmpty() && endDate.isNotEmpty()) {
                            "$startDate - $endDate"
                        } else {
                            ""
                        },
                        onValueChange = {},
                        readOnly = true,
                        placeholder = { Text("Periode waktu", color = Color.Gray) },
                        trailingIcon = {
                            IconButton(onClick = { showStartDatePicker = true }) {
                                Icon(
                                    imageVector = Icons.Default.DateRange,
                                    contentDescription = "Pilih Tanggal"
                                )
                            }
                        },
                        modifier = Modifier.fillMaxWidth(),
                        colors = OutlinedTextFieldDefaults.colors(
                            focusedBorderColor = Color(0xFF2C3E1F),
                            unfocusedBorderColor = Color.Gray
                        ),
                        shape = RoundedCornerShape(8.dp)
                    )
                }

                // Deskripsi
                Column {
                    Text(
                        text = "Deskripsi",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium,
                        fontFamily = poppins,
                        color = Color(0xFF666666)
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    OutlinedTextField(
                        value = deskripsi,
                        onValueChange = viewModel::updateDeskripsi,
                        placeholder = { Text("Deskripsi program", color = Color.Gray) },
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(100.dp),
                        colors = OutlinedTextFieldDefaults.colors(
                            focusedBorderColor = Color(0xFF2C3E1F),
                            unfocusedBorderColor = Color.Gray
                        ),
                        shape = RoundedCornerShape(8.dp),
                        maxLines = 4
                    )
                }

                // Budget
                Column {
                    Text(
                        text = "Budget",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium,
                        fontFamily = poppins,
                        color = Color(0xFF666666)
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    OutlinedTextField(
                        value = budget,
                        onValueChange = viewModel::updateBudget,
                        placeholder = { Text("Masukkan budget", color = Color.Gray) },
                        modifier = Modifier.fillMaxWidth(),
                        colors = OutlinedTextFieldDefaults.colors(
                            focusedBorderColor = Color(0xFF2C3E1F),
                            unfocusedBorderColor = Color.Gray
                        ),
                        shape = RoundedCornerShape(8.dp),
                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)
                    )
                }

                Spacer(modifier = Modifier.height(24.dp))

                // Submit Button
                Button(
                    onClick = {
                        viewModel.submitForm {
                            navController.popBackStack()
                        }
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(50.dp),
                    enabled = !isLoading,
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF2C3E1F)
                    ),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    if (isLoading) {
                        CircularProgressIndicator(
                            modifier = Modifier.size(20.dp),
                            color = Color.White
                        )
                    } else {
                        Text(
                            text = "Kirim",
                            fontSize = 16.sp,
                            fontWeight = FontWeight.Bold,
                            fontFamily = poppins,
                            color = Color.White
                        )
                    }
                }

                Spacer(modifier = Modifier.height(16.dp))
            }
        }
    }

    // Show success/error messages
    LaunchedEffect(successMessage) {
        successMessage?.let { message ->
            snackbarHostState.showSnackbar(
                message = message,
                duration = SnackbarDuration.Long
            )
            viewModel.clearSuccessMessage()
        }
    }
    
    LaunchedEffect(error) {
        error?.let { errorMessage ->
            snackbarHostState.showSnackbar(
                message = errorMessage,
                duration = SnackbarDuration.Short
            )
            viewModel.clearError()
        }
    }

    // Date Picker for start date
    if (showStartDatePicker) {
        val datePickerState = rememberDatePickerState()
        DatePickerDialog(
            onDismissRequest = { showStartDatePicker = false },
            confirmButton = {
                TextButton(
                    onClick = {
                        datePickerState.selectedDateMillis?.let { millis ->
                            val date = Date(millis)
                            val formatter = SimpleDateFormat("dd/MM/yyyy", Locale.getDefault())
                            viewModel.updateStartDate(formatter.format(date))
                        }
                        showStartDatePicker = false
                        showEndDatePicker = true
                    }
                ) {
                    Text("OK")
                }
            },
            dismissButton = {
                TextButton(onClick = { showStartDatePicker = false }) {
                    Text("Batal")
                }
            }
        ) {
            DatePicker(state = datePickerState)
        }
    }

    // Date Picker for end date
    if (showEndDatePicker) {
        val datePickerState = rememberDatePickerState()
        DatePickerDialog(
            onDismissRequest = { showEndDatePicker = false },
            confirmButton = {
                TextButton(
                    onClick = {
                        datePickerState.selectedDateMillis?.let { millis ->
                            val date = Date(millis)
                            val formatter = SimpleDateFormat("dd/MM/yyyy", Locale.getDefault())
                            viewModel.updateEndDate(formatter.format(date))
                        }
                        showEndDatePicker = false
                    }
                ) {
                    Text("OK")
                }
            },
            dismissButton = {
                TextButton(onClick = { showEndDatePicker = false }) {
                    Text("Batal")
                }
            }
        ) {
            DatePicker(state = datePickerState)
        }
    }
} 

================================================================================

FILE 136: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\UploadRevisiScreen.kt
Lines: 223 | Size: 8811 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.component.poppins
import com.example.tumbuhnyata.ui.component.SuccessDialog

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun UploadRevisiScreen(
    navController: NavController,
    onBack: () -> Unit,
    onUpload: (String) -> Unit
) {
    var fileName by remember { mutableStateOf("") }
    var isUploading by remember { mutableStateOf(false) }
    var showSuccessDialog by remember { mutableStateOf(false) }

    Scaffold(
        topBar = {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White)
                    .padding(start = 16.dp, top = 30.dp, bottom = 16.dp, end = 16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(32.dp)
                        .clip(CircleShape)
                        .background(Color(0xFF2C3E1F))
                        .clickable { onBack() },
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.ArrowBack,
                        contentDescription = "Back",
                        tint = Color.White
                    )
                }
                Spacer(modifier = Modifier.width(16.dp))
                Text(
                    "Upload Revisi",
                    fontSize = 25.sp,
                    fontWeight = FontWeight.Bold,
                    fontFamily = poppins
                )
            }
        }
    ) { innerPadding ->
        Box(
            modifier = Modifier
                .padding(innerPadding)
                .fillMaxSize()
                .background(Color(0xFFF7F7F7))
        ) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(start = 16.dp, end = 16.dp, top = 0.dp, bottom = 80.dp),
                horizontalAlignment = Alignment.Start
            ) {
                Text(
                    text = "Unggah Dokumen Rancangan",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold,
                    fontFamily = poppins
                )
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = "Unggah dokumen rancangan yang sudah direvisi untuk melanjutkan pengajuan CSR perusahaan anda",
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Medium,
                    fontFamily = poppins
                )
                Spacer(modifier = Modifier.height(24.dp))
                Text(
                    text = "Revisi Proposal Rancangan",
                    fontSize = 14.sp,
                    fontWeight = FontWeight.SemiBold,
                    fontFamily = poppins,
                    modifier = Modifier.align(Alignment.Start)
                )
                Spacer(modifier = Modifier.height(8.dp))
                OutlinedCard(
                    modifier = Modifier
                        .fillMaxWidth()
                        .clickable(enabled = fileName.isEmpty()) {
                            fileName = "Proposal Rancangan.pdf"
                        }
                        .padding(vertical = 4.dp),
                    shape = RoundedCornerShape(10.dp),
                    border = BorderStroke(1.dp, Color.Gray)
                ) {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        horizontalArrangement = Arrangement.Start,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            painter = painterResource(id = if (fileName.isEmpty()) R.drawable.ic_upload else R.drawable.ic_doc),
                            contentDescription = "Upload",
                            modifier = Modifier.size(20.dp),
                            tint = Color.Gray
                        )
                        Spacer(modifier = Modifier.width(10.dp))
                        Text(
                            text = if (fileName.isEmpty()) "Proposal Rancangan" else fileName,
                            color = if (fileName.isEmpty()) Color.Gray else Color.Black,
                            fontFamily = poppins,
                            fontSize = 14.sp,
                            maxLines = 1
                        )
                        if (fileName.isNotEmpty()) {
                            Spacer(modifier = Modifier.weight(1f))
                            IconButton(
                                onClick = { fileName = "" },
                                modifier = Modifier.size(20.dp)
                            ) {
                                Icon(
                                    painter = painterResource(id = R.drawable.ic_close),
                                    contentDescription = "Hapus File",
                                    tint = Color(0xFFE74C3C),
                                    modifier = Modifier.size(20.dp)
                                )
                            }
                        }
                    }
                }
                Text(
                    "Format file: PDF (max 10MB)",
                    fontSize = 12.sp,
                    color = Color.Gray,
                    modifier = Modifier.padding(top = 4.dp),
                    fontFamily = poppins
                )
            }
            // Tombol Upload Revisi sticky di bawah
            Box(
                modifier = Modifier
                    .align(Alignment.BottomCenter)
                    .fillMaxWidth()
                    .padding(16.dp)
            ) {
                Button(
                    onClick = {
                        isUploading = true
                        onUpload(fileName)
                        showSuccessDialog = true
                    },
                    enabled = fileName.isNotEmpty() && !isUploading,
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(8.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF2C3E1F)
                    )
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.Center
                    ) {
                        Icon(
                            painter = painterResource(id = R.drawable.ic_upload),
                            contentDescription = "Upload",
                            modifier = Modifier.size(18.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            "Upload Revisi",
                            fontFamily = poppins,
                            fontWeight = FontWeight.SemiBold,
                            fontSize = 14.sp
                        )
                    }
                }
            }
        }
    }

    if (showSuccessDialog) {
        SuccessDialog(
            message = "Berhasil mengunggah revisi",
            onDismiss = { 
                showSuccessDialog = false
                onBack()
            }
        )
    }
}

@Preview(showBackground = true, showSystemUi = true)
@Composable
fun PreviewUploadRevisiScreen() {
    val navController = rememberNavController()
    UploadRevisiScreen(
        navController = navController,
        onBack = {},
        onUpload = {}
    )
}


================================================================================

FILE 137: app\src\main\java\com\example\tumbuhnyata\ui\riwayat\verticalTimeline.kt
Lines: 107 | Size: 4045 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.riwayat


import androidx.compose.foundation.Canvas
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Icon
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Check
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.PaintingStyle
import androidx.compose.ui.graphics.StrokeCap
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.ui.component.poppins

@Composable
fun VerticalTimeline(
    steps: List<TimelineStep>
) {
    Column {
        steps.forEachIndexed { index, step ->
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.padding(vertical = 8.dp)
            ) {
                // Circle/Icon
                Box(
                    modifier = Modifier.size(24.dp),
                    contentAlignment = Alignment.Center
                ) {
                    if (step.isCompleted) {
                        Icon(
                            Icons.Filled.Check,
                            contentDescription = "Completed",
                            tint = Color(0xFF2C3E1F),
                            modifier = Modifier.size(16.dp)
                        )
                    } else if (step.isInProgress) {
                        Canvas(modifier = Modifier.size(16.dp)) {
                            drawCircle(color = Color(0xFF2C3E1F), radius = size.minDimension / 2)
                        }
                    } else {
                        Canvas(modifier = Modifier.size(16.dp)) {
                            drawCircle(
                                color = Color.LightGray,
                                style = Stroke(width = 2f)
                            )
                        }
                    }
                }
                Spacer(modifier = Modifier.width(16.dp))

                // Text and Date
                Column {
                    Text(step.title, fontWeight = androidx.compose.ui.text.font.FontWeight.SemiBold, fontFamily = poppins)
                    if (step.date.isNotEmpty()) {
                        Text(step.date, color = Color.Gray, fontSize = 12.sp, fontFamily = poppins)
                    }
                }

                // Vertical Line
                if (index < steps.size - 1) {
                    Spacer(modifier = Modifier.width(8.dp))
                    Canvas(
                        modifier = Modifier
                            .fillMaxHeight()
                            .width(2.dp)
                            .padding(start = 11.dp) // Sesuaikan posisi garis
                    ) {
                        drawLine(
                            color = Color.LightGray,
                            start = androidx.compose.ui.geometry.Offset(0f, 0f),
                            end = androidx.compose.ui.geometry.Offset(0f, size.height),
                            strokeWidth = 2f,
                            cap = StrokeCap.Round
                        )
                    }
                }
            }
        }
    }
}

data class TimelineStep(
    val title: String,
    val date: String = "",
    val isCompleted: Boolean = false,
    val isInProgress: Boolean = false
)

@Preview(showBackground = true)
@Composable
fun PreviewVerticalTimeline() {
    val timelineSteps = listOf(
        TimelineStep("Pengajuan Dikirim", "10/05/2024 - 09:41 WIB", isCompleted = true),
        TimelineStep("Review & Evaluasi", "10/05/2024 - 09:50 WIB", isInProgress = true),
        TimelineStep("Pembayaran", "10/05/2024 - 10:00 WIB"),
        TimelineStep("Implementasi Program")
    )
    VerticalTimeline(steps = timelineSteps)
}

================================================================================

FILE 138: app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\OnboardingScreen.kt
Lines: 127 | Size: 4788 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.splashscreen

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun OnboardingScreen1(navController: NavController) {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        // Background
        Image(
            painter = painterResource(id = R.drawable.bg_onboarding),
            contentDescription = "Background Onboarding",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        Column(
            modifier = Modifier.fillMaxSize(),
            verticalArrangement = Arrangement.SpaceBetween,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.height(50.dp))

            Box(
                modifier = Modifier.fillMaxWidth(),
                contentAlignment = Alignment.TopCenter
            ) {
                Image(
                    painter = painterResource(id = R.drawable.onboarding_1),
                    contentDescription = "Onboarding Image 1",
                    modifier = Modifier.size(198.54.dp, 294.93.dp)
                )
            }

            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = Modifier.padding(36.dp)
            ) {
                Text(
                    text = "Kelola Program CSR dengan Mudah",
                    fontSize = 25.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.ExtraBold,
                    textAlign = TextAlign.Center,
                    color = Color.White
                )
                Text(
                    text = "Rancang, kelola, dan pantau inisiatif CSR perusahaan Anda dalam satu platform terpadu",
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    color = Color.White,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.padding(top = 31.dp)
                )
            }

            // Navigation Controls
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(30.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "Lewati",
                    fontSize = 17.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.SemiBold,
                    color = Color.White,
                    modifier = Modifier.clickable { navController.navigate("option") }
                )

                Row {
                    Box(
                        modifier = Modifier
                            .width(29.dp)
                            .height(8.dp)
                            .background(Color(0xFFE6FD4B), shape = CircleShape)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Box(
                        modifier = Modifier
                            .size(8.dp)
                            .background(Color.White, shape = CircleShape)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Box(
                        modifier = Modifier
                            .size(8.dp)
                            .background(Color.White, shape = CircleShape)
                    )
                }

                Icon(
                    painter = painterResource(id = R.drawable.arrow_right),
                    contentDescription = "Next",
                    tint = Color.White,
                    modifier = Modifier
                        .size(33.61.dp, 21.dp)
                        .clickable { navController.navigate("onboarding2") }
                )
            }
        }
    }
}

================================================================================

FILE 139: app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\OnboardingScreen2.kt
Lines: 127 | Size: 4799 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.splashscreen

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun OnboardingScreen2(navController: NavController) {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        // Background
        Image(
            painter = painterResource(id = R.drawable.bg_onboarding),
            contentDescription = "Background Onboarding",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        Column(
            modifier = Modifier.fillMaxSize(),
            verticalArrangement = Arrangement.SpaceBetween,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.height(50.dp))

            Box(
                modifier = Modifier.fillMaxWidth(),
                contentAlignment = Alignment.TopCenter
            ) {
                Image(
                    painter = painterResource(id = R.drawable.onboarding_2),
                    contentDescription = "Onboarding Image 2",
                    modifier = Modifier.size(254.67.dp, 230.94.dp)
                )
            }

            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = Modifier.padding(36.dp)
            ) {
                Text(
                    text = "Transparansi dan Akuntabilitas",
                    fontSize = 25.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.ExtraBold,
                    textAlign = TextAlign.Center,
                    color = Color.White
                )
                Text(
                    text = "Lacak penggunaan dana, kelola mitra, dan akses laporan real-time untuk memastikan efektivitas CSR",
                    fontSize = 14.sp,
                    fontFamily = PoppinsFontFamily,
                    color = Color.White,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.padding(top = 31.dp)
                )
            }

            // Navigation Controls
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(30.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "Lewati",
                    fontSize = 17.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.SemiBold,
                    color = Color.White,
                    modifier = Modifier.clickable { navController.navigate("option") }
                )

                Row {
                    Box(
                        modifier = Modifier
                            .size(8.dp)
                            .background(Color.White, shape = CircleShape)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Box(
                        modifier = Modifier
                            .width(29.dp)
                            .height(8.dp)
                            .background(Color(0xFFE6FD4B), shape = CircleShape)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Box(
                        modifier = Modifier
                            .size(8.dp)
                            .background(Color.White, shape = CircleShape)
                    )
                }

                Icon(
                    painter = painterResource(id = R.drawable.arrow_right),
                    contentDescription = "Next",
                    tint = Color.White,
                    modifier = Modifier
                        .size(33.61.dp, 21.dp)
                        .clickable { navController.navigate("onboarding3") }
                )
            }
        }
    }
}

================================================================================

FILE 140: app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\OnboardingScreen3.kt
Lines: 132 | Size: 4937 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.splashscreen

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun OnboardingScreen3(navController: NavController) {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        // Background
        Image(
            painter = painterResource(id = R.drawable.bg_onboarding),
            contentDescription = "Background Onboarding",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        Column(
            modifier = Modifier.fillMaxSize(),
            verticalArrangement = Arrangement.SpaceBetween,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.height(50.dp))

            Box(
                modifier = Modifier.fillMaxWidth(),
                contentAlignment = Alignment.TopCenter
            ) {
                Image(
                    painter = painterResource(id = R.drawable.onboarding_3),
                    contentDescription = "Onboarding Image 3",
                    modifier = Modifier.size(254.67.dp, 230.94.dp)
                )
            }

            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = Modifier.padding(36.dp)
            ) {
                Text(
                    text = "Bangun Dampak yang Berkelanjutan",
                    fontSize = 25.sp,
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.ExtraBold,
                    textAlign = TextAlign.Center,
                    color = Color.White
                )
                Text(
                    text = "Hubungkan perusahaan Anda dengan komunitas yang tepat dan wujudkan perubahan positif yang nyata",
                    fontSize = 14.sp,
                    color = Color.White,
                    fontFamily = PoppinsFontFamily,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.padding(top = 31.dp)
                )
            }

            // Navigation Controls
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(30.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Icon(
                    painter = painterResource(id = R.drawable.arrow_left),
                    contentDescription = "Back",
                    tint = Color.White,
                    modifier = Modifier
                        .size(33.61.dp, 21.dp)
                        .clickable { navController.navigate("onboarding2") }
                )

                Row {
                    Box(
                        modifier = Modifier
                            .size(8.dp)
                            .background(Color.White, shape = CircleShape)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Box(
                        modifier = Modifier
                            .size(8.dp)
                            .background(Color.White, shape = CircleShape)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Box(
                        modifier = Modifier
                            .width(29.dp)
                            .height(8.dp)
                            .background(Color(0xFFE6FD4B), shape = CircleShape)
                    )
                }

                Icon(
                    painter = painterResource(id = R.drawable.arrow_right),
                    contentDescription = "Next",
                    tint = Color.White,
                    modifier = Modifier
                        .size(33.61.dp, 21.dp)
                        .clickable { navController.navigate("option") }
                )
//
//                Text(
//                    text = "     ",
//                    fontSize = 17.sp
//                )
            }
        }
    }
}

================================================================================

FILE 141: app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\OptionScreen.kt
Lines: 136 | Size: 4438 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.splashscreen

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun OptionScreen(navController: NavController) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(20.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Spacer(modifier = Modifier.height(50.dp))

        Image(
            painter = painterResource(id = R.drawable.illustration),
            contentDescription = "Illustration",
            modifier = Modifier
                .fillMaxWidth()
                .height(264.dp)
        )

        Spacer(modifier = Modifier.height(50.dp))

        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Image(
                painter = painterResource(id = R.drawable.logo_hitam),
                contentDescription = "Logo Hitam",
                modifier = Modifier.size(98.dp, 30.dp)
            )
        }

        Spacer(modifier = Modifier.height(30.dp))

        Text(
            text = "Selamat Datang di Tumbuh Nyata!",
            fontSize = 30.sp,
            fontFamily = PoppinsFontFamily,
            textAlign = TextAlign.Left,
            fontWeight = FontWeight.ExtraBold,
            color = Color(0xFF1E1E1E)
        )

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Masuk ke akun Anda dan kelola program CSR dengan mudah, transparan, dan terukur serta wujudkan dampak sosial yang nyata",
            fontSize = 14.sp,
            fontFamily = PoppinsFontFamily,
            textAlign = TextAlign.Justify,
            color = Color(0xFF4B4B4B)
        )

        Spacer(modifier = Modifier.height(32.dp))

        Button(
            onClick = { navController.navigate("login") },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            shape = RoundedCornerShape(10.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF27361F))
        ) {
            Text(
                text = "Masuk",
                color = Color.White,
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        OutlinedButton(
            onClick = { navController.navigate("register") },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            shape = RoundedCornerShape(10.dp)
        ) {
            Text(
                text = "Daftar",
                color = Color.Black,
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold
            )
        }

        Spacer(modifier = Modifier.height(110.dp))

        Text(
            text = "Dengan melakukan login atau registrasi, Anda menyetujui ",
            fontSize = 12.sp,
            fontFamily = PoppinsFontFamily,
            textAlign = TextAlign.Justify,
            color = Color(0xFF4B4B4B)
        )
        Row {
            Text(
                text = "Syarat & Ketentuan",
                fontSize = 12.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF4B4B4B)
            )
            Text(text = " serta ", fontSize = 12.sp, fontFamily = PoppinsFontFamily, color = Color(0xFF4B4B4B))
            Text(
                text = "Kebijakan Privasi",
                fontSize = 12.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF4B4B4B)
            )
        }
    }
}


================================================================================

FILE 142: app\src\main\java\com\example\tumbuhnyata\ui\splashscreen\SplashScreen.kt
Lines: 75 | Size: 2491 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.splashscreen

import androidx.compose.animation.core.*
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.runtime.*
import androidx.compose.ui.*
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.scale
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.util.TokenManager
import kotlinx.coroutines.delay
import androidx.compose.ui.platform.LocalContext

@Composable
fun SplashScreen(navController: NavController) {
    var isVisible by remember { mutableStateOf(false) }
    val context = LocalContext.current

    // Animasi scale in dari kecil ke besar
    val scale by animateFloatAsState(
        targetValue = if (isVisible) 1f else 0.5f,
        animationSpec = tween(durationMillis = 1200, easing = EaseOutCubic)
    )

    // Animasi fade in bersamaan dengan scale
    val alpha by animateFloatAsState(
        targetValue = if (isVisible) 1f else 0f,
        animationSpec = tween(durationMillis = 1000, easing = EaseInOutQuad)
    )

    // Menjalankan animasi saat pertama kali muncul
    LaunchedEffect(Unit) {
        isVisible = true
        delay(3000)
        val token = TokenManager.getToken(context)
        if (token.isNullOrEmpty()) {
            navController.navigate("login") {
                popUpTo("splash") { inclusive = true }
            }
        } else {
            navController.navigate("onboarding") {
                popUpTo("splash") { inclusive = true }
            }
        }
    }

    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        // Background
        Image(
            painter = painterResource(id = R.drawable.background_sc),
            contentDescription = "Background",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        // Logo dengan animasi dari dalam keluar
        Image(
            painter = painterResource(id = R.drawable.logo_splash),
            contentDescription = "Logo",
            modifier = Modifier
                .size(254.7184.dp, 79.dp)
                .scale(scale) // Efek dari dalam keluar
                .alpha(alpha), // Efek fade in
            contentScale = ContentScale.Fit
        )
    }
}

================================================================================

FILE 143: app\src\main\java\com\example\tumbuhnyata\ui\theme\Color.kt
Lines: 15 | Size: 416 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.theme

import androidx.compose.ui.graphics.Color

// Define your custom colors here
val FoundationWhite = Color(0xFFF8F8F8) // White-500

// You can add other theme colors below
val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260) 

================================================================================

FILE 144: app\src\main\java\com\example\tumbuhnyata\ui\theme\Theme.kt
Lines: 29 | Size: 820 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.theme

import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color

private val DarkColorScheme = darkColorScheme(
    primary = androidx.compose.ui.graphics.Color(0xFF6200EA),
    surface = Color.Black
)

private val LightColorScheme = lightColorScheme(
    primary = androidx.compose.ui.graphics.Color(0xFF6200EA),
    surface = FoundationWhite
)

@Composable
fun TumbuhNyataTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    content: @Composable () -> Unit
) {
    val colors = if (darkTheme) DarkColorScheme else LightColorScheme
    MaterialTheme(
        colorScheme = colors,
        typography = TumbuhNyataTypography,
        content = content
    )
}


================================================================================

FILE 145: app\src\main\java\com\example\tumbuhnyata\ui\theme\Typography.kt
Lines: 59 | Size: 2032 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.unit.sp
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontStyle
import androidx.compose.ui.text.font.FontWeight
import com.example.tumbuhnyata.R

val PoppinsFontFamily = FontFamily(
    Font(R.font.poppins_thin, FontWeight.Thin),
    Font(R.font.poppins_thinitalic, FontWeight.Thin, FontStyle.Italic),

    Font(R.font.poppins_extralight, FontWeight.ExtraLight),
    Font(R.font.poppins_extralightitalic, FontWeight.ExtraLight, FontStyle.Italic),

    Font(R.font.poppins_light, FontWeight.Light),
    Font(R.font.poppins_lightitalic, FontWeight.Light, FontStyle.Italic),

    Font(R.font.poppins_regular, FontWeight.Normal),
    Font(R.font.poppins_italic, FontWeight.Normal, FontStyle.Italic),

    Font(R.font.poppins_medium, FontWeight.Medium),
    Font(R.font.poppins_mediumitalic, FontWeight.Medium, FontStyle.Italic),

    Font(R.font.poppins_semibold, FontWeight.SemiBold),
    Font(R.font.poppins_semibolditalic, FontWeight.SemiBold, FontStyle.Italic),

    Font(R.font.poppins_bold, FontWeight.Bold),
    Font(R.font.poppins_bolditalic, FontWeight.Bold, FontStyle.Italic),

    Font(R.font.poppins_extrabold, FontWeight.ExtraBold),
    Font(R.font.poppins_extrabolditalic, FontWeight.ExtraBold, FontStyle.Italic),

    Font(R.font.poppins_black, FontWeight.Black),
    Font(R.font.poppins_blackitalic, FontWeight.Black, FontStyle.Italic)
)

val TumbuhNyataTypography = Typography(
    bodyLarge = TextStyle(
        fontSize = 16.sp
    ),
    titleLarge = TextStyle(
        fontSize = 22.sp
    ),
    titleMedium = TextStyle(
        fontFamily = PoppinsFontFamily,
        fontWeight = FontWeight.SemiBold,
        fontSize = 18.sp

    ),
    bodyMedium = TextStyle(
        fontFamily = PoppinsFontFamily,
        fontWeight = FontWeight.Normal,
        fontSize = 14.sp
    ),
)

================================================================================

FILE 146: app\src\main\java\com\example\tumbuhnyata\ui\workshop\DaftarWorkshop.kt
Lines: 297 | Size: 10542 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.workshop

import android.util.Log
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.ClickableText
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalUriHandler
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.viewmodel.WorkshopViewModel

@Composable
fun DaftarWorkshop(
    navController: NavController,
    workshopId: String? = null,
    viewModel: WorkshopViewModel
) {
    val uriHandler = LocalUriHandler.current

    val fileSelected by viewModel.fileSelected.collectAsState()
    val fileName by viewModel.fileName.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()
    val errorMessage by viewModel.errorMessage.collectAsState()
    val registerSuccess by viewModel.registerSuccess.collectAsState()
    val profileLoaded by viewModel.profileLoaded.collectAsState()
    val currentWorkshopId by viewModel.workshopId.collectAsState()

    var isChecked by remember { mutableStateOf(false) }

    LaunchedEffect(workshopId) {
        workshopId?.let { id ->
            viewModel.setWorkshopId(id)
            Log.d("DaftarWorkshop", "Workshop ID set: $id")
        }
    }

    LaunchedEffect(registerSuccess) {
        if (registerSuccess) {
            navController.navigate("workshopberhasil")
            viewModel.resetRegistrationSuccess()
        }
    }

    // Clear error when user interacts
    LaunchedEffect(fileSelected, isChecked) {
        if (errorMessage != null) {
            viewModel.clearError()
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .padding(16.dp)
    ) {
        Spacer(modifier = Modifier.height(24.dp))

        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Image(
                painter = painterResource(id = R.drawable.btn_back),
                contentDescription = "Kembali",
                modifier = Modifier
                    .size(32.dp)
                    .clickable { navController.popBackStack() }
            )

            Spacer(modifier = Modifier.width(16.dp))

            Text(
                text = "Daftar Workshop",
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.ExtraBold,
                fontSize = 25.sp,
                color = Color(0xFF1E1E1E)
            )
        }

        Spacer(modifier = Modifier.height(31.dp))

        Text(
            text = "Unggah Dokumen Daftar Karyawan",
            fontFamily = PoppinsFontFamily,
            color = Color(0xFF1E1E1E),
            fontWeight = FontWeight.Bold,
            fontSize = 21.sp
        )

        Spacer(modifier = Modifier.height(6.dp))

        Text(
            text = "Lakukan unggah dokumen sheet berupa list daftar nama karyawan serta email mereka",
            fontSize = 14.sp,
            fontFamily = PoppinsFontFamily,
            color = Color(0xFF4B4B4B)
        )

        Spacer(modifier = Modifier.height(24.dp))

        // Upload Area
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(131.dp)
                .clip(RoundedCornerShape(14.dp))
                .border(1.dp, Color(0xFFB9B9B9), RoundedCornerShape(14.dp))
                .background(Color.White)
                .clickable {
                    viewModel.selectFile("daftar karyawan.xlsx")
                },
            contentAlignment = Alignment.Center
        ) {
            if (!fileSelected) {
                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                    Image(
                        painter = painterResource(id = R.drawable.lg_upload),
                        contentDescription = "Upload File",
                        modifier = Modifier.size(23.dp, 26.dp)
                    )
                    Spacer(modifier = Modifier.height(12.dp))
                    Text(
                        text = "Pilih file .xlsx, .xls atau .csv",
                        color = Color(0xFF989898),
                        fontFamily = PoppinsFontFamily,
                        fontSize = 12.sp
                    )
                }
            } else {
                Box(modifier = Modifier.fillMaxSize()) {
                    Image(
                        painter = painterResource(id = R.drawable.lg_cancel),
                        contentDescription = "Batalkan File",
                        modifier = Modifier
                            .align(Alignment.TopEnd)
                            .padding(12.dp)
                            .size(16.dp)
                            .clickable {
                                viewModel.removeFile()
                            }
                    )

                    Column(
                        modifier = Modifier.align(Alignment.Center),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Image(
                            painter = painterResource(id = R.drawable.lg_file),
                            contentDescription = "File Terunggah",
                            modifier = Modifier.size(22.dp, 27.dp)
                        )
                        Spacer(modifier = Modifier.height(12.dp))
                        Text(
                            text = fileName,
                            fontSize = 14.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.Medium
                        )
                    }
                }
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        // Link Template
        val annotatedLinkString = buildAnnotatedString {
            append("*Anda dapat mengunduh template dokumen ")

            pushStringAnnotation(
                tag = "URL",
                annotation = "https://docs.google.com/spreadsheets/d/1v97vIrtmJJw5nC7gj7djjOb0oEPIr63rehe53bBlTOg/edit?usp=sharing"
            )
            withStyle(
                style = SpanStyle(
                    fontWeight = FontWeight.Bold,
                    textDecoration = TextDecoration.Underline,
                    color = Color(0xFF4B4B4B)
                )
            ) {
                append("di sini")
            }
            pop()
        }

        ClickableText(
            text = annotatedLinkString,
            onClick = { offset ->
                annotatedLinkString.getStringAnnotations("URL", offset, offset)
                    .firstOrNull()?.let { annotation ->
                        uriHandler.openUri(annotation.item)
                    }
            },
            style = LocalTextStyle.current.copy(
                fontSize = 12.sp,
                fontFamily = PoppinsFontFamily,
                color = Color(0xFF4B4B4B)
            )
        )

        Spacer(modifier = Modifier.height(4.dp))

        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Checkbox(
                checked = isChecked,
                onCheckedChange = { isChecked = it },
                modifier = Modifier.offset(x = (-12).dp)
            )
            Text(
                text = "Saya setuju mengikuti persyaratan pendaftaran Workshop",
                fontSize = 12.sp,
                color = Color.Black,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.Normal,
                modifier = Modifier.offset(x = (-12).dp)
            )
        }

        Spacer(modifier = Modifier.weight(1f))

        // Show profile loading status
        if (!profileLoaded && errorMessage == null) {
            Text(
                text = "Memuat data profil...",
                color = Color.Gray,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier.padding(bottom = 8.dp)
            )
        }

        // Show error message
        errorMessage?.let { error ->
            Text(
                text = error,
                color = Color.Red,
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                modifier = Modifier.padding(bottom = 8.dp)
            )
        }

        Button(
            onClick = {
                Log.d("DaftarWorkshop", "Registration button clicked for workshop ID: $currentWorkshopId")
                viewModel.registerWorkshop()
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(50.dp),
            colors = ButtonDefaults.buttonColors(
                containerColor = if (!isLoading && fileSelected && isChecked && profileLoaded)
                    Color(0xFF27361F) else Color.Gray
            ),
            enabled = !isLoading && fileSelected && isChecked && profileLoaded,
            shape = RoundedCornerShape(10.dp)
        ) {
            Text(
                text = if (isLoading) "Loading..." else "Daftarkan Sekarang",
                color = Color.White,
                fontSize = 17.sp,
                fontFamily = PoppinsFontFamily,
                fontWeight = FontWeight.ExtraBold
            )
        }

        Spacer(modifier = Modifier.height(24.dp))
    }
}

================================================================================

FILE 147: app\src\main\java\com\example\tumbuhnyata\ui\workshop\DeskripsiWorkshopScreen.kt
Lines: 79 | Size: 2825 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.workshop

import android.util.Log
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.DeskripsiWorkshop
import com.example.tumbuhnyata.viewmodel.WorkshopDetailViewModel
import com.example.tumbuhnyata.viewmodel.WorkshopViewModel

@Composable
fun DeskripsiWorkshopScreen(
    navController: NavController,
    workshopId: String,
    viewModelDetail: WorkshopDetailViewModel = viewModel(),
    viewModel: WorkshopViewModel
) {
    LaunchedEffect(workshopId) {
        viewModelDetail.loadWorkshopById(workshopId)
        viewModel.setWorkshopId(workshopId)
        Log.d("DeskripsiWorkshopScreen", "Workshop loaded - ID: $workshopId")
    }

    val workshop by viewModelDetail.selectedWorkshop.collectAsState()

    if (workshop != null) {
        Column(
            modifier = Modifier.fillMaxSize()
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 8.dp)
            ) {
                Spacer(modifier = Modifier.height(24.dp))

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.btn_back),
                        contentDescription = "Kembali",
                        modifier = Modifier
                            .size(32.dp)
                            .clickable { navController.popBackStack() }
                    )

                    Spacer(modifier = Modifier.width(16.dp))

                    Text(
                        text = "Deskripsi Workshop",
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.ExtraBold,
                        fontSize = 25.sp,
                        color = Color(0xFF1E1E1E)
                    )
                }
            }

            DeskripsiWorkshop(
                navController = navController, workshop = workshop!!, workshopId = workshopId
            )
        }
    }
}

================================================================================

FILE 148: app\src\main\java\com\example\tumbuhnyata\ui\workshop\NewWorkshop.kt
Lines: 83 | Size: 3079 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.workshop

import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.model.recentWorkshops
import com.example.tumbuhnyata.ui.components.WorkshopListItem
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun NewWorkshop(navController: NavController) {
    Column(modifier = Modifier.fillMaxSize()) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 8.dp)
        ) {
            Spacer(modifier = Modifier.height(24.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Image(
                    painter = painterResource(id = R.drawable.btn_back),
                    contentDescription = "Kembali",
                    modifier = Modifier
                        .size(32.dp)
                        .clickable { navController.navigate("workshop") }
                )

                Spacer(modifier = Modifier.width(16.dp))

                Text(
                    text = "Workshop Terbaru",
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.ExtraBold,
                    fontSize = 25.sp,
                    color = Color(0xFF1E1E1E)
                )
            }

            Spacer(modifier = Modifier.height(12.dp))

        }

        Column(
            modifier = Modifier
                .verticalScroll(rememberScrollState())
                .padding(horizontal = 16.dp, vertical = 16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            recentWorkshops.forEach { workshop ->
                WorkshopListItem(
                    workshop = workshop,
                    onClick = { navController.navigate("deskripsiworkshop/${workshop.id}") }
                )
            }
        }
    }
}

================================================================================

FILE 149: app\src\main\java\com\example\tumbuhnyata\ui\workshop\RekomWorkshop.kt
Lines: 82 | Size: 2849 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.workshop

import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.model.recommendedWorkshops
import com.example.tumbuhnyata.ui.components.WorkshopListItem
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun RekomWorkshop(navController: NavController) {
    Column(modifier = Modifier.fillMaxSize()) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(start = 16.dp, end = 16.dp, top = 24.dp, bottom = 8.dp)
        ) {
            Spacer(modifier = Modifier.height(24.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Image(
                    painter = painterResource(id = R.drawable.btn_back),
                    contentDescription = "Kembali",
                    modifier = Modifier
                        .size(32.dp)
                        .clickable { navController.navigate("workshop") }
                )

                Spacer(modifier = Modifier.width(16.dp))

                Text(
                    text = "Rekomendasi",
                    fontWeight = FontWeight.ExtraBold,
                    fontFamily = PoppinsFontFamily,
                    fontSize = 25.sp,
                    color = Color(0xFF1E1E1E)
                )
            }

            Spacer(modifier = Modifier.height(12.dp))

        }

        Column(
            modifier = Modifier
                .verticalScroll(rememberScrollState())
                .padding(horizontal = 16.dp, vertical = 16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            recommendedWorkshops.forEach { workshop ->
                WorkshopListItem(
                    workshop = workshop,
                    onClick = { navController.navigate("deskripsiworkshop/${workshop.id}") }
                )
            }
        }
    }
}

@Preview
@Composable
fun PreviewRekomWorkshop() {
    RekomWorkshop(navController = rememberNavController())
}

================================================================================

FILE 150: app\src\main\java\com\example\tumbuhnyata\ui\workshop\RiwayatWorkshop.kt
Lines: 319 | Size: 12977 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.workshop

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.animateContentSize
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.local.entity.OfflineWorkshopRegistration
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.WorkshopViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RiwayatWorkshopScreen(
    navController: NavController,
    viewModel: WorkshopViewModel,
    modifier: Modifier = Modifier
) {
    val hasPendingSync by viewModel.hasPendingSync.collectAsState()
    val syncInProgress by viewModel.syncInProgress.collectAsState()
    val syncMessage by viewModel.syncMessage.collectAsState()
    val workshopHistory by viewModel.workshopHistory.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()

    var isSelectionMode by remember { mutableStateOf(false) }
    val selectedItems = remember { mutableStateMapOf<String, Boolean>() }

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = "Riwayat Workshop",
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        fontSize = 20.sp
                    )
                },
                navigationIcon = {
                    IconButton(onClick = { navController.popBackStack() }) {
                        Image(
                            painter = painterResource(R.drawable.btn_back),
                            contentDescription = "backbutton"
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(containerColor = Color.White)
            )
        },
    ) { padding ->
        Box(
            modifier = modifier
                .fillMaxSize()
                .padding(padding)
                .background(Color.White)
        ) {
            Column(
                modifier = Modifier.fillMaxSize()
            ) {
                if (hasPendingSync) {
                    SyncIndicator(
                        isLoading = syncInProgress,
                        message = syncMessage,
                        onSyncClick = { viewModel.syncRegistrations() }
                    )
                }

                if (workshopHistory.isEmpty()) {
                    Box(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(16.dp),
                        contentAlignment = Alignment.Center
                    ) {
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally,
                            verticalArrangement = Arrangement.Center
                        ) {
                            Image(
                                painter = painterResource(id = R.drawable.ic_unwork),
                                contentDescription = "No Data",
                                modifier = Modifier.size(120.dp)
                            )
                            Spacer(modifier = Modifier.height(16.dp))
                            Text(
                                text = "Belum ada riwayat workshop",
                                fontFamily = PoppinsFontFamily,
                                fontSize = 16.sp,
                                color = Color.Gray
                            )
                        }
                    }
                } else {
                    Button(
                        onClick = {
                            isSelectionMode = !isSelectionMode
                            if (!isSelectionMode) selectedItems.clear()
                        },
                        modifier = Modifier
                            .padding(horizontal = 16.dp, vertical = 8.dp)
                            .fillMaxWidth()
                            .height(50.dp),
                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF27361F)),
                        shape = RoundedCornerShape(10.dp)
                    ) {
                        Text(
                            text = if (isSelectionMode) "Batal Pilih" else "Pilih Workshop",
                            color = Color.White,
                            fontSize = 17.sp,
                            fontFamily = PoppinsFontFamily,
                            fontWeight = FontWeight.ExtraBold
                        )
                    }

                    LazyColumn(
                        modifier = Modifier.weight(1f),
                        contentPadding = PaddingValues(16.dp),
                        verticalArrangement = Arrangement.spacedBy(12.dp)
                    ) {
                        items(workshopHistory) { registration ->
                            val isChecked = selectedItems[registration.id] ?: false

                            Row(
                                verticalAlignment = Alignment.CenterVertically,
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .animateContentSize()
                            ) {
                                AnimatedVisibility(visible = isSelectionMode) {
                                    Checkbox(
                                        checked = isChecked,
                                        onCheckedChange = { checked ->
                                            selectedItems[registration.id] = checked
                                        },
                                        modifier = Modifier.padding(end = 8.dp)
                                    )
                                }

                                WorkshopHistoryCard(
                                    registration = registration,
                                    viewModel = viewModel,
                                    isSelectionMode = isSelectionMode,
                                    isChecked = isChecked,
                                    onCheckedChange = {}
                                )
                            }
                        }
                    }

                    if (isSelectionMode && selectedItems.any { it.value }) {
                        Button(
                            onClick = {
                                val idsToDelete = selectedItems.filter { it.value }.map { it.key }
                                viewModel.deleteRegistrationsByIds(idsToDelete)
                                selectedItems.clear()
                                isSelectionMode = false
                            },
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(16.dp)
                                .height(50.dp),
                            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFDF3737)),
                            shape = RoundedCornerShape(10.dp)
                        ) {
                            Text(
                                "Hapus Workshop (${selectedItems.count { it.value }})",
                                color = Color.White,
                                fontSize = 17.sp,
                                fontFamily = PoppinsFontFamily,
                                fontWeight = FontWeight.ExtraBold
                            )
                        }
                    }
                }
            }

            if (isLoading) {
                CircularProgressIndicator(
                    modifier = Modifier
                        .size(48.dp)
                        .align(Alignment.Center),
                    color = Color(0xFF5A7C47)
                )
            }
        }
    }
}

@Composable
fun WorkshopHistoryCard(
    registration: OfflineWorkshopRegistration,
    viewModel: WorkshopViewModel,
    isSelectionMode: Boolean,
    isChecked: Boolean,
    onCheckedChange: (Boolean) -> Unit
) {
    val workshop = viewModel.getWorkshopById(registration.workshopId)

    Card(
        modifier = Modifier
            .fillMaxWidth()
            .height(155.dp)
            .border(
                width = 1.dp,
                color = Color(0xFFE2E2E2),
                shape = RoundedCornerShape(10.dp)
            ),
        shape = RoundedCornerShape(10.dp),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White)
    ) {
        Row(
            modifier = Modifier
                .fillMaxSize()
                .padding(end = 12.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Image(
                painter = painterResource(id = workshop?.imageRes ?: R.drawable.work1),
                contentDescription = "Workshop image",
                contentScale = ContentScale.Crop,
                modifier = Modifier
                    .width(140.dp)
                    .fillMaxHeight()
            )

            Spacer(modifier = Modifier.width(12.dp))

            Column(
                modifier = Modifier
                    .weight(1f)
                    .padding(vertical = 12.dp)
            ) {
                Text(
                    text = workshop?.title ?: "Workshop tidak ditemukan",
                    fontFamily = PoppinsFontFamily,
                    fontWeight = FontWeight.Bold,
                    fontSize = 16.sp,
                    color = Color(0xFF1E1E1E)
                )

                Spacer(modifier = Modifier.height(4.dp))

                Text(
                    text = registration.companyName,
                    fontFamily = PoppinsFontFamily,
                    fontSize = 14.sp,
                    color = Color.Gray
                )

                Spacer(modifier = Modifier.height(4.dp))

                Text(
                    text = registration.email,
                    fontFamily = PoppinsFontFamily,
                    fontSize = 14.sp,
                    color = Color.Gray
                )

                Spacer(modifier = Modifier.height(8.dp))

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "Status: ${if (registration.isSynced) "Tersinkronisasi" else "Belum Tersinkronisasi"}",
                        fontFamily = PoppinsFontFamily,
                        fontSize = 12.sp,
                        color = if (registration.isSynced) Color(0xFF4CAF50) else Color(0xFFFFA000)
                    )

                    if (!registration.isSynced) {
                        Surface(
                            modifier = Modifier
                                .background(
                                    brush = Brush.verticalGradient(
                                        colors = listOf(
                                            Color(0xFF5A7C47),
                                            Color(0xFF415A33),
                                            Color(0xFF27361F)
                                        )
                                    ),
                                    shape = RoundedCornerShape(10.dp)
                                ),
                            shape = RoundedCornerShape(10.dp)
                        ) {
                            Text(
                                text = "Pending",
                                modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),
                                color = Color.White,
                                fontSize = 12.sp,
                                fontFamily = PoppinsFontFamily
                            )
                        }
                    }
                }
            }
        }
    }
}

================================================================================

FILE 151: app\src\main\java\com\example\tumbuhnyata\ui\workshop\WorkshopBerhasil.kt
Lines: 109 | Size: 3876 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.workshop

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily

@Composable
fun WorkshopBerhasil(navController: NavController) {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        // Background
        Image(
            painter = painterResource(id = R.drawable.bg_sukses),
            contentDescription = "Background",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(horizontal = 16.dp, vertical = 24.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.weight(1f))

            Image(
                painter = painterResource(id = R.drawable.lg_check),
                contentDescription = "Berhasil Buat Akun",
                modifier = Modifier.size(100.dp)
            )

            Spacer(modifier = Modifier.height(32.dp))

            Text(
                text = "Pendaftaran Workshop Berhasil",
                fontSize = 24.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.ExtraBold
            )

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                text = "Informasi mengenai pembayaran dan event workshop akan dikirim melalui email",
                fontSize = 14.sp,
                fontFamily = PoppinsFontFamily,
                color = Color.White,
                textAlign = TextAlign.Center,
                fontWeight = FontWeight.Medium
            )

            Spacer(modifier = Modifier.weight(1f))

            Button(
                onClick = { navController.navigate("workshop") },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(10.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF151E11))
            ) {
                Text(
                    text = "Kembali ke Beranda",
                    fontFamily = PoppinsFontFamily,
                    color = Color.White,
                    fontSize = 17.sp,
                    fontWeight = FontWeight.ExtraBold
                )
            }
            Spacer(modifier = Modifier.height(32.dp))
        }
    }
}

@Preview
@Composable
fun PreviewWorkshopBerhasil() {
    WorkshopBerhasil(navController = rememberNavController())
}

================================================================================

FILE 152: app\src\main\java\com\example\tumbuhnyata\ui\workshop\WorkshopScreen.kt
Lines: 251 | Size: 9439 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.ui.workshop

import android.util.Log
import android.widget.Toast
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.platform.LocalContext
import androidx.navigation.NavController
import com.example.tumbuhnyata.ui.components.BottomNavigationBar
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.CloudUpload
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.FloatingActionButtonDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Text
import androidx.compose.runtime.collectAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ColorFilter
import androidx.compose.ui.graphics.painter.Painter
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.ui.components.SectionWithTitle
import com.example.tumbuhnyata.ui.components.WorkshopCard
import com.example.tumbuhnyata.ui.components.WorkshopListItem
import com.example.tumbuhnyata.ui.theme.PoppinsFontFamily
import com.example.tumbuhnyata.viewmodel.WorkshopViewModel

@Composable
fun WorkshopScreen(
    navController: NavController,
    viewModel: WorkshopViewModel
) {
    val recommended by viewModel.recommended
    val recent by viewModel.recent
    val hasPendingSync by viewModel.hasPendingSync.collectAsState()
    val syncInProgress by viewModel.syncInProgress.collectAsState()
    val syncMessage by viewModel.syncMessage.collectAsState()
    val context = LocalContext.current

    LaunchedEffect(Unit) {
        viewModel.checkPendingSync()
        // Cek koneksi database
        if (!viewModel.isDatabaseOnline()) {
            Toast.makeText(
                context,
                "Koneksi database terputus. Menggunakan data offline",
                Toast.LENGTH_LONG
            ).show()
        }
    }

    Scaffold(
        bottomBar = { BottomNavigationBar(navController) },
        floatingActionButton = {
            FloatingActionButton(
                onClick = {
                    navController.navigate("riwayatworkshop")
                },
                shape = CircleShape,
                containerColor = Color.Transparent,
                elevation = FloatingActionButtonDefaults.elevation(defaultElevation = 6.dp)
            ) {
                Box(
                    modifier = Modifier
                        .size(56.dp)
                        .background(
                            brush = Brush.verticalGradient(
                                colors = listOf(
                                    Color(0xFF5A7C47),
                                    Color(0xFF415A33),
                                    Color(0xFF27361F)
                                )
                            ),
                            shape = CircleShape
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.ic_unwork),
                        contentDescription = "Riwayat",
                        modifier = Modifier
                            .fillMaxSize(0.5f),
                        contentScale = ContentScale.Fit,
                        colorFilter = ColorFilter.tint(Color.White)
                    )
                }
            }
        },
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .padding(innerPadding)
                .background(androidx.compose.ui.graphics.Color.White)
                .verticalScroll(rememberScrollState())
        ) {
            if (hasPendingSync) {
                SyncIndicator(
                    isLoading = syncInProgress,
                    message = syncMessage,
                    onSyncClick = { viewModel.syncRegistrations() }
                )
            }

            SectionWithTitle(
                title = "Rekomendasi",
                onSeeAllClick = { navController.navigate("rekomendasiworkshop") }
            )
            LazyRow(
                contentPadding = PaddingValues(horizontal = 16.dp),
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                items(recommended) { workshop ->
                    WorkshopCard(workshop = workshop) {
                        viewModel.setWorkshopId(workshop.id)
                        Log.d("WorkshopScreen", "Recomend workshop clicked - ID: ${workshop.id}, Title: ${workshop.title}")
                        navController.navigate("deskripsiworkshop/${workshop.id}")
                    }
                }
            }

            Spacer(modifier = Modifier.height(24.dp))

            SectionWithTitle(
                title = "Terbaru",
                onSeeAllClick = {
                    navController.navigate("workshopterbaru")
                }
            )
            Column(
                verticalArrangement = Arrangement.spacedBy(12.dp),
                modifier = Modifier.padding(horizontal = 16.dp)
            ) {
                recent.forEach { workshop ->
                    WorkshopListItem(
                        workshop = workshop,
                        onClick = {
                            viewModel.setWorkshopId(workshop.id)
                            navController.navigate("deskripsiworkshop/${workshop.id}")
                        }
                    )
                }
            }
        }
    }
}

@Composable
fun SyncIndicator(
    isLoading: Boolean,
    message: String?,
    onSyncClick: () -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp),
        shape = RoundedCornerShape(12.dp),
        elevation = CardDefaults.cardElevation(
            defaultElevation = 4.dp
        )
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(
                    Brush.verticalGradient(
                        colors = listOf(
                            Color(0xFF5A7C47),
                            Color(0xFF415A33),
                            Color(0xFF27361F)
                        )
                    )
                )
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column(
                    modifier = Modifier.weight(1f)
                ) {
                    Text(
                        text = "Pendaftaran Offline",
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Bold,
                        fontSize = 20.sp,
                        color = Color.White
                    )
                    Text(
                        text = message ?: "Ada pendaftaran yang belum disinkronkan",
                        fontFamily = PoppinsFontFamily,
                        fontWeight = FontWeight.Medium,
                        fontSize = 16.sp,
                        color = Color.White.copy(alpha = 0.9f)
                    )
                }

                if (isLoading) {
                    CircularProgressIndicator(
                        modifier = Modifier.size(24.dp),
                        strokeWidth = 2.dp,
                        color = Color.White
                    )
                } else {
                    IconButton(
                        onClick = onSyncClick,
                        modifier = Modifier
                            .background(
                                color = Color.White.copy(alpha = 0.2f),
                                shape = CircleShape
                            )
                            .size(40.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Default.CloudUpload,
                            contentDescription = "Sync",
                            tint = Color.White,
                            modifier = Modifier.size(24.dp)
                        )
                    }
                }
            }
        }
    }
}


================================================================================

FILE 153: app\src\main\java\com\example\tumbuhnyata\util\NetworkConnectivityUtil.kt
Lines: 55 | Size: 2339 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.util

import android.content.Context
import android.net.ConnectivityManager
import android.net.NetworkCapabilities
import android.os.Build

object NetworkConnectivityUtil {
    
    /**
     * Checks if device is currently online (has internet connection)
     */
    fun isOnline(context: Context): Boolean {
        val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
        
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            val network = connectivityManager.activeNetwork ?: return false
            val networkCapabilities = connectivityManager.getNetworkCapabilities(network) ?: return false
            
            when {
                networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) -> true
                networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) -> true
                networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET) -> true
                else -> false
            }
        } else {
            @Suppress("DEPRECATION")
            val networkInfo = connectivityManager.activeNetworkInfo
            networkInfo?.isConnectedOrConnecting == true
        }
    }
    
    /**
     * Gets network type as string for logging purposes
     */
    fun getNetworkType(context: Context): String {
        val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
        
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            val network = connectivityManager.activeNetwork ?: return "None"
            val networkCapabilities = connectivityManager.getNetworkCapabilities(network) ?: return "None"
            
            when {
                networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) -> "WiFi"
                networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) -> "Cellular"
                networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET) -> "Ethernet"
                else -> "Unknown"
            }
        } else {
            @Suppress("DEPRECATION")
            val networkInfo = connectivityManager.activeNetworkInfo
            networkInfo?.typeName ?: "None"
        }
    }
} 

================================================================================

FILE 154: app\src\main\java\com\example\tumbuhnyata\util\NetworkUtils.kt
Lines: 26 | Size: 1068 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.util

import android.content.Context
import android.net.ConnectivityManager
import android.net.NetworkCapabilities
import android.os.Build

object NetworkUtils {
    
    fun isNetworkAvailable(context: Context): Boolean {
        val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
        
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            val network = connectivityManager.activeNetwork ?: return false
            val capabilities = connectivityManager.getNetworkCapabilities(network) ?: return false
            
            capabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) ||
            capabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) ||
            capabilities.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET)
        } else {
            @Suppress("DEPRECATION")
            val networkInfo = connectivityManager.activeNetworkInfo
            networkInfo != null && networkInfo.isConnected
        }
    }
} 

================================================================================

FILE 155: app\src\main\java\com\example\tumbuhnyata\util\TokenManager.kt
Lines: 29 | Size: 836 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.util

import android.content.Context
import android.content.SharedPreferences

object TokenManager {
    private const val PREFS_NAME = "auth_prefs"
    private const val TOKEN_KEY = "auth_token"

    private fun getPreferences(context: Context): SharedPreferences {
        return context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
    }

    fun saveToken(context: Context, token: String) {
        val editor = getPreferences(context).edit()
        editor.putString(TOKEN_KEY, token)
        editor.apply()
    }

    fun getToken(context: Context): String? {
        return getPreferences(context).getString(TOKEN_KEY, null)
    }

    fun clearToken(context: Context) {
        val editor = getPreferences(context).edit()
        editor.remove(TOKEN_KEY)
        editor.apply()
    }
} 

================================================================================

FILE 156: app\src\main\java\com\example\tumbuhnyata\util\UserSessionManager.kt
Lines: 33 | Size: 987 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.util

import android.content.Context
import android.content.SharedPreferences

object UserSessionManager {
    private const val PREFS_NAME = "user_session_prefs"
    private const val USER_ID_KEY = "user_id"

    private fun getPreferences(context: Context): SharedPreferences {
        return context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
    }

    fun saveUserId(context: Context, userId: Int) {
        val editor = getPreferences(context).edit()
        editor.putInt(USER_ID_KEY, userId)
        editor.apply()
    }

    fun getUserId(context: Context): Int {
        return getPreferences(context).getInt(USER_ID_KEY, 1) // default 1 jika tidak ada
    }

    fun clearUserId(context: Context) {
        val editor = getPreferences(context).edit()
        editor.remove(USER_ID_KEY)
        editor.apply()
    }

    fun hasUserId(context: Context): Boolean {
        return getPreferences(context).contains(USER_ID_KEY)
    }
} 

================================================================================

FILE 157: app\src\main\java\com\example\tumbuhnyata\viewmodel\AjukanSertifikasiViewModel.kt
Lines: 160 | Size: 6108 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.repository.CertificationRepository
import com.example.tumbuhnyata.data.repository.CertificationResource
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

data class CertificationSubmissionForm(
    val name: String = "",
    val description: String = "",
    val credentialBody: String = "",
    val benefits: String = "",
    val cost: String = "",
    val supportingDocuments: List<String> = emptyList()
)

data class AjukanSertifikasiState(
    val isLoading: Boolean = false,
    val error: String? = null,
    val isSubmitting: Boolean = false,
    val submissionSuccess: Boolean = false,
    val submissionMessage: String? = null,
    val form: CertificationSubmissionForm = CertificationSubmissionForm()
)

class AjukanSertifikasiViewModel(
    private val certificationRepository: CertificationRepository
) : ViewModel() {
    private val _state = MutableStateFlow(AjukanSertifikasiState())
    val state: StateFlow<AjukanSertifikasiState> = _state.asStateFlow()

    fun updateFormField(field: String, value: String) {
        val currentForm = _state.value.form
        val updatedForm = when (field) {
            "name" -> currentForm.copy(name = value)
            "description" -> currentForm.copy(description = value)
            "credentialBody" -> currentForm.copy(credentialBody = value)
            "benefits" -> currentForm.copy(benefits = value)
            "cost" -> currentForm.copy(cost = value)
            else -> currentForm
        }
        _state.value = _state.value.copy(form = updatedForm)
    }

    fun addSupportingDocument(document: String) {
        val currentForm = _state.value.form
        val updatedDocuments = currentForm.supportingDocuments + document
        val updatedForm = currentForm.copy(supportingDocuments = updatedDocuments)
        _state.value = _state.value.copy(form = updatedForm)
    }

    fun addSupportingDocument(url: String, name: String) {
        val currentForm = _state.value.form
        val documentEntry = "$url|$name" // Use pipe separator instead of JSON
        val updatedDocuments = currentForm.supportingDocuments + documentEntry
        val updatedForm = currentForm.copy(supportingDocuments = updatedDocuments)
        _state.value = _state.value.copy(form = updatedForm)
    }

    fun clearSupportingDocuments() {
        val currentForm = _state.value.form
        val updatedForm = currentForm.copy(supportingDocuments = emptyList())
        _state.value = _state.value.copy(form = updatedForm)
    }

    fun removeSupportingDocument(index: Int) {
        val currentForm = _state.value.form
        val updatedDocuments = currentForm.supportingDocuments.toMutableList().apply {
            removeAt(index)
        }
        val updatedForm = currentForm.copy(supportingDocuments = updatedDocuments)
        _state.value = _state.value.copy(form = updatedForm)
    }

    fun submitCertification() {
        viewModelScope.launch {
            try {
                val form = _state.value.form
                
                // Validate form
                if (form.name.isBlank() || form.description.isBlank() || 
                    form.credentialBody.isBlank() || form.benefits.isBlank() || 
                    form.cost.isBlank()) {
                    _state.value = _state.value.copy(
                        error = "Please fill all required fields"
                    )
                    return@launch
                }

                val costValue = try {
                    form.cost.toFloat()
                } catch (e: NumberFormatException) {
                    _state.value = _state.value.copy(
                        error = "Invalid cost format"
                    )
                    return@launch
                }

                _state.value = _state.value.copy(
                    isSubmitting = true,
                    error = null
                )

                val result = certificationRepository.submitCertification(
                    name = form.name,
                    description = form.description,
                    credentialBody = form.credentialBody,
                    benefits = form.benefits,
                    cost = costValue,
                    supportingDocuments = form.supportingDocuments
                )

                when (result) {
                    is CertificationResource.Success -> {
                        _state.value = _state.value.copy(
                            isSubmitting = false,
                            submissionSuccess = true,
                            submissionMessage = "Certification application submitted successfully!",
                            form = CertificationSubmissionForm() // Reset form
                        )
                    }
                    is CertificationResource.Error -> {
                        _state.value = _state.value.copy(
                            isSubmitting = false,
                            error = result.message ?: "Failed to submit certification application"
                        )
                    }
                    is CertificationResource.Loading -> {
                        // Already handled by isSubmitting
                    }
                }

            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isSubmitting = false,
                    error = e.message ?: "An unexpected error occurred"
                )
            }
        }
    }

    fun clearError() {
        _state.value = _state.value.copy(error = null)
    }

    fun clearSubmissionStatus() {
        _state.value = _state.value.copy(
            submissionSuccess = false,
            submissionMessage = null
        )
    }

    fun resetForm() {
        _state.value = _state.value.copy(form = CertificationSubmissionForm())
    }
} 

================================================================================

FILE 158: app\src\main\java\com\example\tumbuhnyata\viewmodel\CsrDraftViewModel.kt
Lines: 59 | Size: 2239 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.api.CsrSubmissionRequest
import com.example.tumbuhnyata.data.local.entity.CsrDraftEntity
import com.example.tumbuhnyata.data.repository.CsrDraftRepository
import kotlinx.coroutines.flow.SharingStarted
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.launch


class CsrDraftViewModel(private val repository: CsrDraftRepository) : ViewModel() {

    // Using StateFlow to observe changes in the list of drafts
    val allDrafts: StateFlow<List<CsrDraftEntity>> = repository.allCsrDrafts
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())

    fun insertDraft(csrDraft: CsrDraftEntity) = viewModelScope.launch {
        repository.insertCsrDraft(csrDraft)
    }

    fun updateDraft(csrDraft: CsrDraftEntity) = viewModelScope.launch {
        repository.updateCsrDraft(csrDraft)
    }

    fun deleteDraft(csrDraft: CsrDraftEntity) = viewModelScope.launch {
        repository.deleteCsrDraft(csrDraft)
    }

    suspend fun getDraftById(id: Long): CsrDraftEntity? {
        return repository.getCsrDraftById(id)
    }

    fun submitDraftToApi(csrDraft: CsrDraftEntity, onSuccess: () -> Unit, onError: (String) -> Unit) = viewModelScope.launch {
        val request = CsrSubmissionRequest(
            user_id = csrDraft.userId,
            program_name = csrDraft.programName,
            category = csrDraft.category,
            description = csrDraft.description,
            location = csrDraft.location,
            partner_name = csrDraft.partnerName,
            start_date = csrDraft.startDate,
            end_date = csrDraft.endDate,
            budget = csrDraft.budget,
            agreed = true // Assuming drafts are agreed upon
        )

        val isSuccessful = repository.submitCsrToApi(request)
        if (isSuccessful) {
            // Delete the draft from local storage after successful API submission
            repository.deleteCsrDraft(csrDraft)
            onSuccess()
        } else {
            onError("Submission failed. Please try again.")
        }
    }
} 

================================================================================

FILE 159: app\src\main\java\com\example\tumbuhnyata\viewmodel\CsrSubmissionViewModel.kt
Lines: 91 | Size: 3174 chars
--------------------------------------------------------------------------------
// File: CsrSubmissionViewModel.kt
package com.example.tumbuhnyata.viewmodel

import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.api.CsrApiService
import com.example.tumbuhnyata.data.api.CsrSubmissionRequest
import kotlinx.coroutines.launch
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory


private val retrofit = Retrofit.Builder()
                    .baseUrl("http://10.0.2.2:5000/")
    .addConverterFactory(GsonConverterFactory.create())
    .build()

private val apiService = retrofit.create(CsrApiService::class.java)

class CsrSubmissionViewModel : ViewModel() {
    var programName = mutableStateOf("")
    var category = mutableStateOf("")
    var description = mutableStateOf("")
    var startDate = mutableStateOf("")
    var endDate = mutableStateOf("")
    var location = mutableStateOf("")
    var partnerName = mutableStateOf("")
    var budget = mutableStateOf("")
    var agreed = mutableStateOf(false)

    var isLoading = mutableStateOf(false)
    var isSuccess = mutableStateOf(false)
    var errorMessage = mutableStateOf<String?>(null)

    fun isFormStepOneValid(description: String): Boolean {
        return programName.value.isNotBlank() && category.value.isNotBlank() && description.isNotBlank()
    }

    fun isFormStepTwoValid(): Boolean {
        return location.value.isNotBlank() && startDate.value.isNotBlank() && endDate.value.isNotBlank() && budget.value.isNotBlank()
    }

    fun submitForm(onSuccess: () -> Unit) {
        isLoading.value = true
        viewModelScope.launch {
            try {
                val request = CsrSubmissionRequest(
                    user_id = 1, // TODO: Replace with actual user ID
                    program_name = programName.value,
                    category = category.value,
                    description = description.value,
                    location = location.value,
                    partner_name = partnerName.value,
                    start_date = startDate.value,
                    end_date = endDate.value,
                    budget = budget.value,
                    agreed = agreed.value
                )
                val response = apiService.submitCSR(request)
                
                if (response.isSuccessful) {
                    isSuccess.value = true
                    onSuccess()
                } else {
                    errorMessage.value = response.message() ?: "Gagal membuat pengajuan CSR"
                }
            } catch (e: Exception) {
                errorMessage.value = e.message ?: "Terjadi kesalahan"
            } finally {
                isLoading.value = false
            }
        }
    }

    fun reset() {
        programName.value = ""
        category.value = ""
        description.value = ""
        startDate.value = ""
        endDate.value = ""
        location.value = ""
        partnerName.value = ""
        budget.value = ""
        agreed.value = false
        isLoading.value = false
        isSuccess.value = false
        errorMessage.value = null
    }
}



================================================================================

FILE 160: app\src\main\java\com\example\tumbuhnyata\viewmodel\CsrVerificationViewModel.kt
Lines: 109 | Size: 4730 chars
--------------------------------------------------------------------------------
// File: CsrVerificationViewModel.kt
package com.example.tumbuhnyata.viewmodel

import android.util.Log
import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.api.CsrApiService
import com.example.tumbuhnyata.data.api.CsrSubmissionRequest
import com.example.tumbuhnyata.data.model.CsrData
import com.example.tumbuhnyata.util.UserSessionManager
import com.example.tumbuhnyata.TumbuhNyataApp
import kotlinx.coroutines.launch
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

class CsrVerificationViewModel : ViewModel() {
    var isSubmitting = mutableStateOf(false)
    var submitSuccess = mutableStateOf(false)
    var errorMessage = mutableStateOf<String?>(null)

    private val apiService: CsrApiService = Retrofit.Builder()
                        .baseUrl("http://10.0.2.2:5000/")
        .addConverterFactory(GsonConverterFactory.create())
        .build()
        .create(CsrApiService::class.java)

    fun convertDateToBackendFormat(date: String): String {
        // Handle "DD MMM YYYY" (e.g., "01 May 2025") to "YYYY-MM-DD"
        return try {
            val inputFormat = java.text.SimpleDateFormat("dd MMM yyyy", java.util.Locale.getDefault())
            val outputFormat = java.text.SimpleDateFormat("yyyy-MM-dd", java.util.Locale.getDefault())
            val parsedDate = inputFormat.parse(date)
            outputFormat.format(parsedDate!!)
        } catch (e: Exception) {
            Log.e("CSR_DATE", "Date conversion error: ${e.message}")
            date // fallback, return original if parsing fails
        }
    }

    fun submitCsr(csrData: CsrData, onSuccess: () -> Unit) {
        isSubmitting.value = true
        errorMessage.value = null

        viewModelScope.launch {
            try {
                // Gunakan user ID yang sesungguhnya dari UserSessionManager
                val userId = UserSessionManager.getUserId(TumbuhNyataApp.appContext)
                
                val request = CsrSubmissionRequest(
                    user_id = userId,
                    program_name = csrData.programName,
                    category = csrData.category,
                    description = csrData.description,
                    location = csrData.location,
                    partner_name = csrData.partnerName,
                    start_date = convertDateToBackendFormat(csrData.startDate),
                    end_date = convertDateToBackendFormat(csrData.endDate),
                    budget = csrData.budget.replace(Regex("[^\\d]"), ""),
                    agreed = true
                )

                // Log request untuk debugging
                Log.d("CSR_SUBMIT", "Submitting CSR with data:")
                Log.d("CSR_SUBMIT", "Request: $request")

                val response = apiService.submitCSR(request)

                Log.d("CSR_SUBMIT", "Response code: ${response.code()}")
                Log.d("CSR_SUBMIT", "Response body: ${response.body()}")

                if (response.isSuccessful) {
                    val responseBody = response.body()
                    if (responseBody?.message == "Pengajuan CSR berhasil dibuat") {
                        submitSuccess.value = true
                        Log.d("CSR_SUBMIT", "CSR submission successful")
                        onSuccess()
                    } else {
                        errorMessage.value = responseBody?.message ?: "Verifikasi CSR gagal"
                        Log.e("CSR_SUBMIT", "Unexpected success response: ${responseBody?.message}")
                    }
                } else {
                    // Handle error response
                    val errorBody = response.errorBody()?.string()
                    Log.e("CSR_SUBMIT", "Error response: $errorBody")
                    
                    try {
                        val gson = com.google.gson.Gson()
                        val errorResponse = gson.fromJson(errorBody, ErrorResponse::class.java)
                        errorMessage.value = errorResponse.message ?: "Verifikasi CSR gagal"
                    } catch (e: Exception) {
                        errorMessage.value = "Verifikasi CSR gagal (${response.code()})"
                    }
                }
            } catch (e: Exception) {
                Log.e("CSR_SUBMIT", "Exception during CSR submission", e)
                errorMessage.value = "Terjadi kesalahan: ${e.localizedMessage}"
            } finally {
                isSubmitting.value = false
            }
        }
    }
}

// Data class untuk handling error response
data class ErrorResponse(
    val message: String?,
    val error: String?
)


================================================================================

FILE 161: app\src\main\java\com\example\tumbuhnyata\viewmodel\DashboardKeuanganViewModel.kt
Lines: 14 | Size: 467 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.compose.ui.graphics.Color
import com.example.tumbuhnyata.data.model.CsrCategory

class DashboardKeuanganViewModel : ViewModel() {
    val categories = listOf(
        CsrCategory("Sosial", 1955670825f, Color(0xFF3F51B5)),
        CsrCategory("Lingkungan", 1231779900f, Color(0xFF2196F3))
    )

    val total: Float = categories.sumOf { it.amount.toDouble() }.toFloat()
}


================================================================================

FILE 162: app\src\main\java\com\example\tumbuhnyata\viewmodel\DashboardViewModel.kt
Lines: 221 | Size: 10170 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.R
import com.example.tumbuhnyata.data.api.DashboardApiService
import com.example.tumbuhnyata.data.local.AppDatabase
import com.example.tumbuhnyata.data.repository.DashboardRepository
import com.example.tumbuhnyata.data.repository.Resource
import com.example.tumbuhnyata.data.network.RetrofitInstance
import com.example.tumbuhnyata.di.NetworkModule
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.launch
import kotlinx.coroutines.delay
import java.util.concurrent.atomic.AtomicBoolean

// Data class sesuai struktur KPIItem di DashboardScreen
data class KPIItemState(
    val title: String,
    val topIcon: Int,
    val statusText: String,
    val statusPercentageValue: String,
    val isUp: Boolean,
    val value: String,
    val unit: String,
    val targetValue: String,
    val onClickRoute: String
)

// DashboardState diupdate untuk menyertakan loading dan error state
data class DashboardState(
    val kpiItems: List<KPIItemState> = emptyList(),
    val isLoading: Boolean = false,
    val error: String? = null,
    val syncStatus: String? = null // Added sync status for user feedback
)

class DashboardViewModel(application: Application) : AndroidViewModel(application) {

    private val _uiState = MutableStateFlow(DashboardState(isLoading = true)) // Mulai dengan isLoading = true
    val uiState: StateFlow<DashboardState> = _uiState.asStateFlow()

    private val dashboardRepository: DashboardRepository
    private val profileRepository = NetworkModule.profileRepository
    private val isPeriodicSyncRunning = AtomicBoolean(false)
    private var currentCompanyId: Int? = null

    init {
        // Inisialisasi manual repository (sementara)
        val dashboardApi = RetrofitInstance.dashboardApi // Mengambil instance API dari RetrofitInstance
        val dashboardDao = AppDatabase.getInstance(application).dashboardDao() // Mengambil DAO
        dashboardRepository = DashboardRepository(dashboardApi, dashboardDao, application.applicationContext)
        
        // Load company ID first, then load dashboard
        loadCompanyIdAndDashboard()
        startPeriodicAutoSync() // RE-ENABLING: Endpoints are fixed, safe to re-enable
    }

    private fun loadCompanyIdAndDashboard() {
        viewModelScope.launch {
            try {
                // Get company ID from profile
                val profile = profileRepository.getUserProfile()
                currentCompanyId = profile?.id ?: 1 // Default to 1 if no profile
                println("DashboardViewModel: Using companyId = $currentCompanyId")
                
                // Load dashboard with company ID
                loadDashboardItems(currentCompanyId)
            } catch (e: Exception) {
                println("DashboardViewModel: Failed to load profile, using default companyId = 1")
                currentCompanyId = 1
                loadDashboardItems(currentCompanyId)
            }
        }
    }

    fun loadDashboardItems(companyId: Int? = null, year: Int? = null) { // Tambahkan parameter jika perlu
        viewModelScope.launch {
            // FIXED: Ensure company ID is loaded before API call (same as KPIDetailViewModel)
            val actualCompanyId = companyId ?: run {
                // If currentCompanyId is null, load it synchronously
                if (currentCompanyId == null) {
                    try {
                        val profile = profileRepository.getUserProfile()
                        currentCompanyId = profile?.id ?: 1
                        println("DashboardViewModel: Loaded companyId synchronously = $currentCompanyId")
                    } catch (e: Exception) {
                        println("DashboardViewModel: Failed to load profile synchronously, using default companyId = 1")
                        currentCompanyId = 1
                    }
                }
                currentCompanyId ?: 1
            }
            
            dashboardRepository.getDashboardKpiItems(companyId = actualCompanyId, year = year)
                .collect { resource ->
                    when (resource) {
                        is Resource.Loading -> {
                            _uiState.value = _uiState.value.copy(
                                isLoading = true,
                                // error = null // Opsional: reset error saat loading baru
                            )
                        }
                        is Resource.Success -> {
                            _uiState.value = DashboardState(
                                isLoading = false,
                                kpiItems = resource.data ?: emptyList(),
                                error = null,
                                syncStatus = _uiState.value.syncStatus // Preserve sync status
                            )
                        }
                        is Resource.Error -> {
                            _uiState.value = DashboardState(
                                isLoading = false,
                                // Tetap tampilkan data lama jika ada saat error, atau kosongkan
                                kpiItems = resource.data ?: _uiState.value.kpiItems, // Menampilkan data lama (dari cache) jika ada
                                error = resource.message,
                                syncStatus = _uiState.value.syncStatus // Preserve sync status
                            )
                        }
                    }
                }
        }
    }

    /**
     * Starts periodic auto-sync to upload unsynced data when online
     * FIXED: Proper exception handling to prevent infinite loops
     */
    private fun startPeriodicAutoSync() {
        if (isPeriodicSyncRunning.compareAndSet(false, true)) {
            viewModelScope.launch {
                try {
                    while (isPeriodicSyncRunning.get()) {
                        try {
                            // Sync every 2 minutes when online
                            delay(120_000) // 2 minutes
                            
                            val syncResult = dashboardRepository.syncUnsyncedData()
                            when (syncResult) {
                                is Resource.Success -> {
                                    if (syncResult.data != null && syncResult.data!! > 0) {
                                        _uiState.value = _uiState.value.copy(
                                            syncStatus = "Successfully synced ${syncResult.data} items"
                                        )
                                        println("DashboardViewModel: Periodic sync completed - ${syncResult.data} items synced")
                                    }
                                }
                                is Resource.Error -> {
                                    println("DashboardViewModel: Periodic sync failed: ${syncResult.message}")
                                    // Don't show error to user for background sync failures
                                }
                                is Resource.Loading -> {
                                    println("DashboardViewModel: Periodic sync is loading")
                                }
                            }
                        } catch (e: kotlinx.coroutines.CancellationException) {
                            // Job was cancelled - this is normal when ViewModel is destroyed
                            println("DashboardViewModel: Periodic sync cancelled (normal shutdown)")
                            break // Exit the loop gracefully
                        } catch (e: Exception) {
                            println("DashboardViewModel: Periodic sync exception: ${e.message}")
                            // Wait before retrying to prevent rapid fire
                            delay(30_000) // Wait 30 seconds before retry
                        }
                    }
                } catch (e: kotlinx.coroutines.CancellationException) {
                    // Outer job cancelled
                    println("DashboardViewModel: Periodic sync job cancelled")
                } catch (e: Exception) {
                    println("DashboardViewModel: Critical periodic sync error: ${e.message}")
                } finally {
                    isPeriodicSyncRunning.set(false)
                    println("DashboardViewModel: Periodic sync stopped")
                }
            }
        }
    }

    /**
     * Manual sync trigger for user-initiated sync
     */
    fun triggerManualSync() {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(syncStatus = "Syncing...")
            
            val syncResult = dashboardRepository.syncUnsyncedData()
            when (syncResult) {
                is Resource.Success -> {
                    _uiState.value = _uiState.value.copy(
                        syncStatus = if (syncResult.data != null && syncResult.data!! > 0) {
                            "Successfully synced ${syncResult.data} items"
                        } else {
                            "All data is already synced"
                        }
                    )
                    // Refresh dashboard after manual sync
                    loadDashboardItems()
                }
                is Resource.Error -> {
                    _uiState.value = _uiState.value.copy(
                        syncStatus = "Sync failed: ${syncResult.message}"
                    )
                }
                is Resource.Loading -> {
                    // Keep showing "Syncing..."
                }
            }
        }
    }

    override fun onCleared() {
        super.onCleared()
        isPeriodicSyncRunning.set(false) // Stop background sync when ViewModel is destroyed
    }
} 

================================================================================

FILE 163: app\src\main\java\com\example\tumbuhnyata\viewmodel\DetailRiwayatViewModel.kt
Lines: 116 | Size: 4227 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.model.CsrHistoryItem
import com.example.tumbuhnyata.di.NetworkModule
import com.example.tumbuhnyata.util.UserSessionManager
import com.example.tumbuhnyata.util.NetworkUtils
import com.example.tumbuhnyata.TumbuhNyataApp
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class DetailRiwayatViewModel : ViewModel() {
    private val repository = NetworkModule.csrHistoryRepositoryOffline

    //    state untuk detail csr
    private val _csrDetail = MutableStateFlow<CsrHistoryItem?>(null)
    val csrDetail: StateFlow<CsrHistoryItem?> = _csrDetail

    //    state untuk loading
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading

    //    state untuk menangani eror
    private val _error = MutableStateFlow<String?>(null)
    val error: StateFlow<String?> = _error

    //   state untuk memuat detail
    fun loadCsrDetail(csrId: Int) {
        viewModelScope.launch {
            try {
                _isLoading.value = true
                _error.value = null
                
                // Gunakan user ID yang sesungguhnya dari UserSessionManager
                val userId = UserSessionManager.getUserId(TumbuhNyataApp.appContext)
                
                // Fetch detail from API
                val detail = repository.getCsrHistoryDetail(csrId, userId)
                _csrDetail.value = detail
                
            } catch (e: Exception) {
                _error.value = when {
                    e.message?.contains("timeout", ignoreCase = true) == true -> 
                        "Koneksi timeout. Silakan coba lagi."
                    e.message?.contains("connection", ignoreCase = true) == true -> 
                        "Tidak ada koneksi internet. Periksa koneksi Anda."
                    else -> "Gagal memuat detail CSR: ${e.message}"
                }
            } finally {
                _isLoading.value = false
            }
        }
    }

    fun refresh(csrId: Int) {
        loadCsrDetail(csrId)
    }

    fun validateFile(uri: android.net.Uri, context: android.content.Context): String? {
        // Check file type
        val contentResolver = context.contentResolver
        val mimeType = contentResolver.getType(uri)
        if (mimeType != "application/pdf") {
            return "File harus berformat PDF"
        }

        // Check file size (max 10MB)
        val cursor = contentResolver.query(uri, null, null, null, null)
        cursor?.use {
            val sizeIndex = it.getColumnIndex(android.provider.OpenableColumns.SIZE)
            it.moveToFirst()
            val size = it.getLong(sizeIndex)
            if (size > 10 * 1024 * 1024) { // 10MB in bytes
                return "Ukuran file tidak boleh lebih dari 10MB"
            }
        }

        return null
    }

    fun uploadRevision(uri: android.net.Uri, context: android.content.Context, csrId: Int) {
        viewModelScope.launch {
            try {
                _isLoading.value = true
                _error.value = null

                // Validate file first
                validateFile(uri, context)?.let { error ->
                    _error.value = error
                    return@launch
                }

                // TODO: Implement actual file upload to API
                // repository.uploadRevision(uri, csrId)
                
            } catch (e: Exception) {
                _error.value = when {
                    e.message?.contains("timeout", ignoreCase = true) == true -> 
                        "Koneksi timeout. Silakan coba lagi."
                    e.message?.contains("connection", ignoreCase = true) == true -> 
                        "Tidak ada koneksi internet. Periksa koneksi Anda."
                    else -> "Gagal mengupload file: ${e.message}"
                }
            } finally {
                _isLoading.value = false
            }
        }
    }

    fun clearError() {
        _error.value = null
    }
} 

================================================================================

FILE 164: app\src\main\java\com\example\tumbuhnyata\viewmodel\HomeViewModel.kt
Lines: 140 | Size: 4229 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import com.example.tumbuhnyata.ui.home.StatusType
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow

data class CompanyInfo(
    val name: String = "PT Paragon Corp",
    val address: String = "Kampung Baru, No.1 Jakarta",
    val hasNotifications: Boolean = true
)

data class CSRStatus(
    val completed: Int = 12,
    val inProgress: Int = 4,
    val upcoming: Int = 7
)

data class CSRFund(
    val amount: String = "Rp 2.987.450.725",
    val note: String = "*terhitung dari dana CSR yang telah selesai"
)

data class BadgeInfo(
    val levelBadge: String = "Super Star",
    val emissionReduction: String = "4.250 kg CO₂e"
)

data class Activity(
    val title: String,
    val community: String,
    val status: String,
    val kategori: String,
    val lokasi: String,
    val periode: String,
    val statusType: StatusType
)

data class HomeState(
    val companyInfo: CompanyInfo = CompanyInfo(),
    val csrStatus: CSRStatus = CSRStatus(),
    val csrFund: CSRFund = CSRFund(),
    val badgeInfo: BadgeInfo = BadgeInfo(),
    val activities: List<Activity> = listOf(
        Activity(
            title = "Penanaman 1000 Pohon",
            community = "Komunitas Jaya Hijau",
            status = "Program Selesai",
            kategori = "Lingkungan",
            lokasi = "Jakarta Timur",
            periode = "12 Mar - 20 Jun 24",
            statusType = StatusType.COMPLETED
        ),
        Activity(
            title = "Penghijauan Hutan Kaltim",
            community = "PT Hijau Sejati",
            status = "Mendatang",
            kategori = "Lingkungan",
            lokasi = "Kalimantan",
            periode = "12 Mar - 20 Mar 25",
            statusType = StatusType.UPCOMING
        ),
        Activity(
            title = "Beasiswa Yatim Jabar",
            community = "Pemerintah Prov. Jabar",
            status = "Progress",
            kategori = "Sosial",
            lokasi = "Jawa Barat",
            periode = "6 Mar - 15 Jun 25",
            statusType = StatusType.IN_PROGRESS
        ),
        Activity(
            title = "Donor Darah Paragon 2025",
            community = "RS Bunda Mulia",
            status = "Progress",
            kategori = "Sosial",
            lokasi = "Jakarta Raya",
            periode = "12 Jan - 2 Apr 25",
            statusType = StatusType.IN_PROGRESS
        ),
        Activity(
            title = "Penanaman Mangrove",
            community = "Pemkot Kota Lombok",
            status = "Program Selesai",
            kategori = "Lingkungan",
            lokasi = "Pantai Barat, Lombok",
            periode = "12 Mar - 20 Jun 24",
            statusType = StatusType.COMPLETED
        )
    )
)

class HomeViewModel : ViewModel() {
    private val _homeState = MutableStateFlow(HomeState())
    val homeState: StateFlow<HomeState> = _homeState.asStateFlow()

    fun updateCompanyInfo(name: String, address: String) {
        _homeState.value = _homeState.value.copy(
            companyInfo = _homeState.value.companyInfo.copy(
                name = name,
                address = address
            )
        )
    }

    fun updateCSRStatus(completed: Int, inProgress: Int, upcoming: Int) {
        _homeState.value = _homeState.value.copy(
            csrStatus = CSRStatus(
                completed = completed,
                inProgress = inProgress,
                upcoming = upcoming
            )
        )
    }

    fun updateCSRFund(amount: String) {
        _homeState.value = _homeState.value.copy(
            csrFund = _homeState.value.csrFund.copy(
                amount = amount
            )
        )
    }

    fun updateBadgeInfo(levelBadge: String, emissionReduction: String) {
        _homeState.value = _homeState.value.copy(
            badgeInfo = BadgeInfo(
                levelBadge = levelBadge,
                emissionReduction = emissionReduction
            )
        )
    }

    fun updateActivities(activities: List<Activity>) {
        _homeState.value = _homeState.value.copy(
            activities = activities
        )
    }
} 

================================================================================

FILE 165: app\src\main\java\com\example\tumbuhnyata\viewmodel\NotificationViewModel.kt
Lines: 86 | Size: 3112 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.model.Notification
import com.example.tumbuhnyata.data.repository.NotificationRepository
import com.example.tumbuhnyata.di.NetworkModule
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class NotificationViewModel(
    private val repository: NotificationRepository
) : ViewModel() {

    private val _notifications = MutableStateFlow<List<Notification>>(emptyList())
    val notifications: StateFlow<List<Notification>> = _notifications

    private val _error = MutableStateFlow<String?>(null)
    val error: StateFlow<String?> = _error

    fun getNotifications(userId: String) {
        viewModelScope.launch {
            try {
                val result = repository.getNotifications(userId)
                _notifications.value = result
            } catch (e: Exception) {
                _error.value = "Gagal mengambil notifikasi: ${e.message}"
            }
        }
    }

    fun createNotification(notification: Notification) {
        viewModelScope.launch {
            try {
                repository.createNotification(notification)
                // Refresh notifications after creating new one
                getNotifications(notification.userId)
            } catch (e: Exception) {
                _error.value = "Gagal membuat notifikasi: ${e.message}"
            }
        }
    }

    fun markAsRead(id: Int) {
        viewModelScope.launch {
            try {
                val success = repository.markAsRead(id)
                if (success) {
                    // Update local state - mark notification as read
                    _notifications.value = _notifications.value.map { 
                        if (it.id == id) it.copy(isRead = 1) else it 
                    }
                }
            } catch (e: Exception) {
                _error.value = "Gagal menandai notifikasi: ${e.message}"
            }
        }
    }

    fun deleteNotification(id: Int) {
        viewModelScope.launch {
            try {
                val success = repository.deleteNotification(id)
                if (success) {
                    // Remove notification from local state
                    _notifications.value = _notifications.value.filter { it.id != id }
                }
            } catch (e: Exception) {
                _error.value = "Gagal menghapus notifikasi: ${e.message}"
            }
        }
    }
    
    // Factory pattern untuk membuat ViewModel
    class Factory : ViewModelProvider.Factory {
        @Suppress("UNCHECKED_CAST")
        override fun <T : ViewModel> create(modelClass: Class<T>): T {
            if (modelClass.isAssignableFrom(NotificationViewModel::class.java)) {
                return NotificationViewModel(NetworkModule.notificationRepository) as T
            }
            throw IllegalArgumentException("Unknown ViewModel class")
        }
    }
} 

================================================================================

FILE 166: app\src\main\java\com\example\tumbuhnyata\viewmodel\ProfileViewModel.kt
Lines: 206 | Size: 8027 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.di.NetworkModule
import com.example.tumbuhnyata.util.UserSessionManager
import com.example.tumbuhnyata.TumbuhNyataApp
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

data class ProfileState(
    val companyId: Int? = null, // Added company ID
    val companyName: String = "",
    val companyAddress: String = "",
    val email: String = "",
    val phoneNumber: String = "",
    val nib: String = "",
    val isLoggedIn: Boolean = true,
    val isLoading: Boolean = false,
    val error: String? = null,
    val isUpdated: Boolean = false,
    val isChangingPassword: Boolean = false,
    val isUpdatingProfile: Boolean = false
)

class ProfileViewModel : ViewModel() {
    private val repository = NetworkModule.profileRepository
    private val offlineProfileRepository = NetworkModule.offlineProfileRepository

    private val _profileState = MutableStateFlow(ProfileState(isLoading = true))
    val profileState: StateFlow<ProfileState> = _profileState.asStateFlow()

    // Add missing StateFlow variables for sync functionality
    private val _syncInProgress = MutableStateFlow(false)
    val syncInProgress: StateFlow<Boolean> = _syncInProgress.asStateFlow()

    private val _syncMessage = MutableStateFlow<String?>(null)
    val syncMessage: StateFlow<String?> = _syncMessage.asStateFlow()

    private val _hasPendingProfileSync = MutableStateFlow(false)
    val hasPendingProfileSync: StateFlow<Boolean> = _hasPendingProfileSync.asStateFlow()

    init {
        loadUserProfile()
    }

    private fun loadUserProfile() {
        viewModelScope.launch {
            try {
                _profileState.value = _profileState.value.copy(isLoading = true, error = null)
                val profile = repository.getUserProfile()
                if (profile != null) {
                    // Simpan user ID ke UserSessionManager
                    UserSessionManager.saveUserId(TumbuhNyataApp.appContext, profile.id)
                    
                    _profileState.value = _profileState.value.copy(
                        companyId = profile.id, // Store company ID
                        companyName = profile.companyName,
                        companyAddress = profile.address,
                        email = profile.email,
                        phoneNumber = profile.phoneNumber,
                        nib = profile.nib,
                        isLoading = false
                    )
                } else {
                    _profileState.value = _profileState.value.copy(
                        isLoading = false,
                        error = "Gagal memuat profil"
                    )
                }
            } catch (e: Exception) {
                _profileState.value = _profileState.value.copy(
                    isLoading = false,
                    error = "Terjadi kesalahan saat memuat profil"
                )
            }
        }
    }

    fun logout() {
        // Clear user ID saat logout
        UserSessionManager.clearUserId(TumbuhNyataApp.appContext)
        _profileState.value = _profileState.value.copy(isLoggedIn = false)
    }

    fun refreshProfile() {
        viewModelScope.launch {
            try {
                val profile = repository.getUserProfile()
                if (profile != null) {
                    // Update user ID jika ada perubahan
                    UserSessionManager.saveUserId(TumbuhNyataApp.appContext, profile.id)
                    
                    _profileState.value = _profileState.value.copy(
                        companyName = profile.companyName,
                        companyAddress = profile.address,
                        email = profile.email,
                        phoneNumber = profile.phoneNumber,
                        nib = profile.nib
                    )
                }
            } catch (e: Exception) {
                // Silently fail for refresh
            }
        }
    }

    fun updateProfile(companyName: String, email: String, phoneNumber: String, address: String) {
        viewModelScope.launch {
            try {
                _profileState.value = _profileState.value.copy(isLoading = true, isUpdated = false, isUpdatingProfile = true, error = null)
                val success = repository.updateProfile(companyName, email, phoneNumber, address)
                if (success) {
                    _profileState.value = _profileState.value.copy(
                        companyName = companyName,
                        companyAddress = address,
                        email = email,
                        phoneNumber = phoneNumber,
                        isLoading = false,
                        isUpdated = true,
                        isUpdatingProfile = false
                    )
                    checkPendingProfileSync()
                } else {
                    _profileState.value = _profileState.value.copy(
                        isLoading = false,
                        isUpdatingProfile = false,
                        error = "Gagal memperbarui profil"
                    )
                }
            } catch (e: Exception) {
                _profileState.value = _profileState.value.copy(
                    isLoading = false,
                    isUpdatingProfile = false,
                    error = e.message ?: "Terjadi kesalahan saat memperbarui profil"
                )
            }
        }
    }

    fun resetUpdateState() {
        _profileState.value = _profileState.value.copy(isUpdated = false)
    }

    fun onAppResumed() {
        viewModelScope.launch {
            // Check if we have pending sync and if we're online
            if (_hasPendingProfileSync.value) {
                try {
                    // Try to sync automatically
                    val success = offlineProfileRepository.syncOfflineProfiles()
                    if (success) {
                        _hasPendingProfileSync.value = false
                        _syncMessage.value = "Profil berhasil disinkronkan!"
                        refreshProfile() // Reload profile after successful sync
                    }
                } catch (e: Exception) {
                    // Still offline, keep pending status
                    _hasPendingProfileSync.value = true
                }
            }
        }
    }

    fun checkPendingProfileSync() {
        viewModelScope.launch {
            _hasPendingProfileSync.value = offlineProfileRepository.hasPendingSyncProfile()
        }
    }

    fun clearSyncMessage() {
        _syncMessage.value = null
    }

    fun changePassword(currentPassword: String, newPassword: String) {
        viewModelScope.launch {
            _profileState.value = _profileState.value.copy(
                isChangingPassword = true,
                error = null
            )

            try {
                val success = repository.changePassword(currentPassword, newPassword)
                if (success) {
                    _profileState.value = _profileState.value.copy(
                        isChangingPassword = false,
                        error = null,
                        isUpdated = true // jika ingin trigger navigasi dari LaunchedEffect
                    )
                } else {
                    _profileState.value = _profileState.value.copy(
                        isChangingPassword = false,
                        error = "Gagal mengubah password"
                    )
                }
            } catch (e: Exception) {
                _profileState.value = _profileState.value.copy(
                    isChangingPassword = false,
                    error = e.message ?: "Terjadi kesalahan saat mengubah password"
                )
            }
        }
    }
}

================================================================================

FILE 167: app\src\main\java\com\example\tumbuhnyata\viewmodel\RegisterViewModel.kt
Lines: 138 | Size: 4219 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import com.example.tumbuhnyata.data.model.RegisterRequest
import com.example.tumbuhnyata.data.model.RegisterResponse
import com.example.tumbuhnyata.data.network.RetrofitInstance
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class RegisterViewModel : ViewModel() {
    
    // State for the registration form
    private val _companyName = MutableStateFlow("")
    val companyName: StateFlow<String> = _companyName
    
    private val _email = MutableStateFlow("")
    val email: StateFlow<String> = _email
    
    private val _phoneNumber = MutableStateFlow("")
    val phoneNumber: StateFlow<String> = _phoneNumber
    
    private val _nib = MutableStateFlow("")
    val nib: StateFlow<String> = _nib
    
    private val _address = MutableStateFlow("")
    val address: StateFlow<String> = _address
    
    private val _password = MutableStateFlow("")
    val password: StateFlow<String> = _password
    
    private val _currentStep = MutableStateFlow(1)
    val currentStep: StateFlow<Int> = _currentStep
    
    // UI states
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading
    
    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage
    
    private val _registerSuccess = MutableStateFlow(false)
    val registerSuccess: StateFlow<Boolean> = _registerSuccess
    
    // Update functions
    fun updateCompanyName(value: String) {
        _companyName.value = value
    }
    
    fun updateEmail(value: String) {
        _email.value = value
    }
    
    fun updatePhoneNumber(value: String) {
        _phoneNumber.value = value
    }
    
    fun updateNIB(value: String) {
        _nib.value = value
    }
    
    fun updateAddress(value: String) {
        _address.value = value
    }
    
    fun updatePassword(value: String) {
        _password.value = value
    }
    
    fun nextStep() {
        if (_currentStep.value < 3) {
            _currentStep.value += 1
        }
    }
    
    fun previousStep() {
        if (_currentStep.value > 1) {
            _currentStep.value -= 1
        }
    }
    
    fun register() {
        // Validation
        if (password.value.length < 8) {
            _errorMessage.value = "Kata sandi harus minimal 8 karakter"
            return
        }
        
        if (nib.value.isEmpty()) {
            _errorMessage.value = "NIB tidak boleh kosong"
            return
        }
        
        if (nib.value.length > 13) {
            _errorMessage.value = "NIB tidak boleh lebih dari 13 karakter"
            return
        }
        
        val registerRequest = RegisterRequest(
            companyName = companyName.value,
            email = email.value,
            password = password.value,
            phoneNumber = phoneNumber.value,
            NIB = nib.value,
            address = address.value
        )
        
        _isLoading.value = true
        _errorMessage.value = null
        
        RetrofitInstance.api.register(registerRequest).enqueue(object : Callback<RegisterResponse> {
            override fun onResponse(call: Call<RegisterResponse>, response: Response<RegisterResponse>) {
                _isLoading.value = false
                
                if (response.isSuccessful) {
                    _registerSuccess.value = true
                } else {
                    try {
                        _errorMessage.value = response.errorBody()?.string() ?: "Pendaftaran gagal"
                    } catch (e: Exception) {
                        _errorMessage.value = "Pendaftaran gagal: ${response.code()}"
                    }
                }
            }
            
            override fun onFailure(call: Call<RegisterResponse>, t: Throwable) {
                _isLoading.value = false
                _errorMessage.value = "Tidak dapat terhubung ke server: ${t.localizedMessage}"
            }
        })
    }
    
    fun clearError() {
        _errorMessage.value = null
    }
} 

================================================================================

FILE 168: app\src\main\java\com\example\tumbuhnyata\viewmodel\RiwayatPengajuanViewModel.kt
Lines: 71 | Size: 2240 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.R
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

data class RiwayatPengajuan(
    val id: String,
    val title: String,
    val status: String,
    val tanggal: String,
    val imageRes: Int
)

data class RiwayatPengajuanState(
    val isLoading: Boolean = false,
    val error: String? = null,
    val riwayatList: List<RiwayatPengajuan> = emptyList()
)

class RiwayatPengajuanViewModel : ViewModel() {
    private val _state = MutableStateFlow(RiwayatPengajuanState())
    val state: StateFlow<RiwayatPengajuanState> = _state.asStateFlow()

    init {
        loadRiwayatPengajuan()
    }

    private fun loadRiwayatPengajuan() {
        viewModelScope.launch {
            try {
                _state.value = _state.value.copy(isLoading = true)
                // TODO: Implement API call to fetch application history
                // For now using dummy data
                val dummyData = listOf(
                    RiwayatPengajuan(
                        id = "1",
                        title = "ISO 14001",
                        status = "Dalam Proses",
                        tanggal = "20 Mar 2024",
                        imageRes = R.drawable.iso_14001
                    ),
                    RiwayatPengajuan(
                        id = "2",
                        title = "ISO 26000",
                        status = "Selesai",
                        tanggal = "15 Feb 2024",
                        imageRes = R.drawable.iso_26000
                    )
                )
                _state.value = _state.value.copy(
                    isLoading = false,
                    riwayatList = dummyData
                )
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    error = e.message ?: "An error occurred"
                )
            }
        }
    }

    fun refreshRiwayatPengajuan() {
        loadRiwayatPengajuan()
    }
} 

================================================================================

FILE 169: app\src\main\java\com\example\tumbuhnyata\viewmodel\RiwayatViewModel.kt
Lines: 271 | Size: 10416 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.model.CsrHistoryItem
import com.example.tumbuhnyata.data.model.SubStatus
import com.example.tumbuhnyata.di.NetworkModule
import com.example.tumbuhnyata.util.UserSessionManager
import com.example.tumbuhnyata.util.NetworkUtils
import com.example.tumbuhnyata.TumbuhNyataApp
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class RiwayatViewModel : ViewModel() {
    // Repository untuk mengakses data dengan offline support
    private val repository = NetworkModule.csrHistoryRepositoryOffline

    // State untuk item yang perlu tindakan
    private val _perluTindakanItems = MutableStateFlow<List<CsrHistoryItem>>(emptyList())
    val perluTindakanItems: StateFlow<List<CsrHistoryItem>> = _perluTindakanItems

    // State untuk item yang sudah diterima
    private val _diterimaItems = MutableStateFlow<List<CsrHistoryItem>>(emptyList())
    val diterimaItems: StateFlow<List<CsrHistoryItem>> = _diterimaItems

    // State untuk loading indicator
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading

    // State untuk error handling
    private val _error = MutableStateFlow<String?>(null)
    val error: StateFlow<String?> = _error

    // State untuk delete success
    private val _deleteSuccess = MutableStateFlow<String?>(null)
    val deleteSuccess: StateFlow<String?> = _deleteSuccess

    // State untuk unsynced count
    private val _unsyncedCount = MutableStateFlow(0)
    val unsyncedCount: StateFlow<Int> = _unsyncedCount

    // State untuk sync status
    private val _isSyncing = MutableStateFlow(false)
    val isSyncing: StateFlow<Boolean> = _isSyncing

    // State untuk sync success message
    private val _syncSuccess = MutableStateFlow<String?>(null)
    val syncSuccess: StateFlow<String?> = _syncSuccess

    // Fungsi untuk memuat data dengan reactive flow
    init {
        loadCsrHistoryFlow()
        loadUnsyncedCount()
    }

    private fun loadCsrHistoryFlow() {
        viewModelScope.launch {
            try {
                _isLoading.value = true
                _error.value = null

                val userId = UserSessionManager.getUserId(TumbuhNyataApp.appContext)

                // Gunakan flow untuk reactive UI updates
                repository.getPerluTindakanItems(userId).collect { items ->
                    _perluTindakanItems.value = items
                }

            } catch (e: Exception) {
                _error.value = when {
                    e.message?.contains("timeout", ignoreCase = true) == true -> 
                        "Koneksi timeout. Silakan coba lagi."
                    e.message?.contains("connection", ignoreCase = true) == true -> 
                        "Tidak ada koneksi internet. Menampilkan data offline."
                    else -> "Gagal memuat riwayat CSR: ${e.message}"
                }
            } finally {
                _isLoading.value = false
            }
        }

        viewModelScope.launch {
            try {
                val userId = UserSessionManager.getUserId(TumbuhNyataApp.appContext)
                
                // Load diterima items
                repository.getDiterimaItems(userId).collect { items ->
                    _diterimaItems.value = items
                }

            } catch (e: Exception) {
                // Error sudah dihandle di atas
            }
        }

        // Initial load untuk trigger API call dan sync
        refreshData()
        
        // Debug filter status (bisa dihapus di production)
        debugFilterStatus()
    }

    private fun loadUnsyncedCount() {
        viewModelScope.launch {
            repository.getUnsyncedCountFlow().collect { count ->
                _unsyncedCount.value = count
            }
        }
    }

    private fun refreshData() {
        viewModelScope.launch {
            try {
                _isLoading.value = true
                _error.value = null
                val userId = UserSessionManager.getUserId(TumbuhNyataApp.appContext)
                
                // Trigger data refresh (akan ambil dari API jika online, Room jika offline)
                val result = repository.getCsrHistory(userId)
                
                result.fold(
                    onSuccess = { data ->
                        // Data berhasil dimuat, tidak perlu set ke state karena menggunakan Flow
                        Log.d("RiwayatViewModel", "Data loaded successfully: ${data.size} items")
                    },
                    onFailure = { exception ->
                        _error.value = when (exception) {
                            is com.example.tumbuhnyata.data.repository.OfflineException -> 
                                "Tidak ada koneksi internet dan belum ada data tersimpan. Silakan coba lagi saat online."
                            is com.example.tumbuhnyata.data.repository.NetworkException -> 
                                "Terjadi masalah jaringan. ${if (exception.cause != null) "Menampilkan data offline." else "Silakan coba lagi."}"
                            is com.example.tumbuhnyata.data.repository.DatabaseException ->
                                "Terjadi masalah database lokal. Silakan restart aplikasi."
                            else -> when {
                                exception.message?.contains("timeout", ignoreCase = true) == true -> 
                                    "Koneksi timeout. Menampilkan data offline."
                                exception.message?.contains("connection", ignoreCase = true) == true -> 
                                    "Tidak ada koneksi internet. Menampilkan data offline."
                                else -> "Gagal memuat riwayat CSR: ${exception.message}"
                            }
                        }
                    }
                )
                
            } catch (e: Exception) {
                _error.value = "Terjadi kesalahan tidak terduga: ${e.message}"
                Log.e("RiwayatViewModel", "Unexpected error in refreshData", e)
            } finally {
                _isLoading.value = false
            }
        }
    }

    fun deleteCsrHistory(csrItem: CsrHistoryItem) {
        viewModelScope.launch {
            try {
                _isLoading.value = true
                _error.value = null

                // Gunakan user ID yang sesungguhnya dari UserSessionManager
                val userId = UserSessionManager.getUserId(TumbuhNyataApp.appContext)

                val isDeleted = repository.deleteCsrHistory(csrItem.id, userId)
                
                if (isDeleted) {
                    _deleteSuccess.value = "CSR berhasil dihapus"
                    // Refresh data setelah berhasil delete
                    refreshData()
                } else {
                    _error.value = "Gagal menghapus CSR. Silakan coba lagi."
                }
            } catch (e: Exception) {
                _error.value = "Terjadi kesalahan saat menghapus CSR: ${e.message}"
            } finally {
                _isLoading.value = false
            }
        }
    }

    fun refresh() {
        refreshData()
    }

    fun clearError() {
        _error.value = null
    }

    fun clearDeleteSuccess() {
        _deleteSuccess.value = null
    }

    fun clearSyncSuccess() {
        _syncSuccess.value = null
    }

    // Manual sync function
    fun syncData() {
        viewModelScope.launch {
            try {
                // Cek koneksi internet terlebih dahulu
                if (!NetworkUtils.isNetworkAvailable(TumbuhNyataApp.appContext)) {
                    _error.value = "Tidak ada koneksi internet. Silakan cek koneksi Anda dan coba lagi."
                    return@launch
                }

                _isSyncing.value = true
                _error.value = null
                val userId = UserSessionManager.getUserId(TumbuhNyataApp.appContext)
                
                // Get unsynced count before sync
                val unsyncedCountBefore = repository.getUnsyncedCount()
                
                if (unsyncedCountBefore == 0) {
                    _syncSuccess.value = "Semua data sudah tersinkronisasi"
                    return@launch
                }
                
                // Perform sync
                repository.syncUnsyncedData(userId)
                
                // Clean up synced deleted items
                repository.cleanupSyncedDeletedItems()
                
                // Check unsynced count after sync
                val unsyncedCountAfter = repository.getUnsyncedCount()
                val syncedItemsCount = unsyncedCountBefore - unsyncedCountAfter
                
                if (syncedItemsCount > 0) {
                    _syncSuccess.value = "Berhasil menyinkronkan $syncedItemsCount data"
                } else {
                    _syncSuccess.value = "Sinkronisasi selesai"
                }
                
            } catch (e: Exception) {
                _error.value = "Gagal melakukan sinkronisasi: ${e.message}"
            } finally {
                _isSyncing.value = false
            }
        }
    }

    // Check if offline mode
    fun hasUnsyncedData(): Boolean {
        return _unsyncedCount.value > 0
    }

    private fun formatDate(dateString: String): String {
        return try {
            val inputFormat = java.text.SimpleDateFormat("yyyy-MM-dd", java.util.Locale.getDefault())
            val outputFormat = java.text.SimpleDateFormat("dd MMM yy", java.util.Locale("id"))
            val date = inputFormat.parse(dateString)
            outputFormat.format(date!!)
        } catch (e: Exception) {
            dateString
        }
    }

    // Debug method untuk testing filter status
    private fun debugFilterStatus() {
        viewModelScope.launch {
            try {
                val userId = UserSessionManager.getUserId(TumbuhNyataApp.appContext)
                repository.debugFilterStatus(userId)
            } catch (e: Exception) {
                Log.e("RiwayatViewModel", "Error in debugFilterStatus: ${e.message}")
            }
        }
    }
}

================================================================================

FILE 170: app\src\main\java\com\example\tumbuhnyata\viewmodel\SertifikasiViewModel.kt
Lines: 128 | Size: 4761 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.local.entity.CertificationEntity
import com.example.tumbuhnyata.data.repository.CertificationRepository
import com.example.tumbuhnyata.data.repository.CertificationResource
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

data class SertifikasiState(
    val isLoading: Boolean = false,
    val error: String? = null,
    val certificationList: List<CertificationEntity> = emptyList(),
    val syncStatus: String? = null
)

class SertifikasiViewModel(
    private val certificationRepository: CertificationRepository
) : ViewModel() {
    private val _state = MutableStateFlow(SertifikasiState())
    val state: StateFlow<SertifikasiState> = _state.asStateFlow()

    init {
        loadCertifications()
        startPeriodicSync()
    }

    private fun loadCertifications() {
        viewModelScope.launch {
            try {
                _state.value = _state.value.copy(isLoading = true)
                
                certificationRepository.getAllCertifications().collect { resource ->
                    when (resource) {
                        is CertificationResource.Success -> {
                            _state.value = _state.value.copy(
                                isLoading = false,
                                error = null,
                                certificationList = resource.data ?: emptyList()
                            )
                        }
                        is CertificationResource.Error -> {
                            _state.value = _state.value.copy(
                                isLoading = false,
                                error = resource.message
                            )
                        }
                        is CertificationResource.Loading -> {
                            _state.value = _state.value.copy(isLoading = true)
                        }
                    }
                }
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    error = e.message ?: "An error occurred"
                )
            }
        }
    }

    fun refreshCertifications() {
        viewModelScope.launch {
            try {
                _state.value = _state.value.copy(syncStatus = "Syncing...")
                certificationRepository.refreshCertificationsCache()
                _state.value = _state.value.copy(syncStatus = "Sync complete")
            } catch (e: Exception) {
                _state.value = _state.value.copy(syncStatus = "Sync failed: ${e.message}")
            }
        }
    }

    fun getCertificationsByStatus(status: String) {
        viewModelScope.launch {
            try {
                _state.value = _state.value.copy(isLoading = true)
                
                certificationRepository.getCertificationsByStatus(status).collect { resource ->
                    when (resource) {
                        is CertificationResource.Success -> {
                            _state.value = _state.value.copy(
                                isLoading = false,
                                error = null,
                                certificationList = resource.data ?: emptyList()
                            )
                        }
                        is CertificationResource.Error -> {
                            _state.value = _state.value.copy(
                                isLoading = false,
                                error = resource.message
                            )
                        }
                        is CertificationResource.Loading -> {
                            _state.value = _state.value.copy(isLoading = true)
                        }
                    }
                }
            } catch (e: Exception) {
                _state.value = _state.value.copy(
                    isLoading = false,
                    error = e.message ?: "An error occurred"
                )
            }
        }
    }

    private fun startPeriodicSync() {
        viewModelScope.launch {
            try {
                certificationRepository.startPeriodicSync()
            } catch (e: Exception) {
                println("SertifikasiViewModel: Error starting periodic sync: ${e.message}")
            }
        }
    }

    fun clearError() {
        _state.value = _state.value.copy(error = null)
    }
    
    fun clearSyncStatus() {
        _state.value = _state.value.copy(syncStatus = null)
    }
}

================================================================================

FILE 171: app\src\main\java\com\example\tumbuhnyata\viewmodel\SplashViewModel.kt
Lines: 24 | Size: 766 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class SplashViewModel : ViewModel() {
    private val _splashState = MutableStateFlow(0) // 0: Background, 1: Logo, 2: Glow Effect
    val splashState = _splashState.asStateFlow()

    init {
        viewModelScope.launch {
            delay(1000) // Tahap 1: Background
            _splashState.value = 1
            delay(1000) // Tahap 2: Logo muncul
            _splashState.value = 2
            delay(1000) // Tahap 3: Glow effect
            _splashState.value = 3
        }
    }
}

================================================================================

FILE 172: app\src\main\java\com\example\tumbuhnyata\viewmodel\TambahRiwayatViewModel.kt
Lines: 202 | Size: 7262 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.api.AddCsrRequest
import com.example.tumbuhnyata.di.NetworkModule
import com.example.tumbuhnyata.util.UserSessionManager
import com.example.tumbuhnyata.util.NetworkUtils
import com.example.tumbuhnyata.TumbuhNyataApp
import com.example.tumbuhnyata.data.model.normalizeStatus
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.*

class TambahRiwayatViewModel : ViewModel() {
    private val repository = NetworkModule.csrHistoryRepositoryOffline

    // Form states
    private val _programName = MutableStateFlow("")
    val programName: StateFlow<String> = _programName

    private val _mitra = MutableStateFlow("")
    val mitra: StateFlow<String> = _mitra

    private val _status = MutableStateFlow("")
    val status: StateFlow<String> = _status

    private val _kategori = MutableStateFlow("")
    val kategori: StateFlow<String> = _kategori

    private val _lokasi = MutableStateFlow("")
    val lokasi: StateFlow<String> = _lokasi

    private val _startDate = MutableStateFlow("")
    val startDate: StateFlow<String> = _startDate

    private val _endDate = MutableStateFlow("")
    val endDate: StateFlow<String> = _endDate

    private val _deskripsi = MutableStateFlow("")
    val deskripsi: StateFlow<String> = _deskripsi

    private val _budget = MutableStateFlow("")
    val budget: StateFlow<String> = _budget

    // UI states
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading

    private val _error = MutableStateFlow<String?>(null)
    val error: StateFlow<String?> = _error

    private val _isSuccess = MutableStateFlow(false)
    val isSuccess: StateFlow<Boolean> = _isSuccess

    private val _successMessage = MutableStateFlow<String?>(null)
    val successMessage: StateFlow<String?> = _successMessage

    // Dropdown options
    val statusOptions = listOf(
        "Proses Review", "Memerlukan Revisi", "Menunggu Pembayaran",
        "Akan Datang", "Sedang Berlangsung", "Program Selesai"
    )

    val kategoriOptions = listOf("Lingkungan", "Sosial")

    // Update functions
    fun updateProgramName(value: String) { _programName.value = value }
    fun updateMitra(value: String) { _mitra.value = value }
    fun updateStatus(value: String) { _status.value = value }
    fun updateKategori(value: String) { _kategori.value = value }
    fun updateLokasi(value: String) { _lokasi.value = value }
    fun updateStartDate(value: String) { _startDate.value = value }
    fun updateEndDate(value: String) { _endDate.value = value }
    fun updateDeskripsi(value: String) { _deskripsi.value = value }
    fun updateBudget(value: String) { _budget.value = value }

    fun clearError() { _error.value = null }
    
    fun clearSuccessMessage() { _successMessage.value = null }

    private fun convertDateToApiFormat(dateString: String): String {
        return try {
            val inputFormat = SimpleDateFormat("dd/MM/yyyy", Locale.getDefault())
            val outputFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
            val date = inputFormat.parse(dateString)
            outputFormat.format(date!!)
        } catch (e: Exception) {
            dateString
        }
    }

    fun submitForm(onSuccess: () -> Unit) {
        if (!validateForm()) return

        viewModelScope.launch {
            try {
                _isLoading.value = true
                _error.value = null

                val budgetValue = _budget.value.replace(Regex("[^\\d]"), "").toLongOrNull() ?: 0L

                // Gunakan user ID yang sesungguhnya dari UserSessionManager
                val userId = UserSessionManager.getUserId(TumbuhNyataApp.appContext)

                val request = AddCsrRequest(
                    user_id = userId,
                    program_name = _programName.value,
                    category = _kategori.value,
                    description = _deskripsi.value,
                    location = _lokasi.value,
                    partner_name = _mitra.value,
                    start_date = convertDateToApiFormat(_startDate.value),
                    end_date = convertDateToApiFormat(_endDate.value),
                    budget = budgetValue,
                    status = normalizeStatus(_status.value), // Normalisasi status
                    agreed = true
                )

                val isSuccess = repository.addCsrHistory(request)
                
                if (isSuccess) {
                    _isSuccess.value = true
                    // Cek apakah data disimpan offline atau online
                    if (!NetworkUtils.isNetworkAvailable(TumbuhNyataApp.appContext)) {
                        _successMessage.value = "Data CSR berhasil disimpan secara offline. Data akan tersinkron ketika kembali online."
                    } else {
                        _successMessage.value = "Data CSR berhasil disimpan"
                    }
                    onSuccess()
                } else {
                    _error.value = "Gagal menambahkan CSR. Silakan coba lagi."
                }

            } catch (e: Exception) {
                _error.value = "Terjadi kesalahan: ${e.message}"
            } finally {
                _isLoading.value = false
            }
        }
    }

    private fun validateForm(): Boolean {
        return when {
            _programName.value.isBlank() -> {
                _error.value = "Nama program harus diisi"
                false
            }
            _mitra.value.isBlank() -> {
                _error.value = "Nama mitra harus diisi"
                false
            }
            _status.value.isBlank() -> {
                _error.value = "Status harus dipilih"
                false
            }
            _kategori.value.isBlank() -> {
                _error.value = "Kategori program harus dipilih"
                false
            }
            _lokasi.value.isBlank() -> {
                _error.value = "Lokasi harus diisi"
                false
            }
            _startDate.value.isBlank() -> {
                _error.value = "Tanggal mulai harus diisi"
                false
            }
            _endDate.value.isBlank() -> {
                _error.value = "Tanggal selesai harus diisi"
                false
            }
            _deskripsi.value.isBlank() -> {
                _error.value = "Deskripsi harus diisi"
                false
            }
            _budget.value.isBlank() -> {
                _error.value = "Budget harus diisi"
                false
            }
            else -> true
        }
    }

    fun resetForm() {
        _programName.value = ""
        _mitra.value = ""
        _status.value = ""
        _kategori.value = ""
        _lokasi.value = ""
        _startDate.value = ""
        _endDate.value = ""
        _deskripsi.value = ""
        _budget.value = ""
        _isLoading.value = false
        _error.value = null
        _isSuccess.value = false
        _successMessage.value = null
    }
} 

================================================================================

FILE 173: app\src\main\java\com\example\tumbuhnyata\viewmodel\UploadViewModel.kt
Lines: 105 | Size: 3412 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import android.app.Application
import android.net.Uri
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.model.UploadResponse
import com.example.tumbuhnyata.data.repository.UploadRepository
import com.example.tumbuhnyata.data.repository.DashboardRepository
import com.example.tumbuhnyata.data.util.Resource
import com.example.tumbuhnyata.data.network.RetrofitInstance
import com.example.tumbuhnyata.data.local.AppDatabase
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

data class UploadState(
    val isLoading: Boolean = false,
    val selectedFileUri: Uri? = null,
    val selectedFileName: String? = null,
    val uploadResult: Resource<UploadResponse>? = null,
    val isUploadEnabled: Boolean = false
)

class UploadViewModel(application: Application) : AndroidViewModel(application) {

    private val _uploadState = MutableStateFlow(UploadState())
    val uploadState: StateFlow<UploadState> = _uploadState.asStateFlow()

    // Manual DI for Repository
    private val uploadRepository: UploadRepository
    private val dashboardRepository: DashboardRepository

    init {
        val dashboardApi = RetrofitInstance.dashboardApi
        val dashboardDao = AppDatabase.getInstance(application).dashboardDao()
        
        // Create dashboard repository first
        dashboardRepository = DashboardRepository(dashboardApi, dashboardDao, application.applicationContext)
        
        // Create upload repository with dashboard repository for integration
        uploadRepository = UploadRepository(dashboardApi, application.applicationContext, dashboardRepository)
    }

    /**
     * Sets the selected file for upload
     */
    fun selectFile(uri: Uri, fileName: String) {
        _uploadState.value = _uploadState.value.copy(
            selectedFileUri = uri,
            selectedFileName = fileName,
            isUploadEnabled = true,
            uploadResult = null // Clear previous results
        )
    }

    /**
     * Clears the selected file
     */
    fun clearSelectedFile() {
        _uploadState.value = _uploadState.value.copy(
            selectedFileUri = null,
            selectedFileName = null,
            isUploadEnabled = false,
            uploadResult = null
        )
    }

    /**
     * Uploads the selected file
     */
    fun uploadFile() {
        val fileUri = _uploadState.value.selectedFileUri
        if (fileUri == null) {
            _uploadState.value = _uploadState.value.copy(
                uploadResult = Resource.Error("No file selected")
            )
            return
        }

        viewModelScope.launch {
            _uploadState.value = _uploadState.value.copy(
                isLoading = true,
                uploadResult = null
            )

            val result = uploadRepository.uploadCsvFile(fileUri)
            
            _uploadState.value = _uploadState.value.copy(
                isLoading = false,
                uploadResult = result
            )
        }
    }

    /**
     * Clears the upload result (for dismissing error messages)
     */
    fun clearUploadResult() {
        _uploadState.value = _uploadState.value.copy(
            uploadResult = null
        )
    }
} 

================================================================================

FILE 174: app\src\main\java\com\example\tumbuhnyata\viewmodel\VerificationOneViewModel.kt
Lines: 45 | Size: 1410 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow

data class VerificationOneState(
    val aktaFile: String? = null,
    val skdpFile: String? = null,
    val isBothFilesUploaded: Boolean = false
)

class VerificationOneViewModel : ViewModel() {
    private val _verificationState = MutableStateFlow(VerificationOneState())
    val verificationState: StateFlow<VerificationOneState> = _verificationState.asStateFlow()

    fun uploadAktaFile(fileName: String) {
        _verificationState.value = _verificationState.value.copy(
            aktaFile = fileName,
            isBothFilesUploaded = _verificationState.value.skdpFile != null
        )
    }

    fun uploadSkdpFile(fileName: String) {
        _verificationState.value = _verificationState.value.copy(
            skdpFile = fileName,
            isBothFilesUploaded = _verificationState.value.aktaFile != null
        )
    }

    fun deleteAktaFile() {
        _verificationState.value = _verificationState.value.copy(
            aktaFile = null,
            isBothFilesUploaded = false
        )
    }

    fun deleteSkdpFile() {
        _verificationState.value = _verificationState.value.copy(
            skdpFile = null,
            isBothFilesUploaded = false
        )
    }
} 

================================================================================

FILE 175: app\src\main\java\com\example\tumbuhnyata\viewmodel\VerificationTwoViewModel.kt
Lines: 30 | Size: 905 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow

data class VerificationTwoState(
    val picFile: String? = null,
    val isFileUploaded: Boolean = false
)

class VerificationTwoViewModel : ViewModel() {
    private val _verificationState = MutableStateFlow(VerificationTwoState())
    val verificationState: StateFlow<VerificationTwoState> = _verificationState.asStateFlow()

    fun uploadPicFile(fileName: String) {
        _verificationState.value = _verificationState.value.copy(
            picFile = fileName,
            isFileUploaded = true
        )
    }

    fun deletePicFile() {
        _verificationState.value = _verificationState.value.copy(
            picFile = null,
            isFileUploaded = false
        )
    }
} 

================================================================================

FILE 176: app\src\main\java\com\example\tumbuhnyata\viewmodel\WorkshopDetailViewModel.kt
Lines: 24 | Size: 855 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.model.Workshop
import com.example.tumbuhnyata.data.model.recommendedWorkshops
import com.example.tumbuhnyata.data.model.recentWorkshops
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class WorkshopDetailViewModel : ViewModel() {

    private val _selectedWorkshop = MutableStateFlow<Workshop?>(null)
    val selectedWorkshop: StateFlow<Workshop?> = _selectedWorkshop

    fun loadWorkshopById(id: String) {
        viewModelScope.launch {
            val found = recommendedWorkshops.find { it.id == id }
                ?: recentWorkshops.find { it.id == id }
            _selectedWorkshop.value = found
        }
    }
}


================================================================================

FILE 177: app\src\main\java\com\example\tumbuhnyata\viewmodel\WorkshopViewModel.kt
Lines: 358 | Size: 13583 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.State
import androidx.lifecycle.viewModelScope
import com.example.tumbuhnyata.data.model.recommendedWorkshops
import com.example.tumbuhnyata.data.model.recentWorkshops
import com.example.tumbuhnyata.data.model.Workshop
import com.example.tumbuhnyata.data.repository.OfflineProfileRepository
import com.example.tumbuhnyata.data.repository.OfflineWorkshopRepository
import com.example.tumbuhnyata.data.repository.ProfileRepository
import com.example.tumbuhnyata.data.repository.WorkshopRepository
import com.example.tumbuhnyata.di.NetworkModule
import com.example.tumbuhnyata.ui.workshop.NewWorkshop
import com.example.tumbuhnyata.data.local.entity.OfflineWorkshopRegistration
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

class WorkshopViewModel(
    private val workshopRepository: WorkshopRepository,
    private val profileRepository: ProfileRepository,
    private val offlineProfileRepository: OfflineProfileRepository,
    private val offlineWorkshopRepository: OfflineWorkshopRepository
): ViewModel() {

    private val _recommended = mutableStateOf<List<Workshop>>(emptyList())
    val recommended: State<List<Workshop>> = _recommended

    private val _recent = mutableStateOf<List<Workshop>>(emptyList())
    val recent: State<List<Workshop>> = _recent

    private val _selectedWorkshop = mutableStateOf<Workshop?>(null)
    val selectedWorkshop: State<Workshop?> = _selectedWorkshop

    // Registration form states - Initialize these BEFORE init block
    private val _workshopId = MutableStateFlow("")
    val workshopId: StateFlow<String> = _workshopId.asStateFlow()

    private val _companyName = MutableStateFlow("")
    val companyName: StateFlow<String> = _companyName.asStateFlow()

    private val _email = MutableStateFlow("")
    val email: StateFlow<String> = _email.asStateFlow()

    // File upload states
    private val _fileSelected = MutableStateFlow(false)
    val fileSelected: StateFlow<Boolean> = _fileSelected.asStateFlow()

    private val _fileName = MutableStateFlow("")
    val fileName: StateFlow<String> = _fileName.asStateFlow()

    // UI states
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()

    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage.asStateFlow()

    private val _registerSuccess = MutableStateFlow(false)
    val registerSuccess: StateFlow<Boolean> = _registerSuccess.asStateFlow()

    private val _profileLoaded = MutableStateFlow(false)
    val profileLoaded: StateFlow<Boolean> = _profileLoaded.asStateFlow()

    private val _syncInProgress = MutableStateFlow(false)
    val syncInProgress: StateFlow<Boolean> = _syncInProgress.asStateFlow()

    private val _hasPendingSync = MutableStateFlow(false)
    val hasPendingSync: StateFlow<Boolean> = _hasPendingSync.asStateFlow()

    private val _syncMessage = MutableStateFlow<String?>(null)
    val syncMessage: StateFlow<String?> = _syncMessage.asStateFlow()

    private val _workshopHistory = MutableStateFlow<List<OfflineWorkshopRegistration>>(emptyList())
    val workshopHistory: StateFlow<List<OfflineWorkshopRegistration>> = _workshopHistory.asStateFlow()

    init {
        loadWorkshops()
        loadUserProfile()
        checkPendingSync()
        loadWorkshopHistory()
        viewModelScope.launch {
            if (isDatabaseOnline()) {
                fetchWorkshopHistoryOnline()
            }
        }
    }

    fun checkPendingSync() {
        viewModelScope.launch {
            _hasPendingSync.value = workshopRepository.hasPendingSyncRegistrations()
        }
    }

    fun syncRegistrations() {
        viewModelScope.launch {
            _syncInProgress.value = true
            _syncMessage.value = null

            try {
                val success = offlineWorkshopRepository.syncRegistrations()
                if (success) {
                    _syncMessage.value = "Semua pendaftaran berhasil disinkronkan"
                    _hasPendingSync.value = false
                    loadWorkshopHistory() // Refresh history after sync
                } else {
                    _syncMessage.value = "Beberapa pendaftaran gagal disinkronkan. Akan dicoba lagi nanti."
                    _hasPendingSync.value = workshopRepository.hasPendingSyncRegistrations()
                }
            } catch (e: Exception) {
                _syncMessage.value = "Gagal melakukan sinkronisasi: ${e.localizedMessage}"
            } finally {
                _syncInProgress.value = false
            }
        }
    }

    fun clearSyncMessage() {
        _syncMessage.value = null
    }

    private fun loadWorkshops() {
        _recommended.value = workshopRepository.getRecommendedWorkshops().take(4)
        _recent.value = workshopRepository.getRecentWorkshops().take(4)
    }

    fun loadWorkshopDetail(workshopId: String) {
        _selectedWorkshop.value = workshopRepository.getWorkshopById(workshopId)
    }

    fun setWorkshopId(id: String) {
        _workshopId.value = id
        loadWorkshopDetail(id)
    }

    private fun loadUserProfile() {
        viewModelScope.launch {
            try {
                _isLoading.value = true

                val profile = profileRepository.getUserProfile()

                if (profile != null) {
                    _companyName.value = profile.companyName
                    _email.value = profile.email
                    _profileLoaded.value = true
                } else {
                    loadOfflineUserProfile()
                }
            } catch (e: Exception) {
                _errorMessage.value = "Error loading profile: ${e.localizedMessage}"
                loadOfflineUserProfile()
            } finally {
                _isLoading.value = false
            }
        }
    }

    private suspend fun loadOfflineUserProfile() {
        try {
            val profile = offlineProfileRepository.getLatestProfile()
            if (profile != null) {
                _companyName.value = profile.companyName
                _email.value = profile.email
                _profileLoaded.value = true
            } else {
                _errorMessage.value = "Tidak ada data profil tersimpan. Silakan login ulang."
            }
        } catch (e: Exception) {
            _errorMessage.value = "Error loading offline profile: ${e.localizedMessage}"
        }
    }

    fun selectFile(fileName: String) {
        _fileSelected.value = true
        _fileName.value = fileName
    }

    fun removeFile() {
        _fileSelected.value = false
        _fileName.value = ""
    }

    fun clearError() {
        _errorMessage.value = null
    }

    fun refreshProfile() {
        loadUserProfile()
    }

    // FIXED: Unified registration function that handles both online and offline scenarios
    fun registerWorkshop() {
        if (!_profileLoaded.value) {
            _errorMessage.value = "Data profil belum dimuat. Silakan tunggu sebentar."
            return
        }

        if (!_fileSelected.value) {
            _errorMessage.value = "Silakan pilih file terlebih dahulu"
            return
        }

        if (_companyName.value.isBlank() || _email.value.isBlank()) {
            _errorMessage.value = "Data profil tidak lengkap"
            return
        }

        viewModelScope.launch {
            _isLoading.value = true
            _errorMessage.value = null

            try {
                // First, try to register online
                val onlineSuccess = workshopRepository.registerWorkshopOnline(
                    workshopId = _workshopId.value,
                    companyName = _companyName.value,
                    email = _email.value
                )

                if (onlineSuccess) {
                    // If online registration successful, save to Room with synced status = true
                    val saved = offlineWorkshopRepository.saveRegistrationOffline(
                        workshopId = _workshopId.value,
                        companyName = _companyName.value,
                        email = _email.value,
                        isSynced = true // Mark as synced since online registration was successful
                    )

                    if (saved) {
                        _registerSuccess.value = true
                        loadWorkshopHistory() // Refresh history
                        checkPendingSync() // Update pending sync status
                    } else {
                        _errorMessage.value = "Berhasil daftar workshop tetapi gagal menyimpan riwayat"
                        _registerSuccess.value = true // Still consider as success since online registration worked
                    }
                } else {
                    // If online registration failed, save offline with synced status = false
                    val saved = offlineWorkshopRepository.saveRegistrationOffline(
                        workshopId = _workshopId.value,
                        companyName = _companyName.value,
                        email = _email.value,
                        isSynced = false // Mark as not synced since online registration failed
                    )

                    if (saved) {
                        _registerSuccess.value = true
                        _syncMessage.value = "Pendaftaran disimpan offline. Akan disinkronkan saat online."
                        loadWorkshopHistory() // Refresh history
                        checkPendingSync() // Update pending sync status
                    } else {
                        _errorMessage.value = "Gagal menyimpan pendaftaran workshop"
                    }
                }
            } catch (e: Exception) {
                // If exception occurs, try to save offline
                try {
                    val saved = offlineWorkshopRepository.saveRegistrationOffline(
                        workshopId = _workshopId.value,
                        companyName = _companyName.value,
                        email = _email.value,
                        isSynced = false
                    )

                    if (saved) {
                        _registerSuccess.value = true
                        _syncMessage.value = "Pendaftaran disimpan offline karena tidak ada koneksi. Akan disinkronkan saat online."
                        loadWorkshopHistory()
                        checkPendingSync()
                    } else {
                        _errorMessage.value = "Gagal menyimpan pendaftaran workshop: ${e.localizedMessage}"
                    }
                } catch (offlineException: Exception) {
                    _errorMessage.value = "Gagal menyimpan pendaftaran: ${offlineException.localizedMessage}"
                }
            } finally {
                _isLoading.value = false
            }
        }
    }

    fun resetRegistrationSuccess() {
        _registerSuccess.value = false
    }

    // REMOVED: offlineRegisterWorkshop function - no longer needed

    private fun loadWorkshopHistory() {
        viewModelScope.launch {
            try {
                val history = offlineWorkshopRepository.getAllRegistrations()
                _workshopHistory.value = history
            } catch (e: Exception) {
                _errorMessage.value = "Gagal memuat riwayat workshop: ${e.localizedMessage}"
            }
        }
    }

    fun getWorkshopHistory(): List<OfflineWorkshopRegistration> {
        return workshopHistory.value
    }

    fun getWorkshopById(id: String): Workshop? {
        return workshopRepository.getWorkshopById(id)
    }

    fun deleteRegistrationsByIds(ids: List<String>) {
        viewModelScope.launch {
            _isLoading.value = true
            val isOnline = isDatabaseOnline()

            for (id in ids) {
                val registration = offlineWorkshopRepository.getRegistrationById(id)
                if (registration != null) {
                    if (isOnline && registration.isSynced) {
                        val success = workshopRepository.deleteWorkshopOnline(registration.workshopId)
                        if (success) {
                            offlineWorkshopRepository.deleteRegistrationsByIds(listOf(id))
                        } else {
                            _errorMessage.value = "Gagal menghapus dari server"
                        }
                    } else {
                        offlineWorkshopRepository.deleteRegistrationsByIds(listOf(id))
                    }
                }
            }

            loadWorkshopHistory()
            checkPendingSync()
            _isLoading.value = false
        }
    }

    fun fetchWorkshopHistoryOnline() {
        viewModelScope.launch {
            _isLoading.value = true
            val success = workshopRepository.syncWorkshopHistoryFromServer(_email.value)
            if (success) {
                loadWorkshopHistory()
            } else {
                _errorMessage.value = "Gagal mengambil riwayat workshop dari server"
            }
            _isLoading.value = false
        }
    }

    suspend fun isDatabaseOnline(): Boolean {
        return try {
            workshopRepository.isDatabaseOnline()
        } catch (e: Exception) {
            false
        }
    }
}

================================================================================

FILE 178: app\src\main\java\com\example\tumbuhnyata\viewmodel\WorkshopViewModelFactory.kt
Lines: 27 | Size: 1147 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import com.example.tumbuhnyata.data.repository.OfflineProfileRepository
import com.example.tumbuhnyata.data.repository.OfflineWorkshopRepository
import com.example.tumbuhnyata.data.repository.ProfileRepository
import com.example.tumbuhnyata.data.repository.WorkshopRepository

class WorkshopViewModelFactory(
    private val workshopRepository: WorkshopRepository,
    private val profileRepository: ProfileRepository,
    private val offlineProfileRepository: OfflineProfileRepository,
    private val offlineWorkshopRepository: OfflineWorkshopRepository
) : ViewModelProvider.Factory {
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(WorkshopViewModel::class.java)) {
            return WorkshopViewModel(
                workshopRepository,
                profileRepository,
                offlineProfileRepository,
                offlineWorkshopRepository
            ) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class")
    }
}

================================================================================

FILE 179: app\src\main\res\drawable\angle_double_small_down.xml
Lines: 5 | Size: 592 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="512dp" android:viewportHeight="24" android:viewportWidth="24" android:width="512dp">
      
    <path android:fillColor="#FF000000" android:pathData="M12,13.033c-0.445,0 -0.864,-0.173 -1.178,-0.488L4.951,6.674l2.121,-2.121 4.928,4.928 4.928,-4.928 2.121,2.121 -5.87,5.871c-0.315,0.315 -0.733,0.488 -1.179,0.488ZM13.725,19.311l5.345,-5.344 -2.121,-2.121 -4.991,4.991 -4.896,-4.896 -2.121,2.121 5.25,5.25c0.472,0.472 1.1,0.732 1.768,0.732s1.296,-0.26 1.768,-0.732Z"/>
    
</vector>


================================================================================

FILE 180: app\src\main\res\drawable\ic_carbonfootprint.xml
Lines: 9 | Size: 1393 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="14dp"
    android:height="15dp"
    android:viewportWidth="14"
    android:viewportHeight="15">
  <path
      android:pathData="M7,0.5C10.866,0.5 14,3.634 14,7.5C14,11.366 10.866,14.5 7,14.5C3.134,14.5 0,11.366 0,7.5C0,3.634 3.134,0.5 7,0.5ZM8.4,8.48L7.305,9.356C7.267,9.386 7.235,9.425 7.213,9.469C7.19,9.513 7.177,9.561 7.174,9.61C7.172,9.659 7.179,9.708 7.197,9.754C7.215,9.8 7.242,9.842 7.277,9.877L8.144,10.744C8.312,10.912 8.434,11.12 8.499,11.349L8.622,11.778C8.673,11.958 8.763,12.124 8.886,12.265C9.009,12.406 9.162,12.517 9.334,12.592C10.004,12.285 10.606,11.848 11.107,11.307L10.943,9.993C10.914,9.765 10.83,9.547 10.697,9.359C10.564,9.171 10.386,9.018 10.18,8.915L9.151,8.4C9.031,8.34 8.897,8.316 8.764,8.33C8.631,8.344 8.504,8.396 8.4,8.48ZM7,1.9C6.143,1.899 5.298,2.096 4.529,2.474C3.76,2.852 3.088,3.401 2.566,4.08L2.45,4.234V5.414C2.45,5.841 2.58,6.259 2.823,6.61C3.067,6.961 3.411,7.23 3.812,7.38L3.936,7.422L4.839,7.699C5.8,7.993 6.736,7.211 6.643,6.232L6.63,6.13L6.507,5.396C6.48,5.233 6.511,5.066 6.595,4.924C6.679,4.782 6.811,4.675 6.966,4.62L7.042,4.599L7.47,4.501C7.713,4.446 7.943,4.342 8.145,4.196C8.348,4.051 8.519,3.866 8.649,3.653C8.778,3.44 8.864,3.203 8.901,2.957C8.938,2.71 8.925,2.459 8.863,2.217C8.264,2.007 7.634,1.899 7,1.9Z"
      android:fillColor="#F8F8F8"/>
</vector>


================================================================================

FILE 181: app\src\main\res\drawable\ic_filter.xml
Lines: 11 | Size: 413 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M10,18h4v-2h-4v2zM3,6v2h18L21,6L3,6zM6,13h12v-2L6,11v2z"/>
</vector> 

================================================================================

FILE 182: app\src\main\res\drawable\ic_konsumsienergi.xml
Lines: 5 | Size: 777 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="13dp" android:viewportHeight="13" android:viewportWidth="10" android:width="10dp">
      
    <path android:fillColor="#F8F8F8" android:pathData="M4.358,8.125L0.557,7.637C0.29,7.605 0.116,7.459 0.035,7.199C-0.045,6.939 0.011,6.717 0.204,6.532L6.764,0.162C6.818,0.108 6.882,0.068 6.957,0.041C7.032,0.014 7.133,0 7.262,0C7.475,0 7.639,0.092 7.751,0.276C7.864,0.46 7.866,0.65 7.759,0.845L5.642,4.875L9.443,5.363C9.71,5.395 9.884,5.541 9.965,5.801C10.045,6.061 9.989,6.283 9.796,6.467L3.236,12.837C3.182,12.892 3.118,12.932 3.043,12.96C2.968,12.987 2.867,13 2.738,13C2.525,13 2.361,12.908 2.249,12.724C2.136,12.54 2.134,12.35 2.241,12.155L4.358,8.125Z"/>
    
</vector>


================================================================================

FILE 183: app\src\main\res\drawable\ic_launcher_background.xml
Lines: 170 | Size: 5606 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>


================================================================================

FILE 184: app\src\main\res\drawable\ic_launcher_foreground.xml
Lines: 30 | Size: 1702 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

================================================================================

FILE 185: app\src\main\res\drawable\ic_pembaruandatasplashlogo.xml
Lines: 29 | Size: 10124 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="156dp" android:viewportHeight="156" android:viewportWidth="200" android:width="200dp">
      
    <path android:fillColor="#C7C7C7" android:pathData="M4.21,102.84H4.44H4.65L8.88,101.33H9.13L11.54,100.48L11.83,100.39L15.66,99.06L15.96,98.94L18.31,98.12L18.66,98.01L23.07,96.5L23.43,96.38L26.08,95.45L26.49,95.32L29.79,94.17L30.23,94.01L33.12,93L33.59,92.85L37.59,91.45L38,91.3L41.03,90.24L41.42,90.11L44.34,89.09L44.69,88.97L48.02,87.8L48.34,87.68L51.23,86.68L51.52,86.59L55.58,85.17L55.88,85.08L60.15,83.56L60.38,83.47L63.65,82.34H63.86L68.1,80.82H68.28L71.86,79.58H72.03L75.77,78.28L72.21,77.13H72.06L67.94,75.81H67.75L64.23,74.68H64.03L59.49,73.16H59.23L56.2,72.19L55.93,72.1L49.31,69.97L48.98,69.86L47.39,68.74L47.04,68.63L40.57,66.54L40.18,66.42L38.75,65.97L38.33,65.85L31.7,63.74L31.18,63.59L29.67,63.11L29.18,62.95L22.2,60.7L21.69,60.55L20.89,60.29L20.4,60.12L12.71,57.65L12.25,57.5L11.56,57.28L11.15,57.15L3.47,54.67C3.47,54.88 3.33,55.09 3.27,55.32C3.27,55.5 3.15,55.69 3.11,55.87V56.02C3.03,56.23 2.97,56.46 2.91,56.67C1.39,62.11 0.45,67.69 0.11,73.33V74.01C-0.04,76.59 -0.04,79.17 0.11,81.75C0.11,82.25 0.11,82.73 0.2,83.26C0.73,89.93 2.08,96.5 4.21,102.84Z"/>
      
    <path android:fillColor="#DBDBDB" android:pathData="M72.22,76.77L72.04,79.22H71.87L72.07,76.66L72.22,76.77ZM67.77,75.34L68.12,80.58H68.3L67.95,75.46L67.77,75.34ZM63.67,82.14H63.88L64.24,74.28H64.04L63.67,82.14ZM59.29,72.62L60.17,83.37L60.4,83.28L59.55,72.68L59.29,72.62ZM55.59,84.94L55.9,84.85L56.28,71.65L56,71.56L55.59,84.94ZM49.39,69.42L49.05,69.31L50.17,78.04L51.25,86.46L51.54,86.37L50.42,77.99L49.39,69.42ZM48.04,87.59L48.36,87.47L47.39,68.74L47.04,68.63L48.04,87.59ZM40.59,66.6L40.19,66.48L44.36,88.87L44.71,88.74L40.59,66.6ZM38.3,65.88L41,90.02L41.39,89.88L38.72,66L38.3,65.88ZM31.65,63.73L31.14,63.58L37.54,91.23L37.95,91.08L31.65,63.82V63.73ZM29.21,62.94L33.12,92.77L33.59,92.62L29.7,63.09L29.21,62.94ZM21.64,60.53L29.71,93.94L30.15,93.79L22.23,60.68L21.64,60.53ZM20.36,60.11L26,95.23L26.41,95.09L20.84,60.26L20.36,60.11ZM12.21,57.49L22.99,96.27L23.35,96.15L12.74,57.64L12.21,57.49ZM11.1,57.14L18.24,97.92L18.58,97.82L11.59,57.26L11.1,57.14ZM3.09,55.88L15.58,98.86L15.89,98.74L3.33,55.32C3.33,55.5 3.21,55.69 3.17,55.87L3.09,55.88ZM2.85,56.7L11.47,100.28L11.75,100.19L3.12,56.05C3.05,56.26 2.99,56.49 2.92,56.7H2.85ZM0.08,74.04L8.88,101.21H9.13L0.05,73.43V74.12L0.08,74.04ZM0.2,83.26L4.44,102.74H4.65L0.11,81.82C0.12,82.28 0.15,82.76 0.2,83.26Z"/>
      
    <path android:fillColor="#A6A6A6" android:pathData="M4.21,102.84L10.28,102.19L81.84,77.26L75.78,77.92L4.21,102.84Z"/>
      
    <path android:fillColor="#A6A6A6" android:pathData="M75.78,77.92L81.84,77.26L9.59,54.02L3.52,54.67L75.78,77.92Z"/>
      
    <path android:fillColor="#37474F" android:pathData="M115.81,0L116.31,77.96L43.13,54.34C53.44,21.52 81.87,0.23 115.81,0Z"/>
      
    <path android:fillColor="#263238" android:pathData="M113.81,0.03L115.81,3.42V3.88L113.53,0.05L113.81,0.03ZM110.97,0.18L115.87,11.06V10.45L111.32,0.15L110.97,0.18ZM102.48,1.2L115.94,23.31V22.7L102.8,1.15L102.48,1.2ZM100.66,1.55L116.02,34.36V33.59L100.96,1.5C100.86,1.51 100.76,1.52 100.66,1.55ZM105.81,28.41L116.08,43.55V42.99L106.14,28.29L94.12,10.44L90.09,4.48C89.97,4.52 89.85,4.57 89.73,4.62L93.8,10.68L105.81,28.41ZM88.82,4.95L116.08,52.78V51.93L89.18,4.8L88.82,4.95ZM79.61,9.16L116.15,57.08V56.35L80.02,8.94L79.61,9.16ZM78.78,9.62L116.23,66.95V66.04L79.19,9.39C79.06,9.5 78.93,9.6 78.78,9.68V9.62ZM70.84,14.75L116.28,69.27V68.47L71.3,14.43L70.84,14.75ZM69.92,15.46L111.43,76.39L112.32,76.67L70.36,15.13C70.2,15.23 70.06,15.34 69.92,15.46ZM63.08,21.37L109.22,75.67L110.26,76.01L63.47,20.99C63.35,21.12 63.21,21.25 63.08,21.37ZM62.33,22.13L98.68,72.27L99.48,72.52L62.71,21.79L62.33,22.13ZM56.38,28.87L94.71,70.98L95.65,71.3L56.67,28.5L56.38,28.87ZM55.44,30.11L83.14,67.22L83.84,67.45L55.73,29.73C55.62,29.85 55.53,29.99 55.44,30.11ZM50.7,37.22L76.78,65.2L77.55,65.45L50.9,36.94C50.83,37.03 50.76,37.12 50.7,37.22ZM49.99,38.45L68.89,62.68L69.47,62.86L50.17,38.12C50.11,38.23 50.05,38.34 49.99,38.45ZM46.02,46.49L58.8,59.41L59.5,59.65L46.19,46.22C46.13,46.31 46.07,46.4 46.02,46.49ZM45.33,48.16L52.9,57.5L53.38,57.67L45.42,47.86C45.38,47.95 45.35,48.06 45.33,48.16Z"/>
      
    <path android:fillColor="#E6FD4B" android:pathData="M116.31,77.96L189.48,101.57C184.69,117.17 175.07,130.84 162.01,140.61C148.94,150.39 133.1,155.75 116.79,155.94C108.72,155.98 100.7,154.74 93.03,152.26C68.8,144.43 51.43,127.04 43.42,102.53L116.31,77.96Z"/>
      
    <path android:fillColor="#E6FD4B" android:pathData="M189.48,101.57H195.54C190.75,117.17 181.13,130.84 168.06,140.61C154.99,150.38 139.16,155.74 122.85,155.92H116.79C133.1,155.74 148.94,150.38 162,140.6C175.07,130.84 184.69,117.17 189.48,101.57Z"/>
      
    <path android:fillAlpha="0.1" android:fillColor="#000000" android:pathData="M189.48,101.57H195.54C190.75,117.17 181.13,130.84 168.06,140.61C154.99,150.38 139.16,155.74 122.85,155.92H116.79C133.1,155.74 148.94,150.38 162,140.6C175.07,130.84 184.69,117.17 189.48,101.57Z" android:strokeAlpha="0.1"/>
      
    <path android:fillAlpha="0.1" android:fillColor="#000000" android:pathData="M186.18,100.54L187.01,108.36C187.02,108.39 187.02,108.42 187.01,108.45L186.16,100.53L186.18,100.54ZM177.79,97.83L183.94,114.9L177.88,97.92L177.79,97.83ZM174.76,96.88L178.49,123.64V123.53L174.76,96.91V96.88ZM169.48,95.16L177.29,125.29V125.18L169.52,95.23L169.48,95.16ZM167.42,94.51L171.57,132.07L171.69,131.93L167.63,94.48L167.42,94.51ZM161.18,92.5L170.26,133.39L170.4,133.25L161.31,92.59L161.18,92.5ZM159.66,92L163.34,139.54L163.54,139.4L159.86,92.06L159.66,92ZM153.95,90.17L153.7,90.08L162.24,140.4L162.43,140.25L153.95,90.17ZM151.7,89.44L152.35,146.79L152.61,146.64L151.95,89.52L151.7,89.44ZM145.17,87.34L144.84,87.21L151.5,147.23L151.77,147.09L145.17,87.34ZM142.84,151.12L143.2,150.98L143.7,86.87L143.4,86.74L142.84,151.12ZM137.24,84.78L136.86,84.64L142.19,151.36L142.52,151.24L137.24,84.78ZM133.71,153.91C133.85,153.89 133.99,153.85 134.13,153.82L136.25,84.37L135.86,84.25L133.71,153.91ZM128.48,81.87L128.01,81.72L132.93,154.09L133.36,154L128.48,81.87ZM121.09,79.48L120.55,79.31L123.12,155.63H123.62H124.12L127.36,81.6L126.89,81.44L123.62,155.54L121.09,79.48ZM112,79.48L111.51,79.63L113.31,155.89H113.78H114.31L119.91,79.07L119.36,78.9L113.82,155.39L112,79.48ZM103.63,154.86L104.07,154.94L111.04,79.79L110.54,79.96L103.63,154.86ZM104.63,81.96L103.21,154.79H103.63L105.04,81.75L104.63,81.96ZM93.03,152.24H93.15H93.38L104.15,82L103.71,82.16L93.03,152.24ZM92.82,149L92.58,152.15L92.94,152.27L93.18,149.02L93.97,138.78L95.48,118.29L98.07,84.17L97.74,84.29L95.12,118.27L93.61,138.75L92.82,149ZM81.66,147.67L81.93,147.8L96.94,84.58L96.57,84.7L81.66,147.67ZM88.14,87.55L80.7,147.14L80.98,147.27L88.35,87.38L88.14,87.55ZM73,142.65L73.19,142.79L87.15,87.87L86.87,87.96L73,142.65ZM68.56,94.2L63.52,135.08C63.57,135.12 63.62,135.17 63.67,135.22L68.69,94.12L68.56,94.2ZM56.44,127.25L56.53,127.38L67.13,94.7H66.98L56.44,127.25ZM78.72,90.79L71.62,141.66C71.68,141.71 71.74,141.76 71.81,141.79L78.81,90.58L78.72,90.79ZM64.58,136.05L64.71,136.16L72.28,109.76L77.01,93.11L77.55,91.18H77.34L76.75,92.97L72.03,109.63L64.58,136.05ZM61.91,96.3L55.59,126.07C55.59,126.11 55.59,126.15 55.59,126.19L61.94,96.27L61.91,96.3ZM51.57,120.23C51.56,120.26 51.56,120.29 51.57,120.32L60.55,96.82H60.44L51.57,120.23ZM55.69,98.47L50.61,118.65V118.74L55.7,98.45L55.69,98.47ZM48.36,100.95L45.6,108.52L48.37,100.95H48.36ZM43.57,102.98C43.7,102.78 43.83,102.59 43.98,102.4L43.57,102.98Z" android:strokeAlpha="0.1"/>
      
    <path android:fillColor="#455A64" android:pathData="M115.81,0C158.21,-0.27 192.8,34.41 193.04,77.46C193.16,85.64 191.95,93.78 189.45,101.57L116.28,77.96L115.81,0Z"/>
      
    <path android:fillColor="#37474F" android:pathData="M183.53,40.3L183.79,40.8L116.2,62.36V61.77L183.53,40.3ZM183.98,41.16L116.26,70.25V70.8L184.23,41.63C184.15,41.47 184.07,41.31 183.98,41.16ZM116.15,53.28V53.81L178.24,32.02C178.15,31.85 178.04,31.7 177.91,31.56L116.15,53.28ZM178.58,32.39L116.18,59.88V60.5L178.87,32.85C178.79,32.67 178.67,32.51 178.58,32.39ZM116.02,34.57V34.94L163.34,16.4L163.02,16.14L116.02,34.57ZM164.37,17.25L116.06,41.18V41.63L164.69,17.4C164.59,17.34 164.48,17.29 164.37,17.25ZM116.08,43.3V43.74L171.23,23.57C171.12,23.44 171.01,23.33 170.88,23.22L116.08,43.3ZM172.11,24.44L116.14,51.32V51.85L172.38,24.72C172.28,24.61 172.17,24.49 172.05,24.38L172.11,24.44ZM115.9,15.74V15.95L140.23,3.92H139.96L115.9,15.74ZM143.16,4.95L116,21.61V21.79L143.44,4.98L143.16,4.95ZM115.96,25.14V25.43L153.62,9.83C153.51,9.76 153.4,9.7 153.29,9.65L115.96,25.14ZM155.42,10.89L116.05,31.99V32.39L155.76,11.1L155.42,10.89ZM115.85,6.65V6.8L127.16,0.74H126.94L115.85,6.65ZM131.81,1.59L115.88,12.51V12.71L132.05,1.62C131.98,1.61 131.89,1.6 131.81,1.61V1.59ZM115.82,2.71V2.85L119.61,0.06H119.41L115.82,2.71ZM192.77,84.88L161.78,92.65L162.18,92.79L192.77,85.12C192.77,85.12 192.77,84.97 192.77,84.88ZM150.8,89.11L151.38,89.29L192.84,83.75C192.84,83.66 192.84,83.58 192.84,83.49L150.8,89.11ZM191.25,94.95L179.02,98.19L179.3,98.28L191.22,95.13C191.24,95.08 191.25,95.01 191.25,94.95ZM172.75,96.18L173.17,96.32L191.34,94.41C191.35,94.35 191.35,94.29 191.34,94.23L172.75,96.18ZM192.99,74.33L144.68,87.12L145.18,87.27L192.99,74.63V74.33ZM130.75,82.61L131.48,82.85L192.95,73.63C192.96,73.52 192.96,73.42 192.95,73.31L130.75,82.61ZM158.9,71.63L127.45,81.55L128.03,81.75L159.03,71.98L179.49,65.53L189.74,62.32L191.43,61.79C191.43,61.67 191.43,61.55 191.43,61.41L189.71,61.95L179.47,65.18L158.9,71.63ZM117.05,78.2L117.82,78.45L191.25,61.24C191.23,61.12 191.21,61 191.18,60.88L117.05,78.2ZM188.22,50.72L116.35,77.98L116.99,78.17L188.39,51.16C188.35,51.01 188.29,50.86 188.22,50.72ZM116.25,71.42V71.93L188.22,50.57C188.18,50.41 188.13,50.27 188.06,50.13L116.25,71.42Z"/>
      
    <path android:fillColor="#37474F" android:pathData="M115.81,0H121.86C164.27,-0.29 198.87,34.39 199.1,77.45C199.22,85.63 198,93.78 195.49,101.57H189.43C191.93,93.78 193.15,85.64 193.02,77.46C192.77,34.41 158.19,-0.27 115.81,0Z"/>
    
</vector>


================================================================================

FILE 186: app\src\main\res\drawable\ic_penerimamanfaat.xml
Lines: 9 | Size: 1164 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="15dp" android:viewportHeight="15" android:viewportWidth="15" android:width="15dp">
      
    <path android:fillColor="#00000000" android:pathData="M4.75,10.75C5.993,10.75 7,9.743 7,8.5C7,7.257 5.993,6.25 4.75,6.25C3.507,6.25 2.5,7.257 2.5,8.5C2.5,9.743 3.507,10.75 4.75,10.75Z" android:strokeColor="#F8F8F8" android:strokeLineCap="round" android:strokeLineJoin="round" android:strokeWidth="1.5"/>
      
    <path android:fillColor="#00000000" android:pathData="M10.75,5.75C11.993,5.75 13,4.743 13,3.5C13,2.257 11.993,1.25 10.75,1.25C9.507,1.25 8.5,2.257 8.5,3.5C8.5,4.743 9.507,5.75 10.75,5.75Z" android:strokeColor="#F8F8F8" android:strokeLineCap="round" android:strokeLineJoin="round" android:strokeWidth="1.5"/>
      
    <path android:fillColor="#00000000" android:pathData="M7.5,8.75C7.5,7.75 8.25,5.75 10.75,5.75C13.25,5.75 14,7.75 14,8.75M1.5,13.75C1.5,12.75 2.25,10.75 4.75,10.75C7.25,10.75 8,12.75 8,13.75" android:strokeColor="#F8F8F8" android:strokeLineCap="round" android:strokeLineJoin="round" android:strokeWidth="1.5"/>
    
</vector>


================================================================================

FILE 187: app\src\main\res\drawable\ic_pengelolaansampah.xml
Lines: 5 | Size: 1408 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="11dp" android:viewportHeight="11" android:viewportWidth="10" android:width="10dp">
      
    <path android:fillColor="#F8F8F8" android:fillType="evenOdd" android:pathData="M3.103,0.322C3.312,0.116 3.594,0 3.889,0H6.111C6.406,0 6.688,0.116 6.897,0.322C7.105,0.528 7.222,0.808 7.222,1.1V2.2H8.882C8.886,2.2 8.89,2.2 8.894,2.2H9.444C9.751,2.2 10,2.446 10,2.75C10,3.054 9.751,3.3 9.444,3.3H9.4L8.889,9.375C8.882,9.804 8.707,10.213 8.401,10.517C8.088,10.826 7.664,11 7.222,11H2.778C2.336,11 1.912,10.826 1.599,10.517C1.293,10.213 1.118,9.804 1.111,9.375L0.6,3.3H0.556C0.249,3.3 0,3.054 0,2.75C0,2.446 0.249,2.2 0.556,2.2H1.106C1.11,2.2 1.114,2.2 1.118,2.2H2.778V1.1C2.778,0.808 2.895,0.528 3.103,0.322ZM1.715,3.3L2.22,9.304C2.222,9.32 2.222,9.335 2.222,9.35C2.222,9.496 2.281,9.636 2.385,9.739C2.489,9.842 2.63,9.9 2.778,9.9H7.222C7.37,9.9 7.511,9.842 7.615,9.739C7.719,9.636 7.778,9.496 7.778,9.35C7.778,9.335 7.778,9.32 7.78,9.304L8.285,3.3H1.715ZM6.111,2.2H3.889V1.1H6.111V2.2ZM3.889,4.4C4.196,4.4 4.444,4.646 4.444,4.95V8.25C4.444,8.554 4.196,8.8 3.889,8.8C3.582,8.8 3.333,8.554 3.333,8.25V4.95C3.333,4.646 3.582,4.4 3.889,4.4ZM6.111,4.4C6.418,4.4 6.667,4.646 6.667,4.95V8.25C6.667,8.554 6.418,8.8 6.111,8.8C5.804,8.8 5.556,8.554 5.556,8.25V4.95C5.556,4.646 5.804,4.4 6.111,4.4Z"/>
    
</vector>


================================================================================

FILE 188: app\src\main\res\drawable\ic_penggunaanair.xml
Lines: 7 | Size: 1790 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="13dp" android:viewportHeight="13" android:viewportWidth="10" android:width="10dp">
      
    <path android:fillColor="#F8F8F8" android:pathData="M5.406,0.4C5.293,0.303 5.149,0.25 5,0.25C4.85,0.25 4.706,0.304 4.593,0.401L4.537,0.449C4.314,0.648 4.094,0.853 3.879,1.063C3.333,1.595 2.816,2.156 2.33,2.744C1.766,3.428 1.191,4.227 0.754,5.07C0.319,5.907 0,6.83 0,7.75C0,9.076 0.527,10.348 1.464,11.285C2.402,12.223 3.674,12.75 5,12.75C6.326,12.75 7.598,12.223 8.536,11.285C9.473,10.348 10,9.076 10,7.75C10,6.83 9.681,5.907 9.246,5.07C8.809,4.226 8.234,3.428 7.67,2.743C7.034,1.974 6.345,1.251 5.608,0.579L5.407,0.401L5.406,0.4ZM1.25,7.75C1.25,7.108 1.477,6.389 1.863,5.645C2.247,4.906 2.765,4.182 3.294,3.538C3.825,2.897 4.394,2.289 5,1.719C5.606,2.289 6.175,2.896 6.705,3.537C7.235,4.181 7.753,4.906 8.136,5.644C8.523,6.389 8.75,7.107 8.75,7.749C8.75,8.744 8.355,9.698 7.652,10.401C6.948,11.104 5.995,11.499 5,11.499C4.005,11.499 3.052,11.104 2.348,10.401C1.645,9.698 1.25,8.744 1.25,7.749V7.75Z"/>
      
    <path android:fillColor="#F8F8F8" android:pathData="M2.725,7.776C2.566,7.824 2.433,7.932 2.354,8.078C2.275,8.223 2.257,8.394 2.304,8.553C2.438,9.001 2.681,9.408 3.011,9.739C3.342,10.069 3.749,10.313 4.197,10.446C4.276,10.47 4.359,10.479 4.441,10.471C4.523,10.462 4.602,10.438 4.675,10.399C4.748,10.36 4.812,10.307 4.864,10.243C4.916,10.179 4.955,10.106 4.979,10.027C5.002,9.948 5.01,9.865 5.001,9.783C4.992,9.701 4.968,9.621 4.928,9.549C4.888,9.477 4.835,9.413 4.771,9.361C4.706,9.31 4.632,9.271 4.553,9.248C4.305,9.174 4.079,9.038 3.895,8.855C3.712,8.672 3.577,8.445 3.502,8.197C3.455,8.038 3.346,7.905 3.201,7.826C3.055,7.747 2.884,7.729 2.725,7.776Z"/>
    
</vector>


================================================================================

FILE 189: app\src\main\res\drawable\ic_pohontertanam.xml
Lines: 5 | Size: 2714 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="13dp" android:viewportHeight="13" android:viewportWidth="10" android:width="10dp">
      
    <path android:fillColor="#F8F8F8" android:fillType="evenOdd" android:pathData="M3.609,1.301C3.271,1.293 2.94,1.394 2.676,1.587C2.412,1.78 2.232,2.052 2.168,2.354C2.104,2.657 2.16,2.97 2.326,3.239C2.512,3.539 2.407,3.92 2.088,4.105C1.899,4.215 1.741,4.365 1.627,4.541C1.512,4.717 1.446,4.915 1.432,5.119C1.417,5.323 1.456,5.528 1.545,5.715C1.634,5.903 1.771,6.069 1.943,6.2C2.152,6.358 2.244,6.61 2.181,6.85C2.133,7.035 2.129,7.227 2.171,7.414C2.213,7.6 2.3,7.775 2.424,7.928C2.549,8.08 2.708,8.206 2.892,8.296C3.073,8.385 3.273,8.437 3.478,8.449L3.582,8.452H4.286V7.418L3.066,6.308C2.787,6.054 2.787,5.642 3.066,5.388C3.345,5.134 3.798,5.134 4.077,5.388L4.286,5.579V3.898C4.286,3.538 4.606,3.247 5,3.247C5.395,3.247 5.715,3.538 5.715,3.898V4.929L5.924,4.738C6.203,4.484 6.655,4.484 6.934,4.738C7.213,4.992 7.213,5.404 6.934,5.658L5.715,6.768V8.452H6.429C6.645,8.452 6.858,8.408 7.052,8.322C7.246,8.236 7.417,8.112 7.551,7.958C7.684,7.804 7.778,7.624 7.825,7.432C7.871,7.24 7.869,7.041 7.819,6.85C7.756,6.61 7.849,6.358 8.057,6.2C8.23,6.069 8.366,5.903 8.455,5.715C8.544,5.528 8.583,5.323 8.568,5.119C8.554,4.915 8.487,4.717 8.373,4.541C8.259,4.365 8.101,4.215 7.912,4.105C7.592,3.92 7.488,3.54 7.674,3.239C7.839,2.971 7.895,2.657 7.831,2.355C7.767,2.053 7.587,1.781 7.323,1.588C7.059,1.395 6.729,1.294 6.391,1.302C6.052,1.31 5.728,1.427 5.476,1.632C5.205,1.853 4.795,1.853 4.524,1.632C4.272,1.426 3.947,1.309 3.609,1.301ZM4.286,9.752V12.35C4.286,12.709 4.606,13 5,13C5.395,13 5.715,12.709 5.715,12.35V9.752H6.429C6.429,9.752 6.429,9.752 6.429,9.752C6.86,9.752 7.286,9.664 7.675,9.492C8.063,9.321 8.404,9.072 8.672,8.764C8.939,8.456 9.127,8.096 9.22,7.713C9.282,7.455 9.301,7.192 9.277,6.931C9.48,6.723 9.646,6.487 9.767,6.23C9.945,5.854 10.023,5.446 9.994,5.037C9.966,4.629 9.832,4.233 9.604,3.881C9.481,3.69 9.332,3.516 9.161,3.361C9.296,2.957 9.323,2.528 9.234,2.108C9.105,1.504 8.745,0.96 8.218,0.574C7.69,0.189 7.03,-0.014 6.353,0.002C5.875,0.013 5.41,0.134 5.001,0.349C4.591,0.133 4.126,0.013 3.647,0.001C2.97,-0.016 2.309,0.187 1.781,0.573C1.254,0.959 0.893,1.503 0.765,2.108C0.676,2.527 0.703,2.958 0.838,3.361C0.668,3.516 0.519,3.69 0.396,3.881C0.167,4.233 0.034,4.629 0.006,5.038C-0.023,5.446 0.055,5.854 0.233,6.23C0.355,6.487 0.521,6.723 0.724,6.931C0.7,7.179 0.716,7.43 0.772,7.675C0.856,8.047 1.029,8.398 1.278,8.703C1.527,9.008 1.846,9.26 2.213,9.44C2.581,9.621 2.987,9.726 3.404,9.748C3.411,9.748 3.418,9.749 3.425,9.749L3.551,9.752C3.558,9.752 3.565,9.752 3.571,9.752H4.286Z"/>
    
</vector>


================================================================================

FILE 190: app\src\main\res\drawable\ic_tachometer_average.xml
Lines: 5 | Size: 599 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="512dp" android:viewportHeight="24" android:viewportWidth="24" android:width="512dp">
      
    <path android:fillColor="#FF000000" android:pathData="M20,4.052C8.353,-5.659 -6.712,9.5 3.138,21.081A2.318,2.318 0,0 0,7.1 20.616c0.347,-0.519 0.682,-1.687 1.486,-1.616h6.824c0.8,-0.074 1.161,1.129 1.5,1.646A2.367,2.367 0,0 0,19 22a2.734,2.734 0,0 0,1.814 -0.867A12.058,12.058 0,0 0,20 4.052ZM12,15a2.008,2.008 0,0 1,-1 -3.732V6a1,1 0,0 1,2 0v5.268A2.008,2.008 0,0 1,12 15Z"/>
    
</vector>


================================================================================

FILE 191: app\src\main\res\drawable\ic_tambahdata.xml
Lines: 7 | Size: 994 chars
--------------------------------------------------------------------------------
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="24dp" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="#27361F" android:pathData="M4,0L20,0A4,4 0,0 1,24 4L24,20A4,4 0,0 1,20 24L4,24A4,4 0,0 1,0 20L0,4A4,4 0,0 1,4 0z"/>
      
    <path android:fillColor="#F8F8F8" android:pathData="M12,4C12.761,4 13.379,4.618 13.379,5.379V10.621H18.621C18.986,10.621 19.337,10.766 19.596,11.025C19.855,11.283 20,11.634 20,12C20,12.366 19.855,12.717 19.596,12.975C19.337,13.234 18.986,13.379 18.621,13.379H13.379V18.621C13.379,18.986 13.234,19.337 12.975,19.596C12.717,19.855 12.366,20 12,20C11.634,20 11.283,19.855 11.025,19.596C10.766,19.337 10.621,18.986 10.621,18.621V13.379H5.379C5.013,13.379 4.663,13.234 4.404,12.975C4.145,12.717 4,12.366 4,12C4,11.634 4.145,11.283 4.404,11.025C4.663,10.766 5.013,10.621 5.379,10.621H10.621V5.379C10.621,4.618 11.239,4 12,4Z"/>
    
</vector>


================================================================================

FILE 192: app\src\main\res\layout\activity_main.xml
Lines: 19 | Size: 805 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Hello World!"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>

================================================================================

FILE 193: app\src\main\res\mipmap-anydpi-v26\ic_launcher.xml
Lines: 6 | Size: 343 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================================================================================

FILE 194: app\src\main\res\mipmap-anydpi-v26\ic_launcher_round.xml
Lines: 6 | Size: 343 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================================================================================

FILE 195: app\src\main\res\values-night\themes.xml
Lines: 7 | Size: 331 chars
--------------------------------------------------------------------------------
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.TumbuhNyata" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your dark theme here. -->
        <!-- <item name="colorPrimary">@color/my_dark_primary</item> -->
    </style>
</resources>

================================================================================

FILE 196: app\src\main\res\values\colors.xml
Lines: 5 | Size: 147 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>

================================================================================

FILE 197: app\src\main\res\values\strings.xml
Lines: 3 | Size: 73 chars
--------------------------------------------------------------------------------
<resources>
    <string name="app_name">TumbuhNyata</string>
</resources>

================================================================================

FILE 198: app\src\main\res\values\themes.xml
Lines: 9 | Size: 405 chars
--------------------------------------------------------------------------------
<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.TumbuhNyata" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your light theme here. -->
        <!-- <item name="colorPrimary">@color/my_light_primary</item> -->
    </style>

    <style name="Theme.TumbuhNyata" parent="Base.Theme.TumbuhNyata" />
</resources>

================================================================================

FILE 199: app\src\main\res\xml\backup_rules.xml
Lines: 13 | Size: 478 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older that API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

================================================================================

FILE 200: app\src\main\res\xml\data_extraction_rules.xml
Lines: 19 | Size: 551 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

================================================================================

FILE 201: app\src\main\res\xml\network_security_config.xml
Lines: 9 | Size: 354 chars
--------------------------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<network-security-config>
    <domain-config cleartextTrafficPermitted="true">
        <domain includeSubdomains="true">10.0.2.2</domain>
        <domain includeSubdomains="true">192.168.56.1</domain>
        <domain includeSubdomains="true">192.168.111.226</domain>

    </domain-config>
</network-security-config>

================================================================================

FILE 202: app\src\test\java\com\example\tumbuhnyata\ExampleUnitTest.kt
Lines: 17 | Size: 347 chars
--------------------------------------------------------------------------------
package com.example.tumbuhnyata

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

================================================================================

FILE 203: gradle.properties
Lines: 23 | Size: 1346 chars
--------------------------------------------------------------------------------
# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

================================================================================

FILE 204: gradle\wrapper\gradle-wrapper.properties
Lines: 6 | Size: 233 chars
--------------------------------------------------------------------------------
#Tue Mar 18 13:40:51 WIB 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.10.2-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists


================================================================================

